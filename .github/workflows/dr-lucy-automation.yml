name: Dr. Lucy Automation

# Define permissions at workflow level
permissions:
  contents: write
  pull-requests: write
  issues: write
  id-token: write # Required for Google Cloud authentication

on:
  workflow_dispatch:  # Allow manual triggering of the workflow
    inputs:
      instructions:
        description: 'Instructions from OpenAI for Dr. Lucy Automation'
        required: true
        type: string
      action_type:
        description: 'Type of action to perform (deploy, test, update, etc.)'
        required: true
        type: string
        default: 'deploy'
      target_environment:
        description: 'Target environment for the operation'
        required: true
        type: string
        default: 'staging'
      push_to_live:
        description: 'Whether to push changes to live environment'
        required: false
        type: boolean
        default: false
  pull_request:
    types: [opened, synchronize, reopened, ready_for_review]
  issues:
    types: [opened, labeled, reopened]
  issue_comment:
    types: [created]
  pull_request_target:
    types: [opened]
  schedule:
    - cron: '0 0 * * *'  # Run daily at midnight

jobs:
  # Workflow failed notification
  workflow-failed:
    name: Workflow Failure Notification
    runs-on: ubuntu-latest
    if: failure()
    needs: [pr-size-labeler, pr-description-check, pr-review, dependabot-management, issue-triage, stale-management, firebase-deployment, openai-assignment]
    steps:
      - name: Notify Slack on Workflow Failure
        uses: slackapi/slack-github-action@v1.24.0
        with:
          channel-id: 'git-lucy'
          slack-message: ":rotating_light: *Dr. Lucy Automation Workflow Failed*\nWorkflow: ${{ github.workflow }}\nRepository: ${{ github.repository }}\nTriggered by: ${{ github.actor }}\nEvent: ${{ github.event_name }}\nSee details: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"
        env:
          SLACK_BOT_TOKEN: ${{ secrets.SLACK_WEBHOOK_URL }}
          SLACK_APP_ID: "A08EZ0320RX" # Security Alert app in Coaching2100 workspace

  # PR Size Labeler - Automatically adds size labels to PRs
  pr-size-labeler:
    name: Label PR by Size
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    steps:
      - name: Label PRs by Size
        uses: codelytv/pr-size-labeler@v1
        with:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          xs_label: 'size/xs'
          xs_max_size: '10'
          s_label: 'size/s'
          s_max_size: '100'
          m_label: 'size/m'
          m_max_size: '500'
          l_label: 'size/l'
          l_max_size: '1000'
          xl_label: 'size/xl'
          fail_if_xl: 'false'
          message_if_xl: 'This PR is too large. Please consider breaking it down into smaller PRs.'

      # Notify Slack about PR size
      - name: Notify Slack about PR Size
        uses: slackapi/slack-github-action@v1.24.0
        if: always()
        with:
          channel-id: 'git-lucy'
          slack-message: ":mag: *Dr. Lucy Automation* labeled PR #${{ github.event.pull_request.number }} by ${{ github.event.pull_request.user.login }} based on size.\nTitle: ${{ github.event.pull_request.title }}\nLink: ${{ github.event.pull_request.html_url }}"
        env:
          SLACK_BOT_TOKEN: ${{ secrets.SLACK_WEBHOOK_URL }}
          SLACK_APP_ID: "A08EZ0320RX" # Security Alert app in Coaching2100 workspace
  # PR Description Checker
  pr-description-check:
    name: Check PR Description
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    steps:
      - name: Verify PR Description
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const pr = context.payload.pull_request;
            if (!pr.body || pr.body.length < 20) {
              core.setFailed('PR description is too short. Please provide more details about the changes.');
              await github.rest.issues.createComment({
                issue_number: pr.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: '📝 **Dr. Lucy Automation Notice**\nYour PR description is too short. Please update it to include:\n- What changes were made\n- Why the changes were needed\n- How the changes were implemented\n\nA good description helps reviewers understand your PR more quickly!'
              });
            }

      # Notify Slack about PR description check
      - name: Notify Slack about PR Description Check
        uses: slackapi/slack-github-action@v1.24.0
        if: always()
        with:
          channel-id: 'git-lucy'
          slack-message: ":clipboard: *Dr. Lucy Automation* checked PR #${{ github.event.pull_request.number }} description.\nStatus: ${{ job.status }}\nTitle: ${{ github.event.pull_request.title }}\nLink: ${{ github.event.pull_request.html_url }}"
        env:
          SLACK_BOT_TOKEN: ${{ secrets.SLACK_WEBHOOK_URL }}
          SLACK_APP_ID: "A08EZ0320RX" # Security Alert app in Coaching2100 workspace
  # Automated PR Review
  pr-review:
    name: Automated PR Review
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    needs: [pr-description-check]
    steps:
      - uses: actions/checkout@v3
      
      # Add DRLA Authentication
      - name: Authenticate with Google Cloud
        uses: google-github-actions/auth@v1
        with:
          credentials_json: ${{ secrets.DRLA_SERVICE_ACCOUNT_KEY }}
          
      # Set up Google Cloud SDK
      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v1
        with:
          fetch-depth: 0
      
      - name: Count Changed Files
        id: changes
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          result-encoding: string
          script: |
            const { data: files } = await github.rest.pulls.listFiles({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: context.payload.pull_request.number
            });
            return files.length;

      - name: Add Review Comment
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const pr = context.payload.pull_request;
            await github.rest.issues.createComment({
              issue_number: pr.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: '\U0001F469‍\U0001F52C **Dr. Lucy Automation Review**\n\nThank you for your contribution! I\'ve automatically reviewed this PR and here are my findings:\n\n- This PR changes approximately **${{ steps.changes.outputs.result }}** files\n- I\'ll be monitoring this PR for updates and will help with the review process\n\nPlease make sure all tests pass and address any feedback from human reviewers!'
            });

      # Notify Slack about PR review
      - name: Notify Slack about PR Review
        uses: slackapi/slack-github-action@v1.24.0
        if: always()
        with:
          channel-id: 'git-lucy'
          slack-message: ":eyes: *Dr. Lucy Automation* reviewed PR #${{ github.event.pull_request.number }} by ${{ github.event.pull_request.user.login }}.\nChanged Files: ${{ steps.changes.outputs.result }}\nTitle: ${{ github.event.pull_request.title }}\nLink: ${{ github.event.pull_request.html_url }}"
        env:
          SLACK_BOT_TOKEN: ${{ secrets.SLACK_WEBHOOK_URL }}
          SLACK_APP_ID: "A08EZ0320RX" # Security Alert app in Coaching2100 workspace
  # Dependabot PR Management
  dependabot-management:
    name: Manage Dependabot PRs
    runs-on: ubuntu-latest
    if: github.actor == 'dependabot[bot]' && github.event_name == 'pull_request_target'
    steps:
      # Add DRLA Authentication
      - name: Authenticate with Google Cloud
        uses: google-github-actions/auth@v1
        with:
          credentials_json: ${{ secrets.DRLA_SERVICE_ACCOUNT_KEY }}
          
      # Set up Google Cloud SDK
      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v1
      - name: Approve & Auto-merge for Minor/Patch Updates
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const pr = context.payload.pull_request;
            
            // Check if it's a minor or patch update by looking at the title
            const isSafeUpdate = /bump .* from (.*) to (.*)/.test(pr.title);
            if (isSafeUpdate) {
              const updateMatch = pr.title.match(/bump .* from (.*) to (.*)/);
              const fromVersion = updateMatch[1].split('.');
              const toVersion = updateMatch[2].split('.');
              
              // If it's a patch or minor update, auto-approve and merge
              if (fromVersion[0] === toVersion[0]) {
                console.log('Safe update detected - approving and enabling auto-merge');
                
                await github.rest.pulls.createReview({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  pull_number: pr.number,
                  event: 'APPROVE',
                  body: '👩‍🔬 **Dr. Lucy Automation**\n\nThis minor/patch update has been automatically approved. If CI passes, it will be auto-merged.'
                });
                
                // Enable auto-merge
                try {
                  await github.rest.pulls.updateBranch({
                    owner: context.repo.owner,
                    repo: context.repo.repo,
                    pull_number: pr.number,
                    expected_head_sha: pr.head.sha
                  });
                  
                  await github.rest.pulls.merge({
                    owner: context.repo.owner,
                    repo: context.repo.repo,
                    pull_number: pr.number,
                    merge_method: 'squash'
                  });
                } catch (e) {
                  console.log('Could not enable auto-merge: ' + e);
                }
              } else {
                // Major version update needs manual review
                await github.rest.issues.createComment({
                  issue_number: pr.number,
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  body: '⚠️ **Dr. Lucy Automation**\n\nThis is a major version update and requires manual review. Please check for breaking changes before merging.'
                });
                
                await github.rest.issues.addLabels({
                  issue_number: pr.number,
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  labels: ['major-update', 'needs-review']
                });
              }
            }
            
      # Notify Slack about Dependabot PR management
      - name: Notify Slack about Dependabot Management
        uses: slackapi/slack-github-action@v1.24.0
        if: always()
        with:
          channel-id: 'git-lucy'
          slack-message: ":package: *Dr. Lucy Automation* processed Dependabot PR #${{ github.event.pull_request.number }}.\nTitle: ${{ github.event.pull_request.title }}\nAction: ${{ fromVersion[0] === toVersion[0] ? 'Auto-approved and merged' : 'Flagged for manual review' }}\nLink: ${{ github.event.pull_request.html_url }}"
        env:
          SLACK_BOT_TOKEN: ${{ secrets.SLACK_WEBHOOK_URL }}
          SLACK_APP_ID: "A08EZ0320RX" # Security Alert app in Coaching2100 workspace
  # Issue Triage
  issue-triage:
    name: Triage New Issues
    runs-on: ubuntu-latest
    if: github.event_name == 'issues' && github.event.action == 'opened'
    steps:
      # Add DRLA Authentication
      - name: Authenticate with Google Cloud
        uses: google-github-actions/auth@v1
        with:
          credentials_json: ${{ secrets.DRLA_SERVICE_ACCOUNT_KEY }}
          
      # Set up Google Cloud SDK
      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v1
      - name: Initial Issue Triage
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const issue = context.payload.issue;
            
            // Add welcome comment
            await github.rest.issues.createComment({
              issue_number: issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: '👩‍🔬 **Dr. Lucy Automation**\n\nThank you for opening this issue! I\'ll help triage it.\n\nA team member will review this soon. In the meantime, please make sure you\'ve provided all necessary information.'
            });
            
            // Analyze issue content and add labels
            const title = issue.title.toLowerCase();
            const body = issue.body ? issue.body.toLowerCase() : '';
            
            const labels = [];
            
            // Check for bug reports
            if (title.includes('bug') || 
                title.includes('error') || 
                title.includes('not working') ||
                body.includes('expected behavior') && body.includes('actual behavior')) {
              labels.push('bug');
            }
            
            // Check for feature requests
            if (title.includes('feature') || 
                title.includes('enhancement') || 
                title.includes('add') ||
                body.includes('feature request')) {
              labels.push('enhancement');
            }
            
            // Check for questions
            if (title.includes('how') || 
                title.includes('?') || 
                title.includes('question') ||
                body.includes('i\'m trying to')) {
              labels.push('question');
            }
            
            // Add priority based on keywords
            if (title.includes('urgent') || 
                title.includes('critical') || 
                title.includes('crash') ||
                body.includes('urgent') ||
                body.includes('critical')) {
              labels.push('priority/high');
            } else {
              labels.push('priority/medium');
            }
            
            // Add triage label
            labels.push('triage');
            
            // Apply labels if any were determined
            if (labels.length > 0) {
              await github.rest.issues.addLabels({
                issue_number: issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                labels: labels
              });
            }

      # Notify Slack about issue triage
      - name: Notify Slack about Issue Triage
        uses: slackapi/slack-github-action@v1.24.0
        if: always()
        with:
          channel-id: 'git-lucy'
          slack-message: ":ticket: *Dr. Lucy Automation* triaged issue #${{ github.event.issue.number }} opened by ${{ github.event.issue.user.login }}.\nTitle: ${{ github.event.issue.title }}\nLabels: ${{ join(labels, ', ') }}\nLink: ${{ github.event.issue.html_url }}"
        env:
          SLACK_BOT_TOKEN: ${{ secrets.SLACK_WEBHOOK_URL }}
          SLACK_APP_ID: "A08EZ0320RX" # Security Alert app in Coaching2100 workspace
  # Stale Issue Management
  stale-management:
    name: Manage Stale Issues & PRs
    runs-on: ubuntu-latest
    if: github.event.schedule == '0 0 * * *'  # Only run on the daily schedule
    steps:
      # Add DRLA Authentication
      - name: Authenticate with Google Cloud
        uses: google-github-actions/auth@v1
        with:
          credentials_json: ${{ secrets.DRLA_SERVICE_ACCOUNT_KEY }}
          
      # Set up Google Cloud SDK
      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v1
      - name: Mark and Close Stale Issues and PRs
        uses: actions/stale@v8
        with:
          repo-token: ${{ secrets.GITHUB_TOKEN }}
          stale-issue-message: '👩‍🔬 **Dr. Lucy Automation**\n\nThis issue has been marked as stale due to inactivity for 30 days. It will be closed in 7 days unless there is new activity.'
          stale-pr-message: '👩‍🔬 **Dr. Lucy Automation**\n\nThis PR has been marked as stale due to inactivity for 30 days. It will be closed in 7 days unless there is new activity.'
          close-issue-message: '👩‍🔬 **Dr. Lucy Automation**\n\nThis issue has been closed due to continued inactivity. Please reopen if this issue is still relevant.'
          close-pr-message: '👩‍🔬 **Dr. Lucy Automation**\n\nThis PR has been closed due to continued inactivity. Please reopen if this PR is still relevant.'
          stale-issue-label: 'stale'
          stale-pr-label: 'stale'
          exempt-issue-labels: 'bug,enhancement,in-progress'
          exempt-pr-labels: 'wip,waiting-for-review'
          days-before-stale: 30
          days-before-close: 7

      # Notify Slack about stale management
      - name: Notify Slack about Stale Management
        uses: slackapi/slack-github-action@v1.24.0
        if: always()
        with:
          channel-id: 'git-lucy'
          slack-message: ":broom: *Dr. Lucy Automation* ran stale issue/PR management.\nStatus: ${{ job.status }}\nRepository: ${{ github.repository }}"
        env:
          SLACK_BOT_TOKEN: ${{ secrets.SLACK_WEBHOOK_URL }}
          SLACK_APP_ID: "A08EZ0320RX" # Security Alert app in Coaching2100 workspace
  firebase-deployment:
    name: Firebase Deployment
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch'
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
          
      # Add Firebase Authentication
      - name: Authenticate with Firebase
        uses: google-github-actions/auth@v1
        with:
          credentials_json: ${{ secrets.FIREBASE_SERVICE_ACCOUNT_KEY }}
          
      # Set up Google Cloud SDK with Firebase
      - name: Set up Cloud SDK with Firebase
        uses: google-github-actions/setup-gcloud@v1
        with:
          install_components: 'firebase'
          
      # Example Firebase deployment step
      - name: Deploy to Firebase
        run: |
          echo "Deploying to Firebase..."
          # Add your Firebase deployment commands here
          # Example: firebase deploy --only hosting

      # Notify Slack about Firebase deployment
      - name: Notify Slack about Firebase Deployment
        uses: slackapi/slack-github-action@v1.24.0
        if: always()
        with:
          channel-id: 'git-lucy'
          slack-message: ":rocket: *Dr. Lucy Automation* ran Firebase deployment.\nStatus: ${{ job.status }}\nBranch: ${{ github.ref_name }}\nCommit: ${{ github.sha }}\nTriggered by: ${{ github.actor }}"
        env:
          SLACK_BOT_TOKEN: ${{ secrets.SLACK_WEBHOOK_URL }}
          SLACK_APP_ID: \"A08EZ0320RX\" # Security Alert app in Coaching2100 workspace

  # OpenAI Assignment - Process instructions from OpenAI
  openai-assignment:
    name: Process OpenAI Assignment
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch' && github.event.inputs.instructions != null
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
        
      # Authenticate with Google Cloud using DRLA service account
      - name: Authenticate with Google Cloud
        id: auth
        uses: google-github-actions/auth@v1
        with:
          credentials_json: ${{ secrets.DRLA_SERVICE_ACCOUNT_KEY }}
          
      # Set up Google Cloud SDK
      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v1
        with:
          install_components: 'firebase,kubectl,gke-gcloud-auth-plugin'

      # Notify Slack that assignment has started
      - name: Notify Slack about OpenAI Assignment Start
        uses: slackapi/slack-github-action@v1.24.0
        with:
          channel-id: 'git-lucy'
          slack-message: ":brain: *Dr. Lucy Automation* received an assignment from OpenAI.\\nAction Type: ${{ github.event.inputs.action_type }}\\nTarget Environment: ${{ github.event.inputs.target_environment }}\\nPush to Live: ${{ github.event.inputs.push_to_live }}\\nTriggered by: ${{ github.actor }}"
        env:
          SLACK_BOT_TOKEN: ${{ secrets.SLACK_WEBHOOK_URL }}
          SLACK_APP_ID: "A08EZ0320RX" # Security Alert app in Coaching2100 workspace
      
      # Parse and process instructions
      - name: Process OpenAI Instructions
        id: process-instructions
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const instructions = process.env.INSTRUCTIONS;
            console.log(`Processing instructions from OpenAI: ${instructions}`);
            
            // Parse the instructions and determine the required actions
            let actionPlan = [];
            try {
              // Log the instructions for debugging
              core.info(`Instructions: ${instructions}`);
              
              // Simple parsing example - could be more sophisticated in a real implementation
              if (instructions.includes('deploy')) {
                actionPlan.push('deploy');
              }
              if (instructions.includes('test')) {
                actionPlan.push('test');
              }
              if (instructions.includes('update')) {
                actionPlan.push('update');
              }
              
              // Set output for use in subsequent steps
              core.setOutput('action_plan', JSON.stringify(actionPlan));
              core.setOutput('validated', 'true');
            } catch (error) {
              core.setFailed(`Error processing instructions: ${error.message}`);
              core.setOutput('validated', 'false');
            }
        env:
          INSTRUCTIONS: ${{ github.event.inputs.instructions }}
      
      # Setup application environment based on target
      - name: Setup Environment
        if: steps.process-instructions.outputs.validated == 'true'
        run: |
          echo "Setting up environment for ${{ github.event.inputs.target_environment }}"
          
          # Create environment-specific configuration
          if [[ "${{ github.event.inputs.target_environment }}" == "production" ]]; then
            echo "Setting up production environment"
            # Add production-specific setup commands
          elif [[ "${{ github.event.inputs.target_environment }}" == "staging" ]]; then
            echo "Setting up staging environment"
            # Add staging-specific setup commands
          else
            echo "Setting up development environment"
            # Add development-specific setup commands
          fi
      
      # Execute the planned actions
      - name: Execute Assignment Actions
        if: steps.process-instructions.outputs.validated == 'true'
        id: execute-actions
        run: |
          echo "Executing actions based on OpenAI instructions"
          ACTION_PLAN='${{ steps.process-instructions.outputs.action_plan }}'
          
          # Parse the JSON action plan
          if [[ $ACTION_PLAN == *"deploy"* ]]; then
            echo "Executing deployment actions"
            # Add deployment commands here
          fi
          
          if [[ $ACTION_PLAN == *"test"* ]]; then
            echo "Executing test actions"
            # Add test commands here
          fi
          
          if [[ $ACTION_PLAN == *"update"* ]]; then
            echo "Executing update actions"
            # Add update commands here
          fi
      
      # Push to live environment if requested and if we're in a push-capable action
      - name: Push to Live Environment
        if: steps.process-instructions.outputs.validated == 'true' && github.event.inputs.push_to_live == 'true'
        run: |
          echo "Pushing changes to live environment"
          
          # Verify we're allowed to push to live
          if [[ "${{ github.event.inputs.target_environment }}" != "production" ]]; then
            echo "Warning: Pushing to live from non-production environment"
          fi
          
          # Example deployment commands:
          # - For Firebase hosting
          # firebase deploy --only hosting
          
          # - For GKE
          # gcloud container clusters get-credentials my-cluster --zone us-central1-a
          # kubectl apply -f k8s/deployment.yaml
      
      # Report results
      - name: Report Assignment Results
        if: always()
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const jobStatus = process.env.JOB_STATUS;
            
            // Create a GitHub issue to document the assignment and results
            await github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: `OpenAI Assignment: ${process.env.ACTION_TYPE} on ${new Date().toISOString().split('T')[0]}`,
              body: `# OpenAI Assignment Report

              ## Instruction
              \`\`\`
              ${process.env.INSTRUCTIONS}
              \`\`\`

              ## Action Type
              ${process.env.ACTION_TYPE}

              ## Target Environment
              ${process.env.TARGET}

              ## Push to Live
              ${process.env.PUSH_TO_LIVE}

              ## Status
              ${jobStatus}

              ## Executed By
              ${process.env.ACTOR}
              
              ## Timestamp
              ${new Date().toISOString()}
              `
            });
        env:
          JOB_STATUS: ${{ job.status }}
          INSTRUCTIONS: ${{ github.event.inputs.instructions }}
          ACTION_TYPE: ${{ github.event.inputs.action_type }}
          TARGET: ${{ github.event.inputs.target_environment }}
          PUSH_TO_LIVE: ${{ github.event.inputs.push_to_live }}
          ACTOR: ${{ github.actor }}
      
      # Notify Slack about assignment completion
      - name: Notify Slack about OpenAI Assignment Completion
        uses: slackapi/slack-github-action@v1.24.0
        if: always()
        with:
          channel-id: 'git-lucy'
          slack-message: ":checkered_flag: *Dr. Lucy Automation* completed OpenAI assignment.\\nStatus: ${{ job.status }}\\nAction Type: ${{ github.event.inputs.action_type }}\\nTarget Environment: ${{ github.event.inputs.target_environment }}\\nPush to Live: ${{ github.event.inputs.push_to_live }}\\nTriggered by: ${{ github.actor }}"
        env:
          SLACK_BOT_TOKEN: ${{ secrets.SLACK_WEBHOOK_URL }}
          SLACK_APP_ID: "A08EZ0320RX" # Security Alert app in Coaching2100 workspace
