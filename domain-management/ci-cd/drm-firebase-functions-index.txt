const functions = require('firebase-functions');
const admin = require('firebase-admin');
const ethers = require('ethers');
const axios = require('axios');

// Initialize Firebase Admin
admin.initializeApp();

/**
 * Roark Authorship Function
 * Manages creative work attribution and validation
 */
exports.roarkAuthorship = functions.https.onCall(async (data, context) => {
  // Validate user authentication
  if (!context.auth) {
    throw new functions.https.HttpsError('unauthenticated', 'User must be authenticated');
  }

  try {
    // Validate creative work submission
    const {
      workTitle,
      contributionDetails,
      aiContributionPercentage
    } = data;

    // Roark 5.0 Authorship Model Validation
    const MAX_AI_CONTRIBUTION = 0.3;
    const MIN_HUMAN_CONTRIBUTION = 0.7;

    if (aiContributionPercentage > MAX_AI_CONTRIBUTION) {
      throw new functions.https.HttpsError(
        'invalid-argument', 
        'AI contribution exceeds maximum allowed percentage'
      );
    }

    // Create creative passport
    const creativePassport = {
      id: ethers.utils.id(workTitle + Date.now()),
      title: workTitle,
      authorId: context.auth.uid,
      aiContributionPercentage,
      createdAt: admin.firestore.FieldValue.serverTimestamp(),
      contributionDetails
    };

    // Store in Firestore
    await admin.firestore()
      .collection('creativePassports')
      .doc(creativePassport.id)
      .set(creativePassport);

    return creativePassport;
  } catch (error) {
    console.error('Roark Authorship Error:', error);
    throw new functions.https.HttpsError('internal', error.message);
  }
});

/**
 * Blockchain Integration Function
 * Handles IP registration and tracking on blockchain
 */
exports.blockchainIntegration = functions.https.onCall(async (data, context) => {
  // Validate user authentication
  if (!context.auth) {
    throw new functions.https.HttpsError('unauthenticated', 'User must be authenticated');
  }

  try {
    const {
      creativePassportId,
      blockchainNetwork = 'ethereum'
    } = data;

    // Retrieve creative passport
    const passportSnapshot = await admin.firestore()
      .collection('creativePassports')
      .doc(creativePassportId)
      .get();

    if (!passportSnapshot.exists) {
      throw new functions.https.HttpsError('not-found', 'Creative passport not found');
    }

    const passportData = passportSnapshot.data();

    // Blockchain registration logic
    let provider;
    switch (blockchainNetwork) {
      case 'ethereum':
        provider = new ethers.providers.JsonRpcProvider(
          functions.config().blockchain.ethereum_rpc_url
        );
        break;
      default:
        throw new functions.https.HttpsError('invalid-argument', 'Unsupported blockchain network');
    }

    // Example blockchain transaction (requires actual smart contract ABI and address)
    const wallet = new ethers.Wallet(
      functions.config().blockchain.private_key, 
      provider
    );

    // Placeholder for actual smart contract interaction
    const ipRegistryContract = new ethers.Contract(
      functions.config().blockchain.ip_registry_address,
      IPRegistryABI,
      wallet
    );

    const transaction = await ipRegistryContract.registerCreativeWork(
      passportData.id,
      passportData.title,
      passportData.authorId,
      passportData.aiContributionPercentage * 100
    );

    // Update passport with blockchain details
    await passportSnapshot.ref.update({
      blockchainTransaction: transaction.hash,
      blockchainNetwork,
      registeredAt: admin.firestore.FieldValue.serverTimestamp()
    });

    return {
      transactionHash: transaction.hash,
      blockNumber: transaction.blockNumber
    };
  } catch (error) {
    console.error('Blockchain Integration Error:', error);
    throw new functions.https.HttpsError('internal', error.message);
  }
});

/**
 * Continuous Integration Governance (CIG) Framework
 * Manages automated testing and deployment workflows
 */
exports.cigFramework = functions.https.onCall(async (data, context) => {
  // Validate user authentication and permissions
  if (!context.auth || !context.auth.token.admin) {
    throw new functions.https.HttpsError('permission-denied', 'Admin access required');
  }

  try {
    const {
      repositoryUrl,
      branch = 'main',
      deploymentEnvironment = 'staging'
    } = data;

    // Trigger CI/CD pipeline
    const githubToken = functions.config().github.token;
    const workflowDispatchUrl = `https://api.github.com/repos/${repositoryUrl}/actions/workflows/ci-cd.yml/dispatches`;

    const response = await axios.post(
      workflowDispatchUrl,
      { 
        ref: branch,
        inputs: {
          environment: deploymentEnvironment
        }
      },
      {
        headers: {
          'Authorization': `token ${githubToken}`,
          'Accept': 'application/vnd.github.v3+json'
        }
      }
    );

    return {
      status: 'triggered',
      workflowRunId: response.data.id,
      timestamp: admin.firestore.FieldValue.serverTimestamp()
    };
  } catch (error) {
    console.error('CIG Framework Error:', error);
    throw new functions.https.HttpsError('internal', error.message);
  }
});

// Export functions for deployment
module.exports = {
  roarkAuthorship,
  blockchainIntegration,
  cigFramework
};
