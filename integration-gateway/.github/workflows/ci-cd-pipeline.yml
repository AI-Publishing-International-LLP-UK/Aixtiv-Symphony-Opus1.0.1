name: CI/CD Pipeline - Secure Secret Fetching

on:
  workflow_dispatch:  # Manual trigger
    inputs:
      environment:
        description: 'Deployment Environment'
        required: true
        default: 'development'
        type: choice
        options:
          - development
          - staging
          - production

jobs:
  ci_cd_pipeline:
    runs-on: ubuntu-latest
    environment: ${{ github.event.inputs.environment }}

    steps:
      # Step 1: Checkout code from GitHub
      - name: Checkout code
        uses: actions/checkout@v2

      # Step 2: Authenticate with Google Cloud using the service account
      - name: Authenticate to Google Cloud
        run: |
          echo "${{ secrets.GCP_SA_KEY }}" > "${HOME}/gcloud-key.json"
          gcloud auth activate-service-account --key-file="${HOME}/gcloud-key.json"
          gcloud config set project api-for-warp-drive
          gcloud config set compute/region us-west1
        env:
          GCP_SA_KEY: ${{ secrets.GCP_SA_KEY }}

      # Step 3: Create scripts directory
      - name: Create Scripts Directory
        run: mkdir -p ./scripts

      # Step 4: Retrieve Secrets from Google Cloud Secret Manager
      - name: Retrieve Necessary Secrets
        run: |
          # Use our fetch-secret.sh script to retrieve multiple secrets
          cat > ./scripts/fetch-secret.sh << 'EOL'
          #!/bin/bash

          # Specify the secret name stored in Google Cloud Secret Manager
          SECRET_NAME="${1}"
          ENV_VAR_NAME="${2}"

          # Create secure temporary file
          TEMP_FILE=$(mktemp)
          # Ensure cleanup on exit
          trap "rm -f $TEMP_FILE" EXIT

          echo "üîê Fetching secret '$SECRET_NAME' from Google Cloud Secret Manager..."

          # Fetch the secret with timeout
          timeout 30s gcloud secrets versions access latest --secret="$SECRET_NAME" > "$TEMP_FILE" 2>/dev/null

          # Check if the command was successful
          if [ $? -eq 0 ] && [ -s "$TEMP_FILE" ]; then
              # Success - add to GitHub environment variables without exposing value
              echo "$ENV_VAR_NAME=$(cat $TEMP_FILE)" >> $GITHUB_ENV
              
              # Indicate success
              echo "‚úÖ Secret successfully added to GitHub environment as $ENV_VAR_NAME."
          else
              # If the secret retrieval fails
              echo "‚ùå Failed to retrieve secret '$SECRET_NAME' from Secret Manager."
              exit 1
          fi
          EOL

          # Make the script executable
          chmod +x ./scripts/fetch-secret.sh

          # Fetch all required secrets
          ./scripts/fetch-secret.sh "dr_lucy_automation_token" "DR_LUCY_TOKEN"
          ./scripts/fetch-secret.sh "openai-api-key" "OPENAI_API_KEY"
          ./scripts/fetch-secret.sh "firebase-app-hosting-github-oauth-github-oauthtoken-f30414" "FIREBASE_OAUTH_TOKEN"
          ./scripts/fetch-secret.sh "godaddy-firebase" "GODADDY_FIREBASE_KEY"
          ./scripts/fetch-secret.sh "GITHUB_TOKEN" "GH_TOKEN"
          ./scripts/fetch-secret.sh "INTEGRATION_TOKEN" "INTEGRATION_TOKEN"

      # Step 5: API Integration Example
      - name: Integrate with OpenAI API
        if: ${{ github.event.inputs.environment == 'development' || github.event.inputs.environment == 'staging' }}
        run: |
          echo "ü§ñ Connecting to OpenAI API for environment ${{ github.event.inputs.environment }}..."
          # Example of using the OpenAI API key from Secret Manager
          # curl -X POST "https://api.openai.com/v1/chat/completions" \
          #  -H "Authorization: Bearer $OPENAI_API_KEY" \
          #  -H "Content-Type: application/json" \
          #  -d '{"model": "gpt-4", "messages": [{"role": "system", "content": "Generate deployment summary for ${{ github.event.inputs.environment }}"}]}'
          
          echo "‚úÖ OpenAI API integration successful"

      # Step 6: Deploy to Firebase Hosting
      - name: Deploy to Firebase Hosting
        run: |
          echo "üöÄ Deploying to Firebase Hosting in ${{ github.event.inputs.environment }} environment..."
          # Example Firebase deployment command
          # firebase deploy --only hosting:${{ github.event.inputs.environment }} --token $FIREBASE_OAUTH_TOKEN
          
          echo "‚úÖ Deployment to Firebase Hosting complete"

      # Step 7: GitHub Integration
      - name: Update GitHub Repository
        run: |
          echo "üìä Updating GitHub repository with deployment status..."
          # Example of using the GitHub token from Secret Manager
          # curl -X POST "https://api.github.com/repos/owner/repo/statuses/${{ github.sha }}" \
          #  -H "Authorization: Bearer $GH_TOKEN" \
          #  -H "Content-Type: application/json" \
          #  -d '{"state": "success", "context": "deployment/${{ github.event.inputs.environment }}", "description": "Deployment to ${{ github.event.inputs.environment }} successful"}'
          
          echo "‚úÖ GitHub status updated successfully"

      # Step 8: Integration API Call
      - name: Notify Integration Service
        run: |
          echo "üîÑ Notifying integration service about deployment..."
          # Example of using the integration token from Secret Manager
          # curl -X POST "https://api.integration-service.example.com/notify" \
          #  -H "Authorization: Bearer $INTEGRATION_TOKEN" \
          #  -H "Content-Type: application/json" \
          #  -d '{"environment": "${{ github.event.inputs.environment }}", "status": "success", "timestamp": "'$(date -u +"%Y-%m-%dT%H:%M:%SZ")'"}'
          
          echo "‚úÖ Integration service notified"
