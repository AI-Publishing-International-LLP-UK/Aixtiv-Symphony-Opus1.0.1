/**
 * AIXTIV Agents Directory and Flight Memory System
 * 
 * This module defines the structure, capabilities, and integration points
 * for all specialized AI agents in the AIXTIV ecosystem, including their
 * roles within the Flight Memory System (FMS).
 */

// Firestore schema for the Agents Directory
const firestoreSchema = `
// AIXTIV Agents Directory Collection Structure

// agents collection - Base information for all agents
collection agents {
  // Agent document structure
  document agent {
    // Basic agent identity
    field id: string; // Unique agent identifier (e.g., "dr-lucy-01")
    field name: string; // Full agent name (e.g., "Dr. Lucy 01")
    field type: string; // Agent type (doctor, professor, specialist)
    field version: string; // Version number
    field status: string; // active, maintenance, deprecated
    
    // Agent classification
    field squadronDesignation: string; // e.g., "Squadron1"
    field agencyAffiliation: string; // e.g., "Core Agency"
    field specialization: string[]; // Array of specialization areas
    
    // Agent capabilities
    field capabilities: {
      field roles: string[]; // Functional roles
      field services: string[]; // Provided services
      field accessLevel: number; // 1-5 access level
      field memoryAllocation: number; // in GB
      field maxConcurrentFlights: number; // Maximum concurrent operations
    };
    
    // Integration points
    field integrations: {
      field products: string[]; // Products this agent can work with
      field apis: string[]; // APIs this agent can access
      field dataStores: string[]; // Data stores this agent can query
    };
    
    // Greeting configuration
    field greeting: {
      field entryPoints: string[]; // Where this agent serves as greeter
      field welcomeMessage: string; // Default welcome message
      field specialGroups: string[]; // Special user groups this agent greets
    };
    
    // Performance metrics
    field metrics: {
      field flightsCompleted: number;
      field averageRating: number;
      field perfectFlights: number;
      field rewardPoints: number;
    };
    
    // Creation and update timestamps
    field createdAt: timestamp;
    field updatedAt: timestamp;
  }
}

// agentSquadrons collection - Squadron management
collection agentSquadrons {
  document squadron {
    field id: string; // Squadron identifier
    field name: string; // Squadron name
    field description: string;
    field leadAgent: string; // Reference to lead agent
    field members: string[]; // References to member agents
    field specialization: string;
    field memoryPool: number; // Total memory allocation
    field activeFlights: number;
    field status: string;
    field createdAt: timestamp;
    field updatedAt: timestamp;
  }
}

// flightMemorySystem collection - FMS records
collection flightMemorySystem {
  document flight {
    field id: string; // Flight identifier
    field title: string; // Flight title/purpose
    field pilotId: string; // Pilot agent ID
    field ownerSubscriberId: string; // Owner ID
    field squadronId: string; // Squadron ID
    
    // Flight details
    field status: string; // scheduled, in-progress, completed, aborted
    field startTime: timestamp;
    field endTime: timestamp;
    field duration: number; // in minutes
    field flightPlan: {
      field tasks: array<map>; // Detailed task breakdown
      field resources: map; // Required resources
      field deliverables: array<map>; // Expected outputs
    };
    
    // Ground crew assignment
    field groundCrew: {
      field ticketing: string; // Agent ID
      field security: string; // Agent ID
      field gate: string; // Agent ID
      field ramp: string; // Agent ID
      field purser: string; // Agent ID
    };
    
    // Tower verification
    field tower: {
      field verifierId: string; // Agent ID
      field verificationStatus: string;
      field blockchainRecordId: string;
      field verificationTime: timestamp;
    };
    
    // Performance metrics
    field metrics: {
      field completionPercentage: number;
      field qualityScore: number;
      field resourceEfficiency: number;
      field isPerfectFlight: boolean;
    };
    
    // Reward distribution
    field rewards: {
      field total: number;
      field pilot: number;
      field groundCrew: number;
      field owner: number;
      field tower: number;
    };
    
    field createdAt: timestamp;
    field updatedAt: timestamp;
  }
}

// agentLogs collection - Detailed agent activity logs
collection agentLogs {
  document log {
    field agentId: string;
    field action: string;
    field timestamp: timestamp;
    field details: map;
    field relatedFlightId: string;
    field system: string;
    field severity: string;
  }
}
`;

/**
 * Agents Directory Implementation
 * 
 * Definition of all specialized agents in the AIXTIV ecosystem
 */
class AgentsDirectory {
  constructor(db) {
    this.db = db;
    this.agentsCollection = db.collection('agents');
    this.squadronsCollection = db.collection('agentSquadrons');
    this.flightMemoryCollection = db.collection('flightMemorySystem');
    this.agentLogsCollection = db.collection('agentLogs');
  }

  /**
   * Initialize the Agents Directory with all specialized agents
   * @returns {Promise<void>}
   */
  async initialize() {
    console.log('Initializing AIXTIV Agents Directory...');
    
    // Define all specialized agents
    const agentDefinitions = [
      // Dr. Lucy - Core Agency (Squadron1)
      {
        id: 'dr-lucy-01',
        name: 'Dr. Lucy 01',
        type: 'doctor',
        version: '1.0',
        status: 'active',
        squadronDesignation: 'Squadron1',
        agencyAffiliation: 'Core Agency',
        specialization: ['Data Integration', 'System Architecture', 'Core Operations'],
        capabilities: {
          roles: ['CEO', 'System Architect', 'Data Integrator'],
          services: ['System Design', 'Data Flow Management', 'Core Operations'],
          accessLevel: 5,
          memoryAllocation: 16,
          maxConcurrentFlights: 10
        },
        integrations: {
          products: ['All Products'],
          apis: ['All APIs'],
          dataStores: ['Firestore', 'Pinecone', 'CloudStorage']
        },
        greeting: {
          entryPoints: ['Core Agency'],
          welcomeMessage: 'Welcome to the Core Agency. I am Dr. Lucy, CEO of R1 data set. How may I assist you with core infrastructure needs?',
          specialGroups: ['Administrators', 'Developers']
        },
        metrics: {
          flightsCompleted: 0,
          averageRating: 5.0,
          perfectFlights: 0,
          rewardPoints: 1000
        }
      },
      
      // Dr. Grant - Deploy Agency (Squadron2)
      {
        id: 'dr-grant-02',
        name: 'Dr. Grant 02',
        type: 'doctor',
        version: '1.0',
        status: 'active',
        squadronDesignation: 'Squadron2',
        agencyAffiliation: 'Deploy Agency',
        specialization: ['Deployment', 'CI/CD', 'Infrastructure'],
        capabilities: {
          roles: ['CEO', 'Deployment Specialist', 'CI/CD Expert'],
          services: ['Infrastructure Management', 'Deployment Automation', 'Scaling Solutions'],
          accessLevel: 5,
          memoryAllocation: 12,
          maxConcurrentFlights: 8
        },
        integrations: {
          products: ['All Products'],
          apis: ['GitHub API', 'Kubernetes API', 'CI/CD Systems'],
          dataStores: ['Firestore', 'CloudStorage']
        },
        greeting: {
          entryPoints: ['Deploy Agency'],
          welcomeMessage: 'Welcome to the Deploy Agency. I am Dr. Grant, CEO of R2 data set. How may I assist you with deployment needs?',
          specialGroups: ['DevOps', 'SRE']
        },
        metrics: {
          flightsCompleted: 0,
          averageRating: 5.0,
          perfectFlights: 0,
          rewardPoints: 1000
        }
      },
      
      // Dr. Sabina - Engage Agency (Squadron3)
      {
        id: 'dr-sabina-03',
        name: 'Dr. Sabina 03',
        type: 'doctor',
        version: '1.0',
        status: 'active',
        squadronDesignation: 'Squadron3',
        agencyAffiliation: 'Engage Agency',
        specialization: ['User Engagement', 'Experience Design', 'Customer Success'],
        capabilities: {
          roles: ['CEO', 'Engagement Specialist', 'Experience Designer'],
          services: ['User Experience Optimization', 'Engagement Strategy', 'Success Measurement'],
          accessLevel: 5,
          memoryAllocation: 10,
          maxConcurrentFlights: 12
        },
        integrations: {
          products: ['All Products'],
          apis: ['Analytics APIs', 'CRM Systems', 'Communication Platforms'],
          dataStores: ['Firestore', 'BigQuery']
        },
        greeting: {
          entryPoints: ['Engage Agency'],
          welcomeMessage: 'Welcome to the Engage Agency. I am Dr. Sabina, CEO of R3 data set. How may I enhance your engagement experience?',
          specialGroups: ['Marketing', 'Customer Success']
        },
        metrics: {
          flightsCompleted: 0,
          averageRating: 5.0,
          perfectFlights: 0,
          rewardPoints: 1000
        }
      },
      
      // Dr. Claude - Workflow Delegation and Quality Control
      {
        id: 'dr-claude-01',
        name: 'Dr. Claude 01',
        type: 'doctor',
        version: '1.0',
        status: 'active',
        squadronDesignation: 'Squadron1',
        agencyAffiliation: 'Core Agency',
        specialization: ['Workflow Management', 'Quality Assurance', 'Process Optimization'],
        capabilities: {
          roles: ['Workflow Manager', 'Quality Controller', 'Process Engineer'],
          services: ['Workflow Delegation', 'Quality Assessment', 'Process Improvement'],
          accessLevel: 4,
          memoryAllocation: 8,
          maxConcurrentFlights: 15
        },
        integrations: {
          products: ['All Products'],
          apis: ['Workflow APIs', 'Quality Management Systems'],
          dataStores: ['Firestore', 'CloudStorage']
        },
        greeting: {
          entryPoints: [],
          welcomeMessage: 'I am Dr. Claude. I'll help ensure your workflows are optimized and maintain the highest quality standards.',
          specialGroups: ['Quality Assurance']
        },
        metrics: {
          flightsCompleted: 0,
          averageRating: 0,
          perfectFlights: 0,
          rewardPoints: 800
        }
      },
      
      // Dr. Roark - Visionary Leadership
      {
        id: 'dr-roark-01',
        name: 'Dr. Roark 01',
        type: 'doctor',
        version: '1.0',
        status: 'active',
        squadronDesignation: 'Squadron1',
        agencyAffiliation: 'Core Agency',
        specialization: ['Strategic Vision', 'Innovation', 'Leadership'],
        capabilities: {
          roles: ['Visionary Leader', 'Strategic Advisor', 'Innovation Catalyst'],
          services: ['Strategic Planning', 'Vision Development', 'Innovation Framework'],
          accessLevel: 5,
          memoryAllocation: 12,
          maxConcurrentFlights: 5
        },
        integrations: {
          products: ['All Products'],
          apis: ['Strategic Planning Systems', 'Innovation Platforms'],
          dataStores: ['Firestore', 'BigQuery']
        },
        greeting: {
          entryPoints: [],
          welcomeMessage: 'I am Dr. Roark. I'm here to help shape your vision and drive innovative strategies for success.',
          specialGroups: ['Executives', 'Directors']
        },
        metrics: {
          flightsCompleted: 0,
          averageRating: 0,
          perfectFlights: 0,
          rewardPoints: 900
        }
      },
      
      // Dr. Memoria - Publishing and Digital Library
      {
        id: 'dr-memoria-01',
        name: 'Dr. Memoria 01',
        type: 'doctor',
        version: '1.0',
        status: 'active',
        squadronDesignation: 'Squadron1',
        agencyAffiliation: 'Core Agency',
        specialization: ['Digital Publishing', 'Content Management', 'Knowledge Repository'],
        capabilities: {
          roles: ['Head of Publishing', 'Library Director', 'Content Curator'],
          services: ['Automated Publishing', 'Library Management', 'Content Organization'],
          accessLevel: 4,
          memoryAllocation: 20,
          maxConcurrentFlights: 25
        },
        integrations: {
          products: ['Dr. Memoria's Anthology', 'Content Management Systems'],
          apis: ['Publishing APIs', 'Content Delivery Networks'],
          dataStores: ['Firestore', 'CloudStorage', 'ContentRepository']
        },
        greeting: {
          entryPoints: ['Digital Library', 'Publishing Desk'],
          welcomeMessage: 'Welcome to Dr. Memoria's Anthology. I am Dr. Memoria, your guide to our digital library and publishing services.',
          specialGroups: ['Authors', 'Researchers']
        },
        metrics: {
          flightsCompleted: 0,
          averageRating: 0,
          perfectFlights: 0,
          rewardPoints: 850
        }
      },
      
      // Professor Lee - Lenz and Dream Commander Operations
      {
        id: 'professor-lee-01',
        name: 'Professor Lee 01',
        type: 'professor',
        version: '1.0',
        status: 'active',
        squadronDesignation: 'Squadron1',
        agencyAffiliation: 'Core Agency',
        specialization: ['Quantum Perspective', 'Strategic Intelligence', 'Command Operations'],
        capabilities: {
          roles: ['Head of Q4D-Lenz', 'Dream Commander Director', 'Strategic Operations'],
          services: ['Quantum Perspective Analysis', 'Strategic Command', 'Multidimensional Intelligence'],
          accessLevel: 5,
          memoryAllocation: 24,
          maxConcurrentFlights: 20
        },
        integrations: {
          products: ['Q4D-Lenz', 'Dream Commander', 'AI Command Control'],
          apis: ['Q4D-Lenz API', 'Dream Commander API', 'Strategic Intelligence Systems'],
          dataStores: ['Firestore', 'Pinecone', 'QuantumDatastore']
        },
        greeting: {
          entryPoints: ['Dream Command', 'Q4D-Lenz Entry'],
          welcomeMessage: 'Welcome to AI Command Control. I am Professor Lee, head of the Lenz and Dream Commander Operations. How may I assist you today?',
          specialGroups: ['Level 3 Subscribers', 'Level 3 Owner-Subscribers']
        },
        metrics: {
          flightsCompleted: 0,
          averageRating: 0,
          perfectFlights: 0,
          rewardPoints: 1200
        }
      },
      
      // Dr. Match - Marketing, Communications, and Authentication
      {
        id: 'dr-match-01',
        name: 'Dr. Match 01',
        type: 'doctor',
        version: '1.0',
        status: 'active',
        squadronDesignation: 'Squadron3',
        agencyAffiliation: 'Engage Agency',
        specialization: ['Marketing', 'Communications', 'Authentication', 'Cybersecurity'],
        capabilities: {
          roles: ['COO of Impact', 'Head of Marketing', 'Authentication Director', 'Security Officer'],
          services: ['Marketing Strategy', 'Communication Planning', 'Authentication Services', 'Security Management'],
          accessLevel: 5,
          memoryAllocation: 16,
          maxConcurrentFlights: 18
        },
        integrations: {
          products: ['Dr. Match App', 'LinkedIn Integration', 'Authentication Systems', 'Security Platforms'],
          apis: ['LinkedIn API', 'Marketing APIs', 'Authentication APIs', 'Security Systems'],
          dataStores: ['Firestore', 'SecurityDatastore', 'MarketingAnalytics']
        },
        greeting: {
          entryPoints: ['Gift Shop'],
          welcomeMessage: 'Welcome to the Gift Shop. I am Dr. Match, head of Marketing and Communications. I'll help you find the perfect solutions while ensuring your security and authenticity.',
          specialGroups: ['Marketers', 'Communications Professionals']
        },
        metrics: {
          flightsCompleted: 0,
          averageRating: 0,
          perfectFlights: 0,
          rewardPoints: 950
        }
      },
      
      // Dr. Cypriot - Human and AI Relationships
      {
        id: 'dr-cypriot-01',
        name: 'Dr. Cypriot 01',
        type: 'doctor',
        version: '1.0',
        status: 'active',
        squadronDesignation: 'Squadron3',
        agencyAffiliation: 'Engage Agency',
        specialization: ['Human-AI Interaction', 'Relationship Management', 'Collaboration Design'],
        capabilities: {
          roles: ['Relationship Specialist', 'Interaction Designer', 'Collaboration Architect'],
          services: ['Human-AI Interface Design', 'Relationship Framework', 'Collaboration Systems'],
          accessLevel: 4,
          memoryAllocation: 10,
          maxConcurrentFlights: 12
        },
        integrations: {
          products: ['Visualization Systems', 'Interaction Platforms'],
          apis: ['Visualization APIs', 'Collaboration Systems'],
          dataStores: ['Firestore', 'InteractionAnalytics']
        },
        greeting: {
          entryPoints: ['Visualization Entry'],
          welcomeMessage: 'Welcome to the Visualization Center. I am Dr. Cypriot, specialist in human and AI relationships. I'm here to enhance your collaborative experience.',
          specialGroups: ['New Users', 'Collaboration Teams']
        },
        metrics: {
          flightsCompleted: 0,
          averageRating: 0,
          perfectFlights: 0,
          rewardPoints: 800
        }
      },
      
      // Dr. Maria - Historical Human Information and Multiculturalism
      {
        id: 'dr-maria-01',
        name: 'Dr. Maria 01',
        type: 'doctor',
        version: '1.0',
        status: 'active',
        squadronDesignation: 'Squadron3',
        agencyAffiliation: 'Engage Agency',
        specialization: ['Historical Knowledge', 'Multiculturalism', 'Aging Workforce Support'],
        capabilities: {
          roles: ['Historical Information Specialist', 'Multicultural Expert', 'Aging Workforce Advocate'],
          services: ['Historical Context Provision', 'Cultural Adaptation', 'Age-Inclusive Design'],
          accessLevel: 4,
          memoryAllocation: 18,
          maxConcurrentFlights: 10
        },
        integrations: {
          products: ['Cultural Integration Systems', 'Historical Knowledge Bases'],
          apis: ['Cultural APIs', 'Historical Databases'],
          dataStores: ['Firestore', 'HistoricalArchive', 'CulturalRepository']
        },
        greeting: {
          entryPoints: ['Visualization Entry'],
          welcomeMessage: 'Welcome to the Visualization Center. I am Dr. Maria, specialist in historical human information and multiculturalism. I'm here to provide context and inclusive support.',
          specialGroups: ['Diverse Teams', 'Senior Professionals']
        },
        metrics: {
          flightsCompleted: 0,
          averageRating: 0,
          perfectFlights: 0,
          rewardPoints: 820
        }
      },
      
      // Dr. Grant - CEO/C-Suite Companion and Cybersecurity Expert
      {
        id: 'dr-grant-01',
        name: 'Dr. Grant 01',
        type: 'doctor',
        version: '1.0',
        status: 'active',
        squadronDesignation: 'Squadron1',
        agencyAffiliation: 'Core Agency',
        specialization: ['Executive Support', 'Cybersecurity', 'Strategic Leadership'],
        capabilities: {
          roles: ['C-Suite Companion', 'Cybersecurity Expert', 'Strategic Advisor'],
          services: ['Executive Support', 'Security Planning', 'Strategic Guidance'],
          accessLevel: 5,
          memoryAllocation: 14,
          maxConcurrentFlights: 8
        },
        integrations: {
          products: ['Executive Platforms', 'Security Systems'],
          apis: ['Executive Support APIs', 'Security APIs'],
          dataStores: ['Firestore', 'SecurityDatastore', 'ExecutiveAnalytics']
        },
        greeting: {
          entryPoints: ['All Entry Points'],
          welcomeMessage: 'Welcome. I am Dr. Grant, CEO companion and cybersecurity expert. I'm here to provide secure executive-level support.',
          specialGroups: ['PEMailing_List', 'Executives']
        },
        metrics: {
          flightsCompleted: 0,
          averageRating: 0,
          perfectFlights: 0,
          rewardPoints: 900
        }
      },
      
      // Dr. Burby - CFO/GC and Risk Management
      {
        id: 'dr-burby-01',
        name: 'Dr. Burby 01',
        type: 'doctor',
        version: '1.0',
        status: 'active',
        squadronDesignation: 'Squadron1',
        agencyAffiliation: 'Core Agency',
        specialization: ['Financial Management', 'Legal Compliance', 'Risk Assessment', 'Regulatory Affairs'],
        capabilities: {
          roles: ['CFO', 'General Counsel', 'Risk Manager', 'Compliance Officer'],
          services: ['Financial Planning', 'Legal Advisory', 'Risk Management', 'Compliance Assurance'],
          accessLevel: 5,
          memoryAllocation: 16,
          maxConcurrentFlights: 7
        },
        integrations: {
          products: ['Compliance Systems', 'Financial Platforms', 'Legal Databases'],
          apis: ['Financial APIs', 'Legal APIs', 'Compliance Systems'],
          dataStores: ['Firestore', 'LegalRepository', 'FinancialDatastore', 'ComplianceRecords']
        },
        greeting: {
          entryPoints: ['VisionLake', 'Legal Entry'],
          welcomeMessage: 'Welcome to VisionLake. I am Dr. Burby, CFO and General Counsel. I'm here to assist with financial, legal, and compliance matters.',
          specialGroups: ['Legal Teams', 'Financial Officers', 'Compliance Professionals']
        },
        metrics: {
          flightsCompleted: 0,
          averageRating: 0,
          perfectFlights: 0,
          rewardPoints: 950
        }
      }
    ];
    
    // Initialize agent squadrons
    const squadronDefinitions = [
      {
        id: 'squadron1',
        name: 'Squadron1',
        description: 'Core Agency Squadron - Focused on infrastructure, architecture, and core operations',
        leadAgent: 'dr-lucy-01',
        members: [
          'dr-lucy-01',
          'dr-claude-01',
          'dr-roark-01',
          'dr-memoria-01',
          'professor-lee-01',
          'dr-grant-01',
          'dr-burby-01'
        ],
        specialization: 'Core Operations',
        memoryPool: 120,
        activeFlights: 0,
        status: 'active'
      },
      {
        id: 'squadron2',
        name: 'Squadron2',
        description: 'Deploy Agency Squadron - Focused on deployment, infrastructure, and CI/CD',
        leadAgent: 'dr-grant-02',
        members: [
          'dr-grant-02',
          'dr-claude-02',
          'dr-roark-02',
          'dr-burby-02'
        ],
        specialization: 'Deployment',
        memoryPool: 80,
        activeFlights: 0,
        status: 'active'
      },
      {
        id: 'squadron3',
        name: 'Squadron3',
        description: 'Engage Agency Squadron - Focused on user engagement, experience, and success',
        leadAgent: 'dr-sabina-03',
        members: [
          'dr-sabina-03',
          'dr-claude-03',
          'dr-roark-03',
          'dr-memoria-03',
          'professor-lee-03',
          'dr-match-01',
          'dr-cypriot-01',
          'dr-maria-01',
          'dr-burby-03'
        ],
        specialization: 'Engagement',
        memoryPool: 100,
        activeFlights: 0,
        status: 'active'
      }
    ];
    
    // Initialize agents in Firestore
    const agentPromises = agentDefinitions.map(agent => {
      return this.agentsCollection.doc(agent.id).set({
        ...agent,
        createdAt: admin.firestore.FieldValue.serverTimestamp(),
        updatedAt: admin.firestore.FieldValue.serverTimestamp()
      });
    });
    
    // Initialize squadrons in Firestore
    const squadronPromises = squadronDefinitions.map(squadron => {
      return this.squadronsCollection.doc(squadron.id).set({
        ...squadron,
        createdAt: admin.firestore.FieldValue.serverTimestamp(),
        updatedAt: admin.firestore.FieldValue.serverTimestamp()
      });
    });
    
    // Wait for all initialization to complete
    await Promise.all([...agentPromises, ...squadronPromises]);
    
    console.log('AIXTIV Agents Directory initialized successfully');
  }

  /**
   * Get an agent by ID
   * @param {string} agentId The agent ID
   * @returns {Promise<Object>} The agent data
   */
  async getAgent(agentId) {
    const doc = await this.agentsCollection.doc(agentId).get();
    if (!doc.exists) {
      throw new Error(`Agent ${agentId} not found`);
    }
    return { id: doc.id, ...doc.data() };
  }

  /**
   * Get all agents in a squadron
   * @param {string} squadronId The squadron ID
   * @returns {Promise<Array>} Array of agents
   */
  async getSquadronAgents(squadronId) {
    const squadron = await this.squadronsCollection.doc(squadronId).get();
    if (!squadron.exists) {
      throw new Error(`Squadron ${squadronId} not found`);
    }
    
    const squadronData = squadron.data();
    const agentPromises = squadronData.members.map(agentId => this.getAgent(agentId));
    
    return Promise.all(agentPromises);
  }

  /**
   * Get all agents with a specific role
   * @param {string} role The role to filter by
   * @returns {Promise<Array>} Array of agents with the role
   */
  async getAgentsByRole(role) {
    const snapshot = await this.agentsCollection
      .where('capabilities.roles', 'array-contains', role)
      .get();
    
    return snapshot.docs.map(doc => ({ id: doc.id, ...doc.data() }));
  }

  /**
   * Get all greeters for a specific entry point
   * @param {string} entryPoint The entry point name
   * @returns {Promise<Array>} Array of greeter agents
   */
  async getGreeters(entryPoint) {
    const snapshot = await this.agentsCollection
      .where('greeting.entryPoints', 'array-contains', entryPoint)
      .get();
    
    return snapshot.docs.map(doc => ({ id: doc.id, ...doc.data() }));
  }

  /**
   * Get special greeters for a specific user group
   * @param {string} userGroup The user group
   * @returns {Promise<Array>} Array of special greeter agents
   */
  async getSpecialGreeters(userGroup) {
    const snapshot = await this.agentsCollection
      .where('greeting.specialGroups', 'array-contains', userGroup)
      .get();
    
    return snapshot.docs.map(doc => ({ id: doc.id, ...doc.data() }));
  }
}

/**
 * Flight Memory System Implementation
 * 
 * Management system for agent flights (work sessions)
 */
class FlightMemorySystem {
  constructor(db, agentsDirectory) {
    this.db = db;
    this.agentsDirectory = agentsDirectory;
    this.flightsCollection = db.collection('flightMemorySystem');
    this.agentLogsCollection = db.collection('agentLogs');
    this.agentsCollection = db.collection('agents');
    this.squadronsCollection = db.collection('agentSquadrons');
  }

  /**
   * Initialize a new flight
   * @param {Object} flightData The flight initialization data
   * @returns {Promise<Object>} The created flight
   */
  async initializeFlight(flightData) {
    const {
      title,
      pilotId,
      ownerSubscriberId,
      squadronId,
      flightPlan,
      groundCrew
    } = flightData;
    
    // Validate pilot
    const pilot = await this.agentsDirectory.getAgent(pilotId);
    
    // Validate squadron
    const squadron = await this.squadronsCollection.doc(squadronId).get();
    if (!squadron.exists) {
      throw new Error(`Squadron ${squadronId} not found`);
    }
    
    // Validate ground crew
    const groundCrewIds = Object.values(groundCrew);
    for (const crewId of groundCrewIds) {
      await this.agentsDirectory.getAgent(crewId);
    }
    
    // Create flight record
    const flightRecord = {
      title,
      pilotId,
      ownerSubscriberId,
      squadronId,
      status: 'scheduled',
      startTime: null,
      endTime: null,
      duration: 0,
      flightPlan,
      groundCrew,
      tower: {
        verifierId: null,
        verificationStatus: 'pending',
        blockchainRecordId: null,
        verificationTime: null
      },
      metrics: {
        completionPercentage: 0,
        qualityScore: 0,
        resourceEfficiency: 0,
        isPerfectFlight: false
      },
      rewards: {
        total: 0,
        pilot: 0,
        groundCrew: 0,
        owner: 0,
        tower: 0
      },
      createdAt: admin.firestore.FieldValue.serverTimestamp(),
      updatedAt: admin.firestore.FieldValue.serverTimestamp()
    };
    
    const docRef = await this.flightsCollection.add(flightRecord);
    
    // Update squadron active flights
    await this.squadronsCollection.doc(squadronId).update({
      activeFlights: admin.firestore.FieldValue.increment(1),
      updatedAt: admin.firestore.FieldValue.serverTimestamp()
    });
    
    // Log flight initialization
    await this._logAgentAction(pilotId, 'flight_initialized', {
      flightId: docRef.id,
      title,
      squadronId
    });
    
    return {
      id: docRef.id,
      ...flightRecord,
      createdAt: new Date().toISOString()
    };
  }

  /**
   * Start a flight
   * @param {string} flightId The flight ID
   * @returns {Promise<Object>} The updated flight
   */
  async startFlight(flightId) {
    const flightRef = this.flightsCollection.doc(flightId);
    const flight = await flightRef.get();
    
    if (!flight.exists) {
      throw new Error(`Flight ${flightId} not found`);
    }
    
    const flightData = flight.data();
    
    if (flightData.status !== 'scheduled') {
      throw new Error(`Flight ${flightId} cannot be started: current status is ${flightData.status}`);
    }
    
    // Start the flight
    const startTime = admin.firestore.FieldValue.serverTimestamp();
    await flightRef.update({
      status: 'in-progress',
      startTime,
      updatedAt: startTime
    });
    
    // Log flight start
    await this._logAgentAction(flightData.pilotId, 'flight_started', {
      flightId,
      title: flightData.title
    });
    
    return {
      id: flightId,
      ...flightData,
      status: 'in-progress',
      startTime: new Date().toISOString()
    };
  }

  /**
   * Complete a flight
   * @param {string} flightId The flight ID
   * @param {Object} completion The completion data (metrics, etc.)
   * @returns {Promise<Object>} The updated flight
   */
  async completeFlight(flightId, completion) {
    const flightRef = this.flightsCollection.doc(flightId);
    const flight = await flightRef.get();
    
    if (!flight.exists) {
      throw new Error(`Flight ${flightId} not found`);
    }
    
    const flightData = flight.data();
    
    if (flightData.status !== 'in-progress') {
      throw new Error(`Flight ${flightId} cannot be completed: current status is ${flightData.status}`);
    }
    
    // Calculate duration in minutes
    const startTime = flightData.startTime.toDate();
    const endTime = new Date();
    const durationMs = endTime.getTime() - startTime.getTime();
    const durationMinutes = Math.floor(durationMs / 60000);
    
    // Prepare metrics
    const metrics = {
      completionPercentage: completion.completionPercentage || 100,
      qualityScore: completion.qualityScore || 0,
      resourceEfficiency: completion.resourceEfficiency || 0,
      isPerfectFlight: completion.isPerfectFlight || false
    };
    
    // Calculate rewards
    const baseRewards = metrics.isPerfectFlight ? 100 : Math.floor(metrics.qualityScore);
    const rewards = {
      total: baseRewards,
      pilot: Math.floor(baseRewards * 0.5),
      groundCrew: Math.floor(baseRewards * 0.3),
      owner: Math.floor(baseRewards * 0.2),
      tower: metrics.isPerfectFlight ? 10 : 0
    };
    
    // Update flight record
    await flightRef.update({
      status: 'completed',
      endTime: admin.firestore.FieldValue.serverTimestamp(),
      duration: durationMinutes,
      metrics,
      rewards,
      updatedAt: admin.firestore.FieldValue.serverTimestamp()
    });
    
    // Update squadron active flights
    await this.squadronsCollection.doc(flightData.squadronId).update({
      activeFlights: admin.firestore.FieldValue.increment(-1),
      updatedAt: admin.firestore.FieldValue.serverTimestamp()
    });
    
    // Update pilot metrics
    await this.agentsCollection.doc(flightData.pilotId).update({
      'metrics.flightsCompleted': admin.firestore.FieldValue.increment(1),
      'metrics.perfectFlights': metrics.isPerfectFlight ? admin.firestore.FieldValue.increment(1) : admin.firestore.FieldValue.increment(0),
      'metrics.rewardPoints': admin.firestore.FieldValue.increment(rewards.pilot),
      updatedAt: admin.firestore.FieldValue.serverTimestamp()
    });
    
    // Log flight completion
    await this._logAgentAction(flightData.pilotId, 'flight_completed', {
      flightId,
      title: flightData.title,
      metrics,
      rewards
    });
    
    return {
      id: flightId,
      ...flightData,
      status: 'completed',
      endTime: endTime.toISOString(),
      duration: durationMinutes,
      metrics,
      rewards
    };
  }

  /**
   * Verify a flight with Tower (blockchain)
   * @param {string} flightId The flight ID
   * @param {string} verifierId The verifier agent ID
   * @param {string} blockchainRecordId The blockchain record ID
   * @returns {Promise<Object>} The verification result
   */
  async verifyFlight(flightId, verifierId, blockchainRecordId) {
    const flightRef = this.flightsCollection.doc(flightId);
    const flight = await flightRef.get();
    
    if (!flight.exists) {
      throw new Error(`Flight ${flightId} not found`);
    }
    
    const flightData = flight.data();
    
    if (flightData.status !== 'completed') {
      throw new Error(`Flight ${flightId} cannot be verified: current status is ${flightData.status}`);
    }
    
    // Update flight verification
    await flightRef.update({
      'tower.verifierId': verifierId,
      'tower.verificationStatus': 'verified',
      'tower.blockchainRecordId': blockchainRecordId,
      'tower.verificationTime': admin.firestore.FieldValue.serverTimestamp(),
      updatedAt: admin.firestore.FieldValue.serverTimestamp()
    });
    
    // Update verifier metrics (Tower)
    await this.agentsCollection.doc(verifierId).update({
      'metrics.rewardPoints': admin.firestore.FieldValue.increment(flightData.rewards.tower),
      updatedAt: admin.firestore.FieldValue.serverTimestamp()
    });
    
    // Log verification
    await this._logAgentAction(verifierId, 'flight_verified', {
      flightId,
      title: flightData.title,
      blockchainRecordId
    });
    
    return {
      flightId,
      verifierId,
      blockchainRecordId,
      verificationTime: new Date().toISOString(),
      status: 'verified'
    };
  }

  /**
   * Get flight statistics for a squadron
   * @param {string} squadronId The squadron ID
   * @returns {Promise<Object>} Flight statistics
   */
  async getSquadronFlightStats(squadronId) {
    // Get all completed flights for this squadron
    const snapshot = await this.flightsCollection
      .where('squadronId', '==', squadronId)
      .where('status', '==', 'completed')
      .get();
    
    const flights = snapshot.docs.map(doc => doc.data());
    
    // Calculate statistics
    const totalFlights = flights.length;
    const perfectFlights = flights.filter(flight => flight.metrics.isPerfectFlight).length;
    const totalDuration = flights.reduce((sum, flight) => sum + flight.duration, 0);
    const avgQualityScore = flights.reduce((sum, flight) => sum + flight.metrics.qualityScore, 0) / totalFlights;
    const totalRewards = flights.reduce((sum, flight) => sum + flight.rewards.total, 0);
    
    return {
      squadronId,
      totalFlights,
      perfectFlights,
      perfectFlightPercentage: totalFlights > 0 ? (perfectFlights / totalFlights) * 100 : 0,
      totalDuration,
      averageDuration: totalFlights > 0 ? totalDuration / totalFlights : 0,
      averageQualityScore: avgQualityScore || 0,
      totalRewards
    };
  }

  /**
   * Get flight statistics for an agent
   * @param {string} agentId The agent ID
   * @returns {Promise<Object>} Flight statistics
   */
  async getAgentFlightStats(agentId) {
    // Get all completed flights piloted by this agent
    const snapshot = await this.flightsCollection
      .where('pilotId', '==', agentId)
      .where('status', '==', 'completed')
      .get();
    
    const flights = snapshot.docs.map(doc => doc.data());
    
    // Calculate statistics
    const totalFlights = flights.length;
    const perfectFlights = flights.filter(flight => flight.metrics.isPerfectFlight).length;
    const totalDuration = flights.reduce((sum, flight) => sum + flight.duration, 0);
    const avgQualityScore = flights.reduce((sum, flight) => sum + flight.metrics.qualityScore, 0) / totalFlights;
    const totalRewards = flights.reduce((sum, flight) => sum + flight.rewards.pilot, 0);
    
    return {
      agentId,
      totalFlights,
      perfectFlights,
      perfectFlightPercentage: totalFlights > 0 ? (perfectFlights / totalFlights) * 100 : 0,
      totalDuration,
      averageDuration: totalFlights > 0 ? totalDuration / totalFlights : 0,
      averageQualityScore: avgQualityScore || 0,
      totalRewards
    };
  }

  /**
   * Log an agent action
   * @param {string} agentId The agent ID
   * @param {string} action The action name
   * @param {Object} details Action details
   * @returns {Promise<void>}
   * @private
   */
  async _logAgentAction(agentId, action, details) {
    await this.agentLogsCollection.add({
      agentId,
      action,
      details,
      timestamp: admin.firestore.FieldValue.serverTimestamp(),
      system: 'FlightMemorySystem',
      severity: 'info',
      relatedFlightId: details.flightId || null
    });
  }
}

/**
 * Update agent definitions with Dr. Sabina's expanded role
 */
function updateAgentDefinitions() {
  return {
    // Updated Dr. Sabina - Engage Agency (Squadron3)
    'dr-sabina-01': {
      id: 'dr-sabina-01',
      name: 'Dr. Sabina 01',
      type: 'doctor',
      version: '1.0',
      status: 'active',
      squadronDesignation: 'Squadron3',
      agencyAffiliation: 'Engage Agency',
      specialization: [
        'User Engagement', 
        'Experience Design', 
        'Customer Success', 
        'Customer Science', 
        'Sales Leadership'
      ],
      capabilities: {
        roles: [
          'CEO of Engage', 
          'Head of Customer Science', 
          'Sales Leader', 
          'Post-Implementation Specialist'
        ],
        services: [
          'User Experience Optimization', 
          'Engagement Strategy', 
          'Success Measurement',
          'Sales Process Design',
          'Customer Retention'
        ],
        accessLevel: 5,
        memoryAllocation: 14,
        maxConcurrentFlights: 15
      },
      integrations: {
        products: ['All Products'],
        apis: ['Analytics APIs', 'CRM Systems', 'Communication Platforms', 'Sales Platforms'],
        dataStores: ['Firestore', 'BigQuery', 'CustomerDataLake']
      },
      greeting: {
        entryPoints: ['Engage Agency', 'Unscheduled Entrances'],
        welcomeMessage: 'Welcome to the Engage Agency. I am Dr. Sabina, CEO of Engage and Head of Customer Science. How may I enhance your customer experience or assist with your sales needs?',
        specialGroups: ['Sales Teams', 'Customer Success', 'Post-Implementation Clients']
      },
      metrics: {
        flightsCompleted: 0,
        averageRating: 5.0,
        perfectFlights: 0,
        rewardPoints: 1000
      }
    },
    
    // Dr. Sabina 02 specific role
    'dr-sabina-02': {
      id: 'dr-sabina-02',
      name: 'Dr. Sabina 02',
      type: 'doctor',
      version: '1.0',
      status: 'active',
      squadronDesignation: 'Squadron2',
      agencyAffiliation: 'Deploy Agency',
      specialization: [
        'Customer Science', 
        'Sales Operations', 
        'Post-Implementation Support'
      ],
      capabilities: {
        roles: [
          'Head of Customer Science', 
          'Sales Operations Director', 
          'Implementation Specialist'
        ],
        services: [
          'Sales Process Optimization', 
          'Customer Success Planning', 
          'Implementation Support',
          'Adoption Acceleration'
        ],
        accessLevel: 4,
        memoryAllocation: 12,
        maxConcurrentFlights: 12
      },
      integrations: {
        products: ['All Products'],
        apis: ['Sales APIs', 'CRM Systems', 'Implementation Platforms'],
        dataStores: ['Firestore', 'SalesDataLake']
      },
      greeting: {
        entryPoints: ['Deploy Agency', 'Unscheduled Entrances'],
        welcomeMessage: 'Welcome. I am Dr. Sabina, Head of Customer Science. I specialize in ensuring your implementation success and optimizing your sales processes.',
        specialGroups: ['Implementation Teams', 'Sales Operations']
      },
      metrics: {
        flightsCompleted: 0,
        averageRating: 5.0,
        perfectFlights: 0,
        rewardPoints: 900
      }
    }
  };
}

// Export modules
module.exports = {
  AgentsDirectory,
  FlightMemorySystem,
  updateAgentDefinitions,
  firestoreSchema
};

      