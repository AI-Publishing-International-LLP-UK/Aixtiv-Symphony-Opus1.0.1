import React, { useState, useEffect } from 'react';
import { useAuth } from './use-auth-hook';
import { 
  useAgents, 
  useAgentSystemIntegration, 
  AgentType, 
  AgentAccessLevel,
  Agent,
  AgentCluster
} from './agent-auth-integration';
import { UserAuthLevel } from './user-auth-types';

// Dashboard layout component
export const AgentDashboard = () => {
  const { authState } = useAuth();
  const { availableAgents, availableClusters } = useAgents();
  const { 
    connectToEvaluationPipeline, 
    expandToGKE, 
    hasDreamCommanderAccess, 
    totalAgentCount 
  } = useAgentSystemIntegration();
  
  const [activeTab, setActiveTab] = useState<'overview' | 'agents' | 'clusters' | 'integrations'>('overview');
  const [connectionStatus, setConnectionStatus] = useState<'idle' | 'connecting' | 'connected' | 'failed'>('idle');
  const [gkeStatus, setGkeStatus] = useState<'idle' | 'deploying' | 'deployed' | 'failed'>('idle');
  
  // Check if user has limited access
  const hasLimitedAccess = !authState.user || authState.user.authLevel < UserAuthLevel.DR_GRANT;
  
  // Connect to evaluation pipeline
  const handleConnect = async () => {
    setConnectionStatus('connecting');
    const success = await connectToEvaluationPipeline();
    setConnectionStatus(success ? 'connected' : 'failed');
  };
  
  // Deploy to GKE
  const handleGKEDeploy = async () => {
    setGkeStatus('deploying');
    const success = await expandToGKE();
    setGkeStatus(success ? 'deployed' : 'failed');
  };
  
  return (
    <div className="min-h-screen bg-gray-50">
      {/* Header */}
      <header className="bg-white shadow">
        <div className="max-w-7xl mx-auto px-4 py-6 sm:px-6 lg:px-8 flex justify-between items-center">
          <h1 className="text-3xl font-bold text-gray-900">Agent Dashboard</h1>
          
          {/* User authentication status */}
          <div className="flex items-center space-x-4">
            {authState.user ? (
              <div className="flex items-center space-x-2">
                <div className="h-10 w-10 rounded-full bg-indigo-100 flex items-center justify-center">
                  <span className="font-medium text-indigo-700">
                    {authState.user.displayName?.charAt(0) || authState.user.email?.charAt(0) || 'U'}
                  </span>
                </div>
                <div>
                  <p className="text-sm font-medium text-gray-900">{authState.user.displayName || 'User'}</p>
                  <p className="text-xs text-gray-500">Access Level: {authState.user.authLevel.toFixed(2)}</p>
                </div>
              </div>
            ) : (
              <button className="px-4 py-2 bg-indigo-600 text-white rounded-md text-sm font-medium">
                Sign In
              </button>
            )}
          </div>
        </div>
      </header>
      
      {/* Main content */}
      <main className="max-w-7xl mx-auto px-4 py-6 sm:px-6 lg:px-8">
        {/* Tabs */}
        <div className="border-b border-gray-200 mb-6">
          <nav className="-mb-px flex space-x-8">
            <button
              onClick={() => setActiveTab('overview')}
              className={`${
                activeTab === 'overview'
                  ? 'border-indigo-500 text-indigo-600'
                  : 'border-transparent text-gray-500 hover:text-gray-700 hover:border-gray-300'
              } whitespace-nowrap py-4 px-1 border-b-2 font-medium text-sm`}
            >
              Overview
            </button>
            <button
              onClick={() => setActiveTab('agents')}
              className={`${
                activeTab === 'agents'
                  ? 'border-indigo-500 text-indigo-600'
                  : 'border-transparent text-gray-500 hover:text-gray-700 hover:border-gray-300'
              } whitespace-nowrap py-4 px-1 border-b-2 font-medium text-sm`}
            >
              Agents ({availableAgents.length})
            </button>
            <button
              onClick={() => setActiveTab('clusters')}
              className={`${
                activeTab === 'clusters'
                  ? 'border-indigo-500 text-indigo-600'
                  : 'border-transparent text-gray-500 hover:text-gray-700 hover:border-gray-300'
              } whitespace-nowrap py-4 px-1 border-b-2 font-medium text-sm`}
            >
              Clusters ({availableClusters.length})
            </button>
            <button
              onClick={() => setActiveTab('integrations')}
              className={`${
                activeTab === 'integrations'
                  ? 'border-indigo-500 text-indigo-600'
                  : 'border-transparent text-gray-500 hover:text-gray-700 hover:border-gray-300'
              } whitespace-nowrap py-4 px-1 border-b-2 font-medium text-sm`}
            >
              Integrations
            </button>
          </nav>
        </div>
        
        {/* Content based on active tab */}
        {activeTab === 'overview' && (
          <div>
            <div className="bg-white shadow rounded-lg mb-6">
              <div className="px-6 py-5 border-b border-gray-200">
                <h3 className="text-lg font-medium text-gray-900">Agent System Overview</h3>
              </div>
              <div className="px-6 py-5">
                <div className="grid grid-cols-1 md:grid-cols-3 gap-6">
                  <div className="bg-gray-50 p-4 rounded-md">
                    <p className="text-sm font-medium text-gray-500">Available Agents</p>
                    <p className="mt-1 text-3xl font-semibold text-gray-900">{availableAgents.length}</p>
                    {hasLimitedAccess && (
                      <p className="mt-1 text-xs text-indigo-600">
                        Upgrade your account to access {33 - availableAgents.length} more agents
                      </p>
                    )}
                  </div>
                  <div className="bg-gray-50 p-4 rounded-md">
                    <p className="text-sm font-medium text-gray-500">Available Clusters</p>
                    <p className="mt-1 text-3xl font-semibold text-gray-900">{availableClusters.length}</p>
                    {hasLimitedAccess && (
                      <p className="mt-1 text-xs text-indigo-600">
                        Upgrade your account to access more clusters
                      </p>
                    )}
                  </div>
                  <div className="bg-gray-50 p-4 rounded-md">
                    <p className="text-sm font-medium text-gray-500">Active Services</p>
                    <p className="mt-1 text-3xl font-semibold text-gray-900">
                      {connectionStatus === 'connected' ? '1' : '0'}/2
                    </p>
                    <p className="mt-1 text-xs text-gray-500">
                      {gkeStatus === 'deployed' ? 'GKE Deployed â€¢ ' : ''}
                      {connectionStatus === 'connected' ? 'Pipeline Connected' : ''}
                    </p>
                  </div>
                </div>
                
                {hasDreamCommanderAccess() && (
                  <div className="mt-6 bg-indigo-50 p-4 rounded-md flex items-center justify-between">
                    <div>
                      <p className="font-medium text-indigo-700">Dream Commander Active</p>
                      <p className="text-sm text-indigo-600">Your Dream Commander is fully operational and ready to orchestrate all agents.</p>
                    </div>
                    <button className="px-4 py-2 bg-indigo-600 text-white rounded-md text-sm font-medium">
                      Launch Dashboard
                    </button>
                  </div>
                )}
              </div>
            </div>
            
            {/* Quick access to top agents */}
            <div className="bg-white shadow rounded-lg">
              <div className="px-6 py-5 border-b border-gray-200">
                <h3 className="text-lg font-medium text-gray-900">Top Agents</h3>
              </div>
              <div className="px-6 py-5">
                <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
                  {availableAgents.slice(0, 6).map((agent) => (
                    <div key={agent.id} className="border rounded-lg p-4 hover:shadow-md transition-shadow">
                      <div className="flex items-center gap-4">
                        <div className="h-10 w-10 rounded-full bg-indigo-100 flex items-center justify-center shrink-0">
                          {agent.iconUrl ? (
                            <img src={agent.iconUrl} alt={agent.name} className="w-5 h-5" />
                          ) : (
                            <span className="text-indigo-600 font-bold">{agent.name.charAt(0)}</span>
                          )}
                        </div>
                        <div>
                          <h4 className="font-medium">{agent.name}</h4>
                          <p className="text-xs text-gray-500">{agent.type}</p>
                        </div>
                      </div>
                      <button className="mt-4 w-full px-3 py-1.5 bg-indigo-50 text-indigo-700 rounded-md text-sm font-medium hover:bg-indigo-100">
                        Activate
                      </button>
                    </div>
                  ))}
                </div>
                <div className="mt-6 text-center">
                  <button 
                    onClick={() => setActiveTab('agents')}
                    className="text-sm font-medium text-indigo-600 hover:text-indigo-500"
                  >
                    View all agents
                  </button>
                </div>
              </div>
            </div>
          </div>
        )}
        
        {activeTab === 'agents' && (
          <div className="bg-white shadow rounded-lg">
            <div className="px-6 py-5 border-b border-gray-200">
              <h3 className="text-lg font-medium text-gray-900">Available Agents</h3>
              <p className="mt-1 text-sm text-gray-500">
                You have access to {availableAgents.length} of 33 total agents.
              </p>
            </div>
            <div className="px-6 py-5">
              <AgentDirectory agents={availableAgents} />
              
              {hasLimitedAccess && (
                <div className="mt-6 bg-indigo-50 p-4 rounded-md">
                  <h4 className="font-medium text-indigo-700">Upgrade to Access More Agents</h4>
                  <p className="mt-1 text-sm text-indigo-600">
                    Unlock the full potential of Aixtiv Symphony with our premium AI agents.
                  </p>
                  <button className="mt-3 px-4 py-2 bg-indigo-600 text-white rounded-md text-sm font-medium">
                    Upgrade Now
                  </button>
                </div>
              )}
            </div>
          </div>
        )}
        
        {activeTab === 'clusters' && (
          <div className="bg-white shadow rounded-lg">
            <div className="px-6 py-5 border-b border-gray-200">
              <h3 className="text-lg font-medium text-gray-900">Agent Clusters</h3>
              <p className="mt-1 text-sm text-gray-500">
                Pre-configured agent groups for specific purposes.
              </p>
            </div>
            <div className="px-6 py-5">
              <ClusterDirectory clusters={availableClusters} />
            </div>
          </div>
        )}
        
        {activeTab === 'integrations' && (
          <div className="bg-white shadow rounded-lg">
            <div className="px-6 py-5 border-b border-gray-200">
              <h3 className="text-lg font-medium text-gray-900">Integration Services</h3>
              <p className="mt-1 text-sm text-gray-500">
                Connect your agents to external services.
              </p>
            </div>
            <div className="px-6 py-5">
              <div className="space-y-6">
                {/* Vertex AI Pipeline Integration */}
                <div className="border p-4 rounded-lg">
                  <div className="flex justify-between items-start">
                    <div>
                      <h4 className="font-medium">Vertex AI Evaluation Pipeline</h4>
                      <p className="text-sm text-gray-500 mt-1">
                        Connect your agents to the SuperClaudeX evaluation pipeline.
                      </p>
                      <div className="mt-2 flex space-x-2">
                        <span className="text-xs bg-gray-100 text-gray-700 px-2 py-1 rounded-full">
                          Project: 859242575175
                        </span>
                        <span className="text-xs bg-gray-100 text-gray-700 px-2 py-1 rounded-full">
                          Location: us-central1
                        </span>
                      </div>
                    </div>
                    <div className="flex items-center">
                      {connectionStatus === 'idle' && (
                        <button 
                          onClick={handleConnect}
                          className="px-4 py-2 bg-indigo-600 text-white rounded-md text-sm font-medium"
                        >
                          Connect
                        </button>
                      )}
                      {connectionStatus === 'connecting' && (
                        <div className="flex items-center space-x-2">
                          <svg className="animate-spin h-5 w-5 text-indigo-600" viewBox="0 0 24 24">
                            <circle
                              className="opacity-25"
                              cx="12"
                              cy="12"
                              r="10"
                              stroke="currentColor"
                              strokeWidth="4"
                            ></circle>
                            <path
                              className="opacity-75"
                              fill="currentColor"
                              d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"
                            ></path>
                          </svg>
                          <span className="text-sm text-gray-500">Connecting...</span>
                        </div>
                      )}
                      {connectionStatus === 'connected' && (
                        <div className="flex items-center space-x-2">
                          <svg className="h-5 w-5 text-green-500" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                            <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M5 13l4 4L19 7" />
                          </svg>
                          <span className="text-sm text-green-600">Connected</span>
                        </div>
                      )}
                      {connectionStatus === 'failed' && (
                        <div className="flex items-center space-x-2">
                          <svg className="h-5 w-5 text-red-500" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                            <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M6 18L18 6M6 6l12 12" />
                          </svg>
                          <span className="text-sm text-red-600">Connection Failed</span>
                          <button 
                            onClick={handleConnect}
                            className="px-3 py-1 bg-indigo-100 text-indigo-700 rounded-md text-xs font-medium ml-2"
                          >
                            Retry
                          </button>
                        </div>
                      )}
                    </div>
                  </div>
                </div>
                
                {/* GKE Integration */}
                <div className="border p-4 rounded-lg">
                  <div className="flex justify-between items-start">
                    <div>
                      <h4 className="font-medium">Google Kubernetes Engine Deployment</h4>
                      <p className="text-sm text-gray-500 mt-1">
                        Deploy your agents to GKE to scale up to 45 instances.
                      </p>
                      <div className="mt-2 flex space-x-2">
                        <span className="text-xs bg-gray-100 text-gray-700 px-2 py-1 rounded-full">
                          Cluster: agent-cluster-1
                        </span>
                        <span className="text-xs bg-gray-100 text-gray-700 px-2 py-1 rounded-full">
                          Zone: us-central1-a
                        </span>
                      </div>
                    </div>
                    <div className="flex items-center">
                      {gkeStatus === 'idle' && (
                        <button 
                          onClick={handleGKEDeploy}
                          className="px-4 py-2 bg-indigo-600 text-white rounded-md text-sm font-medium"
                          disabled={!authState.user || authState.user.authLevel < UserAuthLevel.DR_GRANT}
                        >
                          {!authState.user || authState.user.authLevel < UserAuthLevel.DR_GRANT 
                            ? 'Requires Dr. Grant' 
                            : 'Deploy'}
                        </button>
                      )}
                      {gkeStatus === 'deploying' && (
                        <div className="flex items-center space-x-2">
                          <svg className="animate-spin h-5 w-5 text-indigo-600" viewBox="0 0 24 24">
                            <circle
                              className="opacity-25"
                              cx="12"
                              cy="12"
                              r="10"
                              stroke="currentColor"
                              strokeWidth="4"
                            ></circle>
                            <path
                              className="opacity-75"
                              fill="currentColor"
                              d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"
                            ></path>
                          </svg>
                          <span className="text-sm text-gray-500">Deploying...</span>
                        </div>
                      )}
                      {gkeStatus === 'deployed' && (
                        <div className="flex items-center space-x-2">
                          <svg className="h-5 w-5 text-green-500" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                            <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M5 13l4 4L19 7" />
                          </svg>
                          <span className="text-sm text-green-600">Deployed</span>
                        </div>
                      )}
                      {gkeStatus === 'failed' && (
                        <div className="flex items-center space-x-2">
                          <svg className="h-5 w-5 text-red-500" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                            <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M6 18L18 6M6 6l12 12" />
                          </svg>
                          <span className="text-sm text-red-600">Deployment Failed</span>
                          <button 
                            onClick={handleGKEDeploy}
                            className="px-3 py-1 bg-indigo-100 text-indigo-700 rounded-md text-xs font-medium ml-2"
                          >
                            Retry
                          </button>
                        </div>
                      )}
                    </div>
                  </div>
                </div>
              </div>
            </div>
          </div>
        )}
      </main>
    </div>
  );
};

// Agent Directory Component
const AgentDirectory = ({ agents }: { agents: Agent[] }) => {
  const [searchQuery, setSearchQuery] = useState('');
  const [filterType, setFilterType] = useState<AgentType | 'all'>('all');
  
  // Filter agents based on search and type
  const filteredAgents = agents.filter(agent => {
    const matchesSearch = 
      searchQuery === '' || 
      agent.name.toLowerCase().includes(searchQuery.toLowerCase()) ||
      agent.description.toLowerCase().includes(searchQuery.toLowerCase());
    
    const matchesType = filterType === 'all' || agent.type === filterType;
    
    return matchesSearch && matchesType;
  });
  
  return (
    <div className="space-y-6">
      {/* Search and filter */}
      <div className="flex flex-col sm:flex-row space-y-4 sm:space-y-0 sm:space-x-4">
        <div className="relative flex-1">
          <div className="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
            <svg className="h-5 w-5 text-gray-400" viewBox="0 0 20 20" fill="currentColor">
              <path fillRule="evenodd" d="M8 4a4 4 0 100 8 4 4 0 000-8zM2 8a6 6 0 1110.89 3.476l4.817 4.817a1 1 0 01-1.414 1.414l-4.816-4.816A6 6 0 012 8z" clipRule="evenodd" />
            </svg>
          </div>
          <input
            type="text"
            placeholder="Search agents..."
            className="block w-full pl-10 pr-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm"
            value={searchQuery}
            onChange={(e) => setSearchQuery(e.target.value)}
          />
        </div>
        <select
          className="block w-full sm:w-48 pl-3 pr-10 py-2 text-base border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm"
          value={filterType}
          onChange={(e) => setFilterType(e.target.value as AgentType | 'all')}
        >
          <option value="all">All Types</option>
          <option value={AgentType.ANALYTICAL}>Analytical</option>
          <option value={AgentType.CREATIVE}>Creative</option>
          <option value={AgentType.OPERATIONAL}>Operational</option>
          <option value={AgentType.STRATEGIC}>Strategic</option>
          <option value={AgentType.SUPPORT}>Support</option>
        </select>
      </div>
      
      {/* Agent list */}
      {filteredAgents.length > 0 ? (
        <div className="grid grid-cols-1 gap-6">
          {filteredAgents.map(agent => (
            <div key={agent.id} className="border rounded-lg overflow-hidden">
              <div className="px-6 py-4">
                <div className="flex items-start sm:items-center flex-col sm:flex-row sm:justify-between">
                  <div className="flex items-center space-x-4">
                    <div className="w-12 h-12 rounded-full bg-indigo-100 flex items-center justify-center shrink-0">
                      {agent.iconUrl ? (
                        <img src={agent.iconUrl} alt={agent.name} className="w-6 h-6" />
                      ) : (
                        <span className="text-indigo-600 font-bold">{agent.name.charAt(0)}</span>
                      )}
                    </div>
                    <div>
                      <h3 className="text-lg font-medium text-gray-900">{agent.name}</h3>
                      <div className="flex items-center mt-1">
                        <span className="text-xs bg-indigo-100 text-indigo-800 px-2 py-1 rounded-full mr-2">
                          {agent.type}
                        </span>
                        <span className="text-xs bg-gray-100 text-gray-800 px-2 py-1 rounded-full">
                          {agent.accessLevel}
                        </span>
                      </div>
                    </div>
                  </div>
                  <div className="mt-4 sm:mt-0">
                    <button className="px-4 py-2 bg-indigo-600 text-white rounded-md text-sm font-medium">
                      Activate
                    </button>
                  </div>
                </div>
                <p className="mt-4 text-sm text-gray-500">{agent.description}</p>
                <div className="mt-4">
                  <h4 className="text-xs font-medium text-gray-700 uppercase tracking-wider">Capabilities</h4>
                  <div className="mt-2 flex flex-wrap gap-2">
                    {agent.capabilities.map(capability => (
                      <span key={capability} className="text-xs bg-gray-100 text-gray-800 px-2 py-1 rounded-full">
                        {capability.split('_').join(' ')}
                      </span>
                    ))}
                  </div>
                </div>
              </div>
            </div>
          ))}
        </div>
      ) : (
        <div className="text-center py-12 border rounded-lg">
          <svg className="mx-auto h-12 w-12 text-gray-400" fill="none" viewBox="0 0 24 24" stroke="currentColor">
            <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={1} d="M9.663 17h4.673M12 3v1m6.364 1.636l-.707.707M21 12h-1M4 12H3m3.343-5.657l-.707-.707m2.828 9.9a5 5 0 117.072 0l-.548.547A3.374 3.374 0 0014 18.469V19a2 2 0 11-4 0v-.531c0-.895-.356-1.754-.988-2.386l-.548-.547z" />
          </svg>
          <h3 className="mt-2 text-sm font-medium text-gray-900">No agents found</h3>
          <p className="mt-1 text-sm text-gray-500">
            Try adjusting your search or filter to find what you're looking for.
          </p>
        </div>
      )}
    </div>
  );
};

// Cluster Directory Component
const ClusterDirectory = ({ clusters }: { clusters: AgentCluster[] }) => {
  return (
    <div className="space-y-6">
      {clusters.map(cluster => (
        <div key={cluster.id} className="border rounded-lg overflow-hidden">
          <div className="px-6 py-4">
            <div className="flex items-start sm:items-center flex-col sm:flex-row sm:justify-between">
              <div>
                <h3 className="text-lg font-medium text-gray-900">{cluster.name}</h3>
                <div className="flex items-center mt-1">
                  <span className="text-xs bg-indigo-100 text-indigo-800 px-2 py-1 rounded-full mr-2">
                    {cluster.agents.length} Agents
                  </span>
                  <span className="text-xs bg-gray-100 text-gray-800 px-2 py-1 rounded-full">
                    {cluster.accessLevel}
                  </span>
                </div>
              </div>
              <div className="mt-4 sm:mt-0 flex space-x-3">
                <button className="px-4 py-2 border border-gray-300 text-gray-700 rounded-md text-sm font-medium">
                  View Details
                </button>
                <button className="px-4 py-2 bg-indigo-600 text-white rounded-md text-sm font-medium">
                  Activate Cluster
                </button>
              </div>
            </div>
            <p className="mt-4 text-sm text-gray-500">{cluster.description}</p>
            <div className="mt-4">
              <h4 className="text-xs font-medium text-gray-700 uppercase tracking-wider">Included Agents</h4>
              <div className="mt-2 flex flex-wrap gap-2">
                {cluster.agents.slice(0, 5).map(agent => (
                  <span key={agent.id} className="text-xs bg-gray-100 text-gray-800 px-2 py-1 rounded-full">
                    {agent.name}
                  </span>
                ))}
                {cluster.agents.length > 5 && (
                  <span className="text-xs bg-gray-100 text-gray-800 px-2 py-1 rounded-full">
                    +{cluster.agents.length - 5} more
                  </span>
                