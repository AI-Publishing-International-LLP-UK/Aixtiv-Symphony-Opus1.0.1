/**
 * Dream Commander Controller for API Integration
 * 
 * This controller handles the API endpoints for Dream Commander integration,
 * allowing for prompt generation, Co-Pilot coordination, and owner-subscriber interaction.
 */

const functions = require('firebase-functions');
const express = require('express');
const cors = require('cors');
const admin = require('firebase-admin');

// Initialize Firebase if not already initialized
if (!admin.apps.length) {
  admin.initializeApp();
}

const db = admin.firestore();

// Import utility functions
const {
  getDocumentById,
  updateDocument,
  createDocument,
  handleHttpError,
  createHttpError,
  authenticateUser,
  requireAdmin
} = require('./utils');

// Import Q4D-Lenz Agent Adapter
const { Q4DLenzAgentAdapter } = require('./agent-adapter');

// Initialize Express app
const app = express();
app.use(cors({ origin: true }));
app.use(express.json());

/**
 * Generate a prompt using Dream Commander
 * POST /api/dream-commander/prompts
 */
app.post('/prompts', authenticateUser, async (req, res) => {
  try {
    const { ownerSubscriberId, context, goals } = req.body;
    
    if (!ownerSubscriberId) {
      throw createHttpError('Owner-subscriber ID is required', 400);
    }
    
    // Get owner profile to validate
    const owner = await getDocumentById('ownerSubscribers', ownerSubscriberId);
    
    if (!owner) {
      throw createHttpError(`Owner-subscriber with ID ${ownerSubscriberId} not found`, 404);
    }
    
    // Generate the prompt
    const prompt = await generatePrompt(ownerSubscriberId, context, goals);
    
    // Store the prompt
    const promptData = {
      ownerSubscriberId,
      text: prompt,
      context: context || {},
      goals: goals || [],
      status: 'pending',
      interpreted: false,
      activities: [],
      createdAt: admin.firestore.FieldValue.serverTimestamp()
    };
    
    const promptId = await createDocument('dreamCommanderPrompts', null, promptData);
    
    // Return the prompt data
    res.status(201).json({
      promptId,
      ownerSubscriberId,
      prompt,
      status: 'pending'
    });
  } catch (error) {
    handleHttpError(error, res);
  }
});

/**
 * Get prompts for an owner-subscriber
 * GET /api/dream-commander/prompts/:ownerSubscriberId
 */
app.get('/prompts/:ownerSubscriberId', authenticateUser, async (req, res) => {
  try {
    const { ownerSubscriberId } = req.params;
    const { status, limit = 10 } = req.query;
    
    // Validate owner exists
    const owner = await getDocumentById('ownerSubscribers', ownerSubscriberId);
    
    if (!owner) {
      throw createHttpError(`Owner-subscriber with ID ${ownerSubscriberId} not found`, 404);
    }
    
    // Build query
    let query = db.collection('dreamCommanderPrompts')
      .where('ownerSubscriberId', '==', ownerSubscriberId)
      .orderBy('createdAt', 'desc')
      .limit(parseInt(limit));
    
    // Add status filter if provided
    if (status) {
      query = query.where('status', '==', status);
    }
    
    // Execute query
    const snapshot = await query.get();
    
    // Format results
    const prompts = snapshot.docs.map(doc => ({
      id: doc.id,
      ...doc.data(),
      createdAt: doc.data().createdAt ? doc.data().createdAt.toDate().toISOString() : null
    }));
    
    res.status(200).json({
      ownerSubscriberId,
      prompts,
      count: prompts.length
    });
  } catch (error) {
    handleHttpError(error, res);
  }
});

/**
 * Get a specific prompt
 * GET /api/dream-commander/prompts/:ownerSubscriberId/:promptId
 */
app.get('/prompts/:ownerSubscriberId/:promptId', authenticateUser, async (req, res) => {
  try {
    const { ownerSubscriberId, promptId } = req.params;
    
    // Get the prompt
    const prompt = await getDocumentById('dreamCommanderPrompts', promptId);
    
    if (!prompt) {
      throw createHttpError(`Prompt with ID ${promptId} not found`, 404);
    }
    
    // Validate owner
    if (prompt.ownerSubscriberId !== ownerSubscriberId) {
      throw createHttpError('Unauthorized access to prompt', 403);
    }
    
    // Format dates
    const formattedPrompt = {
      ...prompt,
      createdAt: prompt.createdAt ? prompt.createdAt.toDate().toISOString() : null,
      interpretedAt: prompt.interpretedAt ? prompt.interpretedAt.toDate().toISOString() : null
    };
    
    res.status(200).json(formattedPrompt);
  } catch (error) {
    handleHttpError(error, res);
  }
});

/**
 * Interpret a prompt with Q4D-Lenz
 * POST /api/dream-commander/prompts/:promptId/interpret
 */
app.post('/prompts/:promptId/interpret', authenticateUser, async (req, res) => {
  try {
    const { promptId } = req.params;
    const { agentId, lenzType } = req.body;
    
    // Validate prompt exists
    const prompt = await getDocumentById('dreamCommanderPrompts', promptId);
    
    if (!prompt) {
      throw createHttpError(`Prompt with ID ${promptId} not found`, 404);
    }
    
    // Check if already interpreted
    if (prompt.interpreted) {
      throw createHttpError(`Prompt with ID ${promptId} has already been interpreted`, 400);
    }
    
    // Initialize Q4D-Lenz Agent Adapter
    const agentAdapter = new Q4DLenzAgentAdapter({
      agentId: agentId || `agent-${Date.now()}`,
      ownerSubscriberId: prompt.ownerSubscriberId,
      lenzType: lenzType || 'professional'
    });
    
    // Initialize the agent
    await agentAdapter.initialize();
    
    // Interpret the prompt
    const interpretation = await agentAdapter.interpretPrompt(prompt);
    
    // Generate activities based on the interpretation
    const activities = await agentAdapter.generateActivities(interpretation.interpretationId);
    
    // Return the interpretation and activities
    res.status(200).json({
      promptId,
      interpretationId: interpretation.interpretationId,
      agentId: interpretation.agentId,
      activities: activities.map(activity => ({
        id: activity.id,
        title: activity.title,
        type: activity.type,
        status: activity.status
      })),
      interpretation: interpretation.interpretation
    });
  } catch (error) {
    handleHttpError(error, res);
  }
});

/**
 * Execute an activity
 * POST /api/dream-commander/activities/:activityId/execute
 */
app.post('/activities/:activityId/execute', authenticateUser, async (req, res) => {
  try {
    const { activityId } = req.params;
    const { agentId } = req.body;
    
    // Validate activity exists
    const activity = await getDocumentById('activities', activityId);
    
    if (!activity) {
      throw createHttpError(`Activity with ID ${activityId} not found`, 404);
    }
    
    // Initialize Q4D-Lenz Agent Adapter
    const agentAdapter = new Q4DLenzAgentAdapter({
      agentId: agentId || activity.agentId,
      ownerSubscriberId: activity.ownerSubscriberId,
      lenzType: 'professional' // Default to professional lens
    });
    
    // Execute the activity
    const executionResult = await agentAdapter.executeActivity(activityId);
    
    // Return the execution result
    res.status(200).json({
      activityId,
      deliverableId: executionResult.deliverableId,
      status: executionResult.status,
      content: executionResult.content.substring(0, 200) + '...' // Preview only
    });
  } catch (error) {
    handleHttpError(error, res);
  }
});

/**
 * Approve a deliverable (blockchain authorization)
 * POST /api/dream-commander/deliverables/:deliverableId/approve
 */
app.post('/deliverables/:deliverableId/approve', authenticateUser, async (req, res) => {
  try {
    const { deliverableId } = req.params;
    const { ownerSubscriberId, qrCodeData } = req.body;
    
    if (!ownerSubscriberId) {
      throw createHttpError('Owner-subscriber ID is required', 400);
    }
    
    // Validate deliverable exists
    const deliverable = await getDocumentById('deliverables', deliverableId);
    
    if (!deliverable) {
      throw createHttpError(`Deliverable with ID ${deliverableId} not found`, 404);
    }
    
    // Validate owner
    if (deliverable.ownerSubscriberId !== ownerSubscriberId) {
      throw createHttpError('Unauthorized approval attempt', 403);
    }
    
    // Simulate blockchain verification with QR code (in a real implementation, this would verify the QR code)
    // For now, we'll just update the status
    
    // Update deliverable status
    await updateDocument('deliverables', deliverableId, {
      status: 'authorized',
      authorized: true,
      authorizedAt: admin.firestore.FieldValue.serverTimestamp(),
      qrCodeData: qrCodeData || 'simulated_qr_data' // In a real implementation, this would be validated
    });
    
    // Return success
    res.status(200).json({
      deliverableId,
      status: 'authorized',
      timestamp: new Date().toISOString()
    });
  } catch (error) {
    handleHttpError(error, res);
  }
});

/**
 * Submit feedback for a deliverable
 * POST /api/dream-commander/deliverables/:deliverableId/feedback
 */
app.post('/deliverables/:deliverableId/feedback', authenticateUser, async (req, res) => {
  try {
    const { deliverableId } = req.params;
    const { ownerSubscriberId, feedback, rating } = req.body;
    
    if (!ownerSubscriberId || !feedback) {
      throw createHttpError('Owner-subscriber ID and feedback are required', 400);
    }
    
    // Validate deliverable exists
    const deliverable = await getDocumentById('deliverables', deliverableId);
    
    if (!deliverable) {
      throw createHttpError(`Deliverable with ID ${deliverableId} not found`, 404);
    }
    
    // Validate owner
    if (deliverable.ownerSubscriberId !== ownerSubscriberId) {
      throw createHttpError('Unauthorized feedback submission', 403);
    }
    
    // Initialize Q4D-Lenz Agent Adapter
    const agentAdapter = new Q4DLenzAgentAdapter({
      agentId: deliverable.agentId,
      ownerSubscriberId: ownerSubscriberId,
      lenzType: 'professional' // Default to professional lens
    });
    
    // Process feedback and learn
    const learningResult = await agentAdapter.learnFromFeedback(deliverableId, {
      text: feedback,
      rating: rating || null
    });
    
    // Return learning result
    res.status(200).json({
      deliverableId,
      feedbackId: learningResult.feedbackId,
      agentUpdated: learningResult.agentUpdated,
      insights: learningResult.insights ? {
        strengths: learningResult.insights.strengths,
        areasForImprovement: learningResult.insights.areasForImprovement,
        learningPriority: learningResult.insights.learningPriority
      } : null
    });
  } catch (error) {
    handleHttpError(error, res);
  }
});

/**
 * Get a deliverable
 * GET /api/dream-commander/deliverables/:deliverableId
 */
app.get('/deliverables/:deliverableId', authenticateUser, async (req, res) => {
  try {
    const { deliverableId } = req.params;
    
    // Get the deliverable
    const deliverable = await getDocumentById('deliverables', deliverableId);
    
    if (!deliverable) {
      throw createHttpError(`Deliverable with ID ${deliverableId} not found`, 404);
    }
    
    // Format dates
    const formattedDeliverable = {
      ...deliverable,
      createdAt: deliverable.createdAt ? deliverable.createdAt.toDate().toISOString() : null,
      authorizedAt: deliverable.authorizedAt ? deliverable.authorizedAt.toDate().toISOString() : null
    };
    
    res.status(200).json(formattedDeliverable);
  } catch (error) {
    handleHttpError(error, res);
  }
});

/**
 * Generate a prompt for Dream Commander
 * @param {string} ownerSubscriberId - ID of the owner-subscriber
 * @param {Object} context - Additional context
 * @param {Array} goals - Owner's goals
 * @returns {Promise<string>} - Generated prompt
 */
async function generatePrompt(ownerSubscriberId, context = {}, goals = []) {
  try {
    // Get owner profile
    const owner = await getDocumentById('ownerSubscribers', ownerSubscriberId);
    
    if (!owner) {
      throw new Error(`Owner-subscriber with ID ${ownerSubscriberId} not found`);
    }
    
    // In a real implementation, this would use an LLM to generate a personalized prompt
    // For now, we'll return a template-based prompt
    
    const promptTemplates = [
      "Based on your goal to ${goal}, what's your next strategic move?",
      "To make progress on ${goal}, consider these potential actions...",
      "Your recent work on ${goal} suggests you should focus on...",
      "The next milestone for advancing ${goal} could be...",
      "Looking at your professional trajectory, to achieve ${goal}, you might want to..."
    ];
    
    // Select a random template
    const templateIndex = Math.floor(Math.random() * promptTemplates.length);
    const template = promptTemplates[templateIndex];
    
    // Select a goal to focus on (either from the provided goals or the owner's profile)
    const availableGoals = goals.length > 0 ? goals : (owner.goals || ['professional growth']);
    const goalIndex = Math.floor(Math.random() * availableGoals.length);
    const selectedGoal = availableGoals[goalIndex];
    
    // Replace template variables
    const prompt = template.replace('${goal}', selectedGoal);
    
    return prompt;
  } catch (error) {
    console.error('Error generating prompt:', error);
    throw error;
  }
}

// Export the Dream Commander API
module.exports = functions.https.onRequest(app);