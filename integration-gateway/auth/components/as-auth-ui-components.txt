import { useState } from 'react';
import { useAuth } from './use-auth-hook';
import { AuthProvider, USER_TYPES, UserAuthLevel } from './user-auth-types';

// Login Form Component
export const LoginForm = () => {
  const { signInWithGoogle, signInWithOutlook, signInWithLinkedIn, signInWithEmail, authState } = useAuth();
  const [email, setEmail] = useState('');
  const [password, setPassword] = useState('');
  const [isEmailLogin, setIsEmailLogin] = useState(false);

  const handleEmailLogin = (e: React.FormEvent) => {
    e.preventDefault();
    signInWithEmail(email, password);
  };

  return (
    <div className="w-full max-w-md p-6 bg-white rounded-lg shadow-md">
      <h2 className="text-2xl font-bold mb-6 text-center">Login to Aixtiv Symphony</h2>
      
      {authState.error && (
        <div className="bg-red-100 border border-red-400 text-red-700 px-4 py-3 rounded mb-4">
          {authState.error}
        </div>
      )}

      {isEmailLogin ? (
        <form onSubmit={handleEmailLogin} className="space-y-4">
          <div>
            <label htmlFor="email" className="block text-sm font-medium text-gray-700">Email</label>
            <input
              id="email"
              type="email"
              value={email}
              onChange={(e) => setEmail(e.target.value)}
              className="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-500 focus:ring-indigo-500"
              required
            />
          </div>
          <div>
            <label htmlFor="password" className="block text-sm font-medium text-gray-700">Password</label>
            <input
              id="password"
              type="password"
              value={password}
              onChange={(e) => setPassword(e.target.value)}
              className="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-500 focus:ring-indigo-500"
              required
            />
          </div>
          <div>
            <button
              type="submit"
              className="w-full flex justify-center py-2 px-4 border border-transparent rounded-md shadow-sm text-sm font-medium text-white bg-indigo-600 hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500"
              disabled={authState.isLoading}
            >
              {authState.isLoading ? 'Logging in...' : 'Login with Email'}
            </button>
          </div>
          <div className="text-center mt-4">
            <button
              type="button"
              onClick={() => setIsEmailLogin(false)}
              className="text-sm text-indigo-600 hover:text-indigo-500"
            >
              Back to social login options
            </button>
          </div>
        </form>
      ) : (
        <div className="space-y-4">
          <button
            onClick={() => signInWithGoogle()}
            className="w-full flex items-center justify-center py-2 px-4 border border-gray-300 rounded-md shadow-sm bg-white hover:bg-gray-50"
            disabled={authState.isLoading}
          >
            <svg className="h-5 w-5 mr-2" viewBox="0 0 24 24">
              <path
                d="M12.545 12.151c0 .269-.023.537-.07.803h-5.38v-1.517h3.073a2.695 2.695 0 0 0-1.138-1.721v-1.428h2.326c1.376 1.247 2.189 3.089 2.189 5.863Zm-4.254 4.559c1.96 0 3.605-.642 4.807-1.74l-2.326-1.803c-.641.428-1.459.681-2.481.681-1.902 0-3.518-1.284-4.092-3.027h-2.4v1.862a7.331 7.331 0 0 0 6.492 4.027Z"
                fill="#34A853"
              />
              <path
                d="M8.291 15.104c-.151.453-.381.873-.673 1.239v.367h2.4a7.246 7.246 0 0 0 2.491-4.629H7.16a7.333 7.333 0 0 0 1.131 3.023Z"
                fill="#FBBC05"
              />
              <path
                d="M12.291 5.037a3.985 3.985 0 0 1 2.791 1.091v.001l2.058-2.058a7.12 7.12 0 0 0-4.849-1.85 7.333 7.333 0 0 0-6.492 4.027l2.4 1.862c.574-1.742 2.19-3.027 4.092-3.027Z"
                fill="#EA4335"
              />
              <path
                d="M12.291 5.037c-1.902 0-3.518 1.284-4.092 3.027l-2.4-1.862a7.333 7.333 0 0 1 6.492-4.027 7.12 7.12 0 0 1 4.849 1.85l-2.058 2.058a3.985 3.985 0 0 0-2.791-1.091v.045Z"
                fill="#EA4335"
              />
            </svg>
            Sign in with Google
          </button>
          
          <button
            onClick={() => signInWithOutlook()}
            className="w-full flex items-center justify-center py-2 px-4 border border-gray-300 rounded-md shadow-sm bg-white hover:bg-gray-50"
            disabled={authState.isLoading}
          >
            <svg className="h-5 w-5 mr-2" viewBox="0 0 24 24">
              <path
                d="M7.88 12.04q0 .45-.11.87-.1.41-.33.74-.22.33-.58.52-.37.2-.87.2t-.85-.2q-.35-.21-.57-.55-.22-.33-.33-.75-.1-.42-.1-.86t.1-.87q.1-.43.34-.76.22-.34.59-.54.36-.2.87-.2t.86.2q.35.21.57.55.22.34.31.77.1.43.1.88ZM24 12v9.38q0 .46-.33.8-.33.32-.8.32H7.13q-.46 0-.8-.33-.32-.33-.32-.8V18H1q-.41 0-.7-.3-.3-.29-.3-.7V7q0-.41.3-.7Q.58 6 1 6h6.5V2.55q0-.44.3-.75.3-.3.75-.3h12.9q.44 0 .75.3.3.3.3.75V10.85l1.24.72h.01q.1.07.18.18.07.12.07.25ZM12 2.55v6.2h2.55V2.55H12Zm0 13.9v6.2h2.55v-6.2H12Zm9.45-13.9v4.79l-.95-.55q-.18-.12-.4-.12h-.01q-.22 0-.4.12l-.95.55V2.55h2.71ZM20.1 18.1H8.25V21h11.85v-2.9Zm2.71 0V21h.79q.22 0 .38-.15.15-.15.15-.38v-2.37Z"
                fill="#0078D4"
              />
            </svg>
            Sign in with Outlook
          </button>
          
          <button
            onClick={() => signInWithLinkedIn()}
            className="w-full flex items-center justify-center py-2 px-4 border border-gray-300 rounded-md shadow-sm bg-white hover:bg-gray-50"
            disabled={authState.isLoading}
          >
            <svg className="h-5 w-5 mr-2" viewBox="0 0 24 24">
              <path
                d="M19 3a2 2 0 0 1 2 2v14a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2V5a2 2 0 0 1 2-2h14m-.5 15.5v-5.3a3.26 3.26 0 0 0-3.26-3.26c-.85 0-1.84.52-2.32 1.3v-1.11h-2.79v8.37h2.79v-4.93c0-.77.62-1.4 1.39-1.4a1.4 1.4 0 0 1 1.4 1.4v4.93h2.79M6.88 8.56a1.68 1.68 0 0 0 1.68-1.68c0-.93-.75-1.69-1.68-1.69a1.69 1.69 0 0 0-1.69 1.69c0 .93.76 1.68 1.69 1.68m1.39 9.94v-8.37H5.5v8.37h2.77z"
                fill="#0077B5"
              />
            </svg>
            Sign in with LinkedIn
          </button>
          
          <div className="mt-4 text-center">
            <button
              type="button"
              onClick={() => setIsEmailLogin(true)}
              className="text-sm text-indigo-600 hover:text-indigo-500"
            >
              Login with Email instead
            </button>
          </div>
        </div>
      )}
    </div>
  );
};

// Registration Form Component
export const RegistrationForm = () => {
  const { registerWithEmail, authState } = useAuth();
  const [email, setEmail] = useState('');
  const [password, setPassword] = useState('');
  const [confirmPassword, setConfirmPassword] = useState('');
  const [displayName, setDisplayName] = useState('');
  const [passwordError, setPasswordError] = useState('');

  const handleRegistration = (e: React.FormEvent) => {
    e.preventDefault();
    
    if (password !== confirmPassword) {
      setPasswordError('Passwords do not match');
      return;
    }
    
    if (password.length < 8) {
      setPasswordError('Password must be at least 8 characters long');
      return;
    }
    
    setPasswordError('');
    registerWithEmail(email, password, displayName);
  };

  return (
    <div className="w-full max-w-md p-6 bg-white rounded-lg shadow-md">
      <h2 className="text-2xl font-bold mb-6 text-center">Create Aixtiv Symphony Account</h2>
      
      {authState.error && (
        <div className="bg-red-100 border border-red-400 text-red-700 px-4 py-3 rounded mb-4">
          {authState.error}
        </div>
      )}

      <form onSubmit={handleRegistration} className="space-y-4">
        <div>
          <label htmlFor="displayName" className="block text-sm font-medium text-gray-700">Full Name</label>
          <input
            id="displayName"
            type="text"
            value={displayName}
            onChange={(e) => setDisplayName(e.target.value)}
            className="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-500 focus:ring-indigo-500"
            required
          />
        </div>
        
        <div>
          <label htmlFor="email" className="block text-sm font-medium text-gray-700">Email</label>
          <input
            id="email"
            type="email"
            value={email}
            onChange={(e) => setEmail(e.target.value)}
            className="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-500 focus:ring-indigo-500"
            required
          />
        </div>
        
        <div>
          <label htmlFor="password" className="block text-sm font-medium text-gray-700">Password</label>
          <input
            id="password"
            type="password"
            value={password}
            onChange={(e) => setPassword(e.target.value)}
            className="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-500 focus:ring-indigo-500"
            required
          />
        </div>
        
        <div>
          <label htmlFor="confirmPassword" className="block text-sm font-medium text-gray-700">Confirm Password</label>
          <input
            id="confirmPassword"
            type="password"
            value={confirmPassword}
            onChange={(e) => setConfirmPassword(e.target.value)}
            className="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-500 focus:ring-indigo-500"
            required
          />
          {passwordError && (
            <p className="mt-1 text-sm text-red-600">{passwordError}</p>
          )}
        </div>
        
        <div>
          <button
            type="submit"
            className="w-full flex justify-center py-2 px-4 border border-transparent rounded-md shadow-sm text-sm font-medium text-white bg-indigo-600 hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500"
            disabled={authState.isLoading}
          >
            {authState.isLoading ? 'Creating Account...' : 'Create Account'}
          </button>
        </div>
      </form>
    </div>
  );
};

// User Profile Component
export const UserProfile = () => {
  const { authState, signOut } = useAuth();
  const { user, userType } = authState;

  if (!user || !userType) {
    return <div>No user profile available</div>;
  }

  return (
    <div className="w-full max-w-md p-6 bg-white rounded-lg shadow-md">
      <div className="text-center mb-6">
        {user.photoURL ? (
          <img
            src={user.photoURL}
            alt={user.displayName || 'User'}
            className="h-24 w-24 rounded-full mx-auto"
          />
        ) : (
          <div className="h-24 w-24 rounded-full bg-indigo-100 flex items-center justify-center mx-auto">
            <span className="text-2xl font-medium text-indigo-700">
              {user.displayName?.charAt(0) || user.email?.charAt(0) || 'U'}
            </span>
          </div>
        )}
        <h2 className="mt-4 text-xl font-bold">{user.displayName || 'User'}</h2>
        <p className="text-gray-500">{user.email}</p>
      </div>

      <div className="border-t border-gray-200 pt-4">
        <div className="flex justify-between items-center mb-2">
          <span className="text-sm font-medium text-gray-500">Account Level</span>
          <span className="text-sm font-medium text-indigo-600">{userType.name}</span>
        </div>
        <div className="w-full bg-gray-200 rounded-full h-2.5">
          <div
            className="bg-indigo-600 h-2.5 rounded-full"
            style={{ width: `${(user.authLevel / UserAuthLevel.FULLY_REGISTERED) * 100}%` }}
          ></div>
        </div>
        <p className="mt-1 text-xs text-gray-500">Level {user.authLevel} out of {UserAuthLevel.FULLY_REGISTERED}</p>
      </div>

      <div className="mt-6 space-y-4">
        <div className="border-t border-gray-200 pt-4">
          <h3 className="text-lg font-medium">Your Privileges</h3>
          <ul className="mt-2 space-y-1">
            {userType.privileges.map((privilege, index) => (
              <li key={index} className="flex items-center text-sm">
                <svg className="h-4 w-4 text-green-500 mr-2" viewBox="0 0 20 20" fill="currentColor">
                  <path
                    fillRule="evenodd"
                    d="M16.707 5.293a1 1 0 010 1.414l-8 8a1 1 0 01-1.414 0l-4-4a1 1 0 011.414-1.414L8 12.586l7.293-7.293a1 1 0 011.414 0z"
                    clipRule="evenodd"
                  />
                </svg>
                {privilege.split('_').map(word => word.charAt(0).toUpperCase() + word.slice(1)).join(' ')}
              </li>
            ))}
          </ul>
        </div>

        {user.dreamCommanderId && (
          <div className="border-t border-gray-200 pt-4">
            <h3 className="text-lg font-medium">Dream Commander</h3>
            <p className="text-sm text-gray-600 mt-1">ID: {user.dreamCommanderId}</p>
            {user.culturalEmpathyCode && (
              <p className="text-sm text-gray-600">
                Cultural Empathy Code: {user.culturalEmpathyCode}
              </p>
            )}
          </div>
        )}

        <div className="border-t border-gray-200 pt-4">
          <button
            onClick={signOut}
            className="w-full flex justify-center py-2 px-4 border border-transparent rounded-md shadow-sm text-sm font-medium text-white bg-red-600 hover:bg-red-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-red-500"
          >
            Sign Out
          </button>
        </div>
      </div>
    </div>
  );
};

// User Type Upgrade Modal
export const UpgradeModal = ({ 
  isOpen, 
  onClose, 
  targetLevel 
}: { 
  isOpen: boolean; 
  onClose: () => void; 
  targetLevel: UserAuthLevel;
}) => {
  const { authState, upgradeToDrGrant, addPaymentMethodAndUpgrade, activateTrialPeriod, upgradeToFullyRegistered } = useAuth();
  const { user } = authState;
  
  const [paymentMethodId, setPaymentMethodId] = useState('');
  const [culturalEmpathyCode, setCulturalEmpathyCode] = useState('');

  if (!isOpen || !user) return null;

  const handleUpgrade = async () => {
    try {
      switch (targetLevel) {
        case UserAuthLevel.DR_GRANT:
          await upgradeToDrGrant(user.uid);
          break;
        case UserAuthLevel.PAYMENT_VERIFIED:
          await addPaymentMethodAndUpgrade(user.uid, paymentMethodId);
          break;
        case UserAuthLevel.TRIAL_PERIOD:
          await activateTrialPeriod(user.uid);
          break;
        case UserAuthLevel.FULLY_REGISTERED:
          await upgradeToFullyRegistered(user.uid, culturalEmpathyCode);
          break;
      }
      onClose();
    } catch (error) {
      console.error("Error upgrading user:", error);
    }
  };

  const renderUpgradeForm = () => {
    switch (targetLevel) {
      case UserAuthLevel.DR_GRANT:
        return (
          <div className="text-center">
            <p className="mb-4">Verify your email address to upgrade to Dr. Grant level.</p>
            <p className="text-sm text-gray-500">We've sent a verification link to your email. Please check your inbox and click the link to verify.</p>
          </div>
        );

      case UserAuthLevel.PAYMENT_VERIFIED:
        return (
          <div className="space-y-4">
            <p className="mb-4">Add a payment method to upgrade to Payment Verified level.</p>
            
            <div>
              <label htmlFor="cardNumber" className="block text-sm font-medium text-gray-700">Card Number</label>
              <input
                id="cardNumber"
                type="text"
                className="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-500 focus:ring-indigo-500"
                placeholder="1234 5678 9012 3456"
              />
            </div>
            
            <div className="grid grid-cols-2 gap-4">
              <div>
                <label htmlFor="expiryDate" className="block text-sm font-medium text-gray-700">Expiry Date</label>
                <input
                  id="expiryDate"
                  type="text"
                  className="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-500 focus:ring-indigo-500"
                  placeholder="MM/YY"
                />
              </div>
              <div>
                <label htmlFor="cvc" className="block text-sm font-medium text-gray-700">CVC</label>
                <input
                  id="cvc"
                  type="text"
                  className="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-500 focus:ring-indigo-500"
                  placeholder="123"
                />
              </div>
            </div>
            
            <div>
              <label htmlFor="cardholderName" className="block text-sm font-medium text-gray-700">Cardholder Name</label>
              <input
                id="cardholderName"
                type="text"
                className="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-500 focus:ring-indigo-500"
                placeholder="John Doe"
                onChange={(e) => setPaymentMethodId(`pm_${Date.now()}`)} // Simulate payment method creation
              />
            </div>
          </div>
        );

      case UserAuthLevel.TRIAL_PERIOD:
        return (
          <div className="text-center">
            <p className="mb-4">Activate your 3-day free trial with full access to all features.</p>
            <p className="text-sm text-gray-500">Your payment method won't be charged until the trial period ends. You can cancel anytime.</p>
          </div>
        );

      case UserAuthLevel.FULLY_REGISTERED:
        return (
          <div className="space-y-4">
            <p className="mb-4">Complete your registration and become a fully registered user.</p>
            
            <div>
              <label htmlFor="culturalEmpathyCode" className="block text-sm font-medium text-gray-700">Cultural Empathy Code</label>
              <input
                id="culturalEmpathyCode"
                type="text"
                value={culturalEmpathyCode}
                onChange={(e) => setCulturalEmpathyCode(e.target.value)}
                className="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-500 focus:ring-indigo-500"
                placeholder="Enter your unique code"
                required
              />
              <p className="mt-1 text-xs text-gray-500">This code connects your Dream Commander to your account.</p>
            </div>
          </div>
        );

      default:
        return <p>Invalid upgrade target.</p>;
    }
  };

  const targetUserType = Object.values(USER_TYPES).find(type => type.level === targetLevel);

  return (
    <div className="fixed inset-0 overflow-y-auto z-50 flex items-center justify-center bg-black bg-opacity-50">
      <div className="relative bg-white rounded-lg w-full max-w-md p-6">
        <button
          onClick={onClose}
          className="absolute top-3 right-3 text-gray-400 hover:text-gray-500"
        >
          <svg className="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
            <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M6 18L18 6M6 6l12 12" />
          </svg>
        </button>
        
        <h3 className="text-xl font-bold mb-4">
          Upgrade to {targetUserType?.name}
        </h3>
        
        {renderUpgradeForm()}
        
        <div className="mt-6 flex justify-end space-x-3">
          <button
            onClick={onClose}
            className="px-4 py-2 border border-gray-300 rounded-md text-sm font-medium text-gray-700 hover:bg-gray-50"
          >
            Cancel
          </button>
          <button
            onClick={handleUpgrade}
            className="px-4 py-2 border border-transparent rounded-md shadow-sm text-sm font-medium text-white bg-indigo-600 hover:bg-indigo-700"
            disabled={
              (targetLevel === UserAuthLevel.PAYMENT_VERIFIED && !paymentMethodId) ||
              (targetLevel === UserAuthLevel.FULLY_REGISTERED && !culturalEmpathyCode)
            }
          >
            Upgrade
          </button>
        </div>
      </div>
    </div>
  );
};

// Authentication Status Bar Component
export const AuthStatusBar = () => {
  const { authState } = useAuth();
  const { isAuthenticated, user, userType, isLoading } = authState;
  
  const [showUpgradeModal, setShowUpgradeModal] = useState(false);
  const [upgradeTarget, setUpgradeTarget] = useState<UserAuthLevel>(UserAuthLevel.DR_GRANT);

  const handleUpgradeClick = (targetLevel: UserAuthLevel) => {
    setUpgradeTarget(targetLevel);
    setShowUpgradeModal(true);
  };

  if (isLoading) {
    return (
      <div className="bg-gray-100 p-4 rounded-lg flex items-center justify-center">
        <svg className="animate-spin h-5 w-5 text-indigo-600 mr-2" viewBox="0 0 24 24">
          <circle
            className="opacity-25"
            cx="12"
            cy="12"
            r="10"
            stroke="currentColor"
            strokeWidth="4"
          ></circle>
          <path
            className="opacity-75"
            fill="currentColor"
            d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"
          ></path>
        </svg>
        <span>Loading...</span>
      </div>
    );
  }

  if (!isAuthenticated || !user) {
    return (
      <div className="bg-gray-100 p-4 rounded-lg">
        <p className="text-sm font-medium text-gray-700">
          You are not signed in. Please log in to access Aixtiv Symphony features.
        </p>
      </div>
    );
  }

  const getNextUpgradeLevel = (): UserAuthLevel | null => {
    if (user.authLevel < UserAuthLevel.DR_GRANT) {
      return UserAuthLevel.DR_GRANT;
    } else if (user.authLevel < UserAuthLevel.PAYMENT_VERIFIED) {
      return UserAuthLevel.PAYMENT_VERIFIED;
    } else if (user.authLevel < UserAuthLevel.TRIAL_PERIOD) {
      return UserAuthLevel.TRIAL_PERIOD;
    } else if (user.authLevel < UserAuthLevel.FULLY_REGISTERED) {
      return UserAuthLevel.FULLY_REGISTERED;
    }
    return null;
  };

  const nextLevel = getNextUpgradeLevel();
  const nextLevelType = nextLevel ? Object.values(USER_TYPES).find(type => type.level === nextLevel) : null;

  return (
    <div className="bg-white p-4 rounded-lg shadow-sm border border-gray-200">
      <div className="flex items-center justify-between">
        <div className="flex items-center space-x-3">
          {user.photoURL ? (
            <img
              src={user.photoURL}
              alt={user.displayName || 'User'}
              className="h-10 w-10 rounded-full"
            />
          ) : (
            <div className="h-10 w-10 rounded-full bg-indigo-100 flex items-center justify-center">
              <span className="text-sm font-medium text-indigo-700">
                {user.displayName?.charAt(0) || user.email?.charAt(0) || 'U'}
              </span>
            </div>
          )}
          <div>
            <p className="font-medium">{user.displayName || 'User'}</p>
            <p className="text-xs text-gray-500">{userType?.name} (Level {user.authLevel})</p>
          </div>
        </div>
        
        {nextLevelType && (
          <button
            onClick={() => handleUpgradeClick(nextLevel)}
            className="px-3 py-1 bg-indigo-100 text-indigo-700 text-sm font-medium rounded-full hover:bg-indigo-200"
          >
            Upgrade to {nextLevelType.name}
          </button>
        )}
      </div>
      
      <div className="mt-3">
        <div className="w-full bg-gray-200 rounded-full h-1.5">