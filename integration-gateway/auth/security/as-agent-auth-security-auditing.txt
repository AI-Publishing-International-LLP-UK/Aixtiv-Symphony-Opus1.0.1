// src/security/security-auditor.ts

import { User, UserAuthLevel } from '../auth/user-auth-types';
import { IntegrationType } from '../aixtiv-orchestra/IntegrationGateway/IntegrationGateway';
import { performanceMonitor } from '../monitoring/performance-monitor';

/**
 * Security event types for the auditing system
 */
export enum SecurityEventType {
  AUTH_SUCCESS = 'auth_success',
  AUTH_FAILURE = 'auth_failure',
  PRIVILEGE_ESCALATION = 'privilege_escalation',
  PRIVILEGE_USE = 'privilege_use',
  SUSPICIOUS_ACTIVITY = 'suspicious_activity',
  INTEGRATION_ACCESS = 'integration_access',
  AGENT_ACCESS = 'agent_access',
  CONFIGURATION_CHANGE = 'configuration_change',
  SENSITIVE_DATA_ACCESS = 'sensitive_data_access',
  USER_IMPERSONATION_ATTEMPT = 'user_impersonation_attempt',
  RATE_LIMIT_EXCEEDED = 'rate_limit_exceeded',
  API_ABUSE = 'api_abuse',
  TOKEN_VALIDATION = 'token_validation',
  S2DO_VERIFICATION = 's2do_verification'
}

/**
 * Severity levels for security events
 */
export enum SecurityEventSeverity {
  INFO = 'info',           // Normal operation, general logging
  LOW = 'low',             // Minor concern, needs tracking but not immediate action
  MEDIUM = 'medium',       // Notable security event, should be reviewed
  HIGH = 'high',           // Serious security concern, needs prompt investigation
  CRITICAL = 'critical'    // Severe security threat, requires immediate attention
}

/**
 * Interface for security event records
 */
export interface SecurityEventRecord {
  type: SecurityEventType;
  severity: SecurityEventSeverity;
  timestamp: number;
  userId?: string;
  userLevel?: UserAuthLevel;
  ipAddress?: string;
  userAgent?: string;
  location?: string;
  resourceId?: string;
  resourceType?: string;
  action: string;
  outcome: 'success' | 'failure' | 'blocked';
  details: Record<string, any>;
  s2doVerification?: {
    verified: boolean;
    stem: string;
    action: string;
    signature?: string;
  };
}

/**
 * Configuration options for the security auditor
 */
export interface SecurityAuditorOptions {
  enableConsoleLogging: boolean;
  enabledEventTypes: SecurityEventType[];
  minSeverityForStorage: SecurityEventSeverity;
  minSeverityForRealTimeAlert: SecurityEventSeverity;
  maxEventsInMemory: number;
  storageRetentionDays: number;
  auditEndpoint?: string;
  alertEndpoint?: string;
  s2doVerificationRequired: boolean;
  riskAnalysisEnabled: boolean;
  ipReputationCheckEnabled: boolean;
  anomalyDetectionEnabled: boolean;
  userBehaviorBaselineEnabled: boolean;
  sensitiveActions: string[];
  sensitiveResources: string[];
}

/**
 * User behavior baseline for detecting anomalies
 */
interface UserBehaviorBaseline {
  userId: string;
  userLevel: UserAuthLevel;
  commonIpAddresses: string[];
  commonLocations: string[];
  commonUserAgents: string[];
  commonAccessPatterns: {
    timeOfDay: number[];       // Hour frequencies (0-23)
    dayOfWeek: number[];       // Day frequencies (0-6)
    resourceTypes: Record<string, number>;
    actions: Record<string, number>;
  };
  lastActivity: number;
  riskScore: number;
}

/**
 * Security Auditor for monitoring and logging security events
 */
export class SecurityAuditor {
  private static instance: SecurityAuditor;
  private eventBuffer: SecurityEventRecord[] = [];
  private userBaselines = new Map<string, UserBehaviorBaseline>();
  private suspiciousIPs = new Set<string>();
  private actionRateLimits = new Map<string, Map<string, number[]>>();
  private options: SecurityAuditorOptions;
  
  // Default configuration
  private static DEFAULT_OPTIONS: SecurityAuditorOptions = {
    enableConsoleLogging: false,
    enabledEventTypes: Object.values(SecurityEventType),
    minSeverityForStorage: SecurityEventSeverity.INFO,
    minSeverityForRealTimeAlert: SecurityEventSeverity.HIGH,
    maxEventsInMemory: 1000,
    storageRetentionDays: 90,
    s2doVerificationRequired: true,
    riskAnalysisEnabled: true,
    ipReputationCheckEnabled: true,
    anomalyDetectionEnabled: true,
    userBehaviorBaselineEnabled: true,
    sensitiveActions: [
      'upgrade_auth_level',
      'add_payment_method',
      'activate_dream_commander',
      'modify_user_permissions',
      'access_cultural_empathy_code',
      'modify_agent_permissions',
      'export_user_data'
    ],
    sensitiveResources: [
      'payment_info',
      'cultural_empathy_code',
      'dream_commander_config',
      'user_credentials',
      'flight_memory_data',
      's2do_signing_keys'
    ]
  };
  
  private constructor(options?: Partial<SecurityAuditorOptions>) {
    this.options = { ...SecurityAuditor.DEFAULT_OPTIONS, ...options };
    
    // Initialize rate limiting
    this.initializeRateLimits();
    
    // Load stored baselines if available
    this.loadUserBaselines();
    
    // Set up cleanup interval for rate limits
    setInterval(() => this.cleanupRateLimits(), 3600000); // Clean every hour
    
    // Set up flush interval for security events
    setInterval(() => this.flushEvents(), 60000); // Flush every minute
  }
  
  /**
   * Get the singleton instance of the SecurityAuditor
   */
  public static getInstance(options?: Partial<SecurityAuditorOptions>): SecurityAuditor {
    if (!SecurityAuditor.instance) {
      SecurityAuditor.instance = new SecurityAuditor(options);
    }
    return SecurityAuditor.instance;
  }
  
  /**
   * Initialize rate limits for sensitive actions
   */
  private initializeRateLimits(): void {
    // Rate limits for auth actions
    this.setRateLimit('auth_attempt', 10, 60); // 10 attempts per minute
    this.setRateLimit('auth_failure', 5, 60);  // 5 failures per minute
    
    // Rate limits for sensitive actions
    for (const action of this.options.sensitiveActions) {
      this.setRateLimit(action, 3, 60); // 3 attempts per minute for sensitive actions
    }
    
    // Rate limits for resource access
    for (const resource of this.options.sensitiveResources) {
      this.setRateLimit(`access_${resource}`, 5, 60); // 5 accesses per minute for sensitive resources
    }
    
    // API rate limits
    this.setRateLimit('api_call', 100, 60); // 100 API calls per minute
  }
  
  /**
   * Set rate limit for an action
   */
  private setRateLimit(action: string, limit: number, timeWindowSeconds: number): void {
    if (!this.actionRateLimits.has(action)) {
      this.actionRateLimits.set(action, new Map<string, number[]>());
    }
  }
  
  /**
   * Clean up old rate limit entries
   */
  private cleanupRateLimits(): void {
    const now = Date.now();
    
    for (const [action, userMap] of this.actionRateLimits.entries()) {
      for (const [userId, timestamps] of userMap.entries()) {
        // Remove timestamps older than 1 hour
        const filteredTimestamps = timestamps.filter(time => now - time < 3600000);
        
        if (filteredTimestamps.length === 0) {
          userMap.delete(userId);
        } else {
          userMap.set(userId, filteredTimestamps);
        }
      }
      
      if (userMap.size === 0) {
        this.actionRateLimits.delete(action);
      }
    }
  }
  
  /**
   * Check if an action exceeds rate limits
   * @returns true if rate limit exceeded
   */
  public checkRateLimit(action: string, userId: string): boolean {
    if (!this.actionRateLimits.has(action)) {
      return false; // No rate limit defined
    }
    
    const userMap = this.actionRateLimits.get(action);
    if (!userMap) return false;
    
    const now = Date.now();
    let timestamps = userMap.get(userId) || [];
    
    // Filter out timestamps older than