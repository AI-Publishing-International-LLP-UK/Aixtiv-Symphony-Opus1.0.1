/**
 * AIXTIV SYMPHONY™ Deployment Configuration
 * © 2025 AI Publishing International LLP
 * 
 * PROPRIETARY AND CONFIDENTIAL
 * This is proprietary software of AI Publishing International LLP.
 * All rights reserved. No part of this software may be reproduced,
 * modified, or distributed without prior written permission.
 */

// Dockerfile for the AIXTIV SYMPHONY backend
// ===========================================
// Filename: Dockerfile

// Base Node.js image
FROM node:18-alpine AS base

# Create app directory
WORKDIR /app

# Install dependencies for both development and production
FROM base AS deps
COPY package.json package-lock.json ./
RUN npm ci

# Build stage - compiles TypeScript to JavaScript
FROM deps AS builder
COPY . .
RUN npm run build

# Production stage - only includes necessary files
FROM base AS runner
ENV NODE_ENV=production

# Copy necessary files for production
COPY --from=builder /app/dist ./dist
COPY --from=deps /app/node_modules ./node_modules
COPY package.json ./

# Install only production dependencies
RUN npm prune --production

EXPOSE 8080
CMD ["node", "dist/server.js"]


// Kubernetes deployment configuration for AIXTIV SYMPHONY Core
// ===========================================================
// Filename: kubernetes/core-deployment.yaml

apiVersion: apps/v1
kind: Deployment
metadata:
  name: aixtiv-symphony-core
  labels:
    app: aixtiv-symphony
    component: core
spec:
  replicas: 3
  selector:
    matchLabels:
      app: aixtiv-symphony
      component: core
  template:
    metadata:
      labels:
        app: aixtiv-symphony
        component: core
    spec:
      containers:
      - name: core-api
        image: gcr.io/aixtiv-symphony/core-api:latest
        ports:
        - containerPort: 8080
        env:
        - name: NODE_ENV
          value: "production"
        - name: FIREBASE_CONFIG
          valueFrom:
            secretKeyRef:
              name: firebase-config
              key: credentials.json
        - name: PINECONE_API_KEY
          valueFrom:
            secretKeyRef:
              name: pinecone-secrets
              key: api-key
        - name: PINECONE_ENVIRONMENT
          valueFrom:
            secretKeyRef:
              name: pinecone-secrets
              key: environment
        - name: ETHEREUM_RPC_URL
          valueFrom:
            secretKeyRef:
              name: blockchain-secrets
              key: ethereum-rpc-url
        - name: AIXTIV_PRIVATE_KEY
          valueFrom:
            secretKeyRef:
              name: blockchain-secrets
              key: private-key
        - name: NFT_CONTRACT_ADDRESS
          valueFrom:
            configMapKeyRef:
              name: blockchain-config
              key: nft-contract-address
        - name: VERIFICATION_CONTRACT_ADDRESS
          valueFrom:
            configMapKeyRef:
              name: blockchain-config
              key: verification-contract-address
        - name: SUBSCRIPTION_CONTRACT_ADDRESS
          valueFrom:
            configMapKeyRef:
              name: blockchain-config
              key: subscription-contract-address
        livenessProbe:
          httpGet:
            path: /health
            port: 8080
          initialDelaySeconds: 30
          periodSeconds: 10
        readinessProbe:
          httpGet:
            path: /ready
            port: 8080
          initialDelaySeconds: 5
          periodSeconds: 5
        resources:
          limits:
            cpu: "1"
            memory: "1Gi"
          requests:
            cpu: "500m"
            memory: "512Mi"
      volumes:
      - name: firebase-credentials
        secret:
          secretName: firebase-config


// Kubernetes service configuration for AIXTIV SYMPHONY Core
// =======================================================
// Filename: kubernetes/core-service.yaml

apiVersion: v1
kind: Service
metadata:
  name: aixtiv-symphony-core-svc
  labels:
    app: aixtiv-symphony
    component: core
spec:
  type: ClusterIP
  ports:
  - port: 80
    targetPort: 8080
    protocol: TCP
    name: http
  selector:
    app: aixtiv-symphony
    component: core


// Kubernetes integration gateway deployment configuration
// ======================================================
// Filename: kubernetes/gateway-deployment.yaml

apiVersion: apps/v1
kind: Deployment
metadata:
  name: aixtiv-symphony-gateways
  labels:
    app: aixtiv-symphony
    component: gateways
spec:
  replicas: 2
  selector:
    matchLabels:
      app: aixtiv-symphony
      component: gateways
  template:
    metadata:
      labels:
        app: aixtiv-symphony
        component: gateways
    spec:
      containers:
      - name: integration-gateways
        image: gcr.io/aixtiv-symphony/integration-gateways:latest
        ports:
        - containerPort: 8081
        env:
        - name: NODE_ENV
          value: "production"
        - name: FIREBASE_CONFIG
          valueFrom:
            secretKeyRef:
              name: firebase-config
              key: credentials.json
        - name: ENCRYPTION_KEY_BASE
          valueFrom:
            secretKeyRef:
              name: gateway-secrets
              key: encryption-key-base
        livenessProbe:
          httpGet:
            path: /health
            port: 8081
          initialDelaySeconds: 30
          periodSeconds: 10
        readinessProbe:
          httpGet:
            path: /health
            port: 8081
          initialDelaySeconds: 5
          periodSeconds: 5
        resources:
          limits:
            cpu: "500m"
            memory: "512Mi"
          requests:
            cpu: "200m"
            memory: "256Mi"


// Kubernetes agent orchestration deployment configuration
// ======================================================
// Filename: kubernetes/agent-orchestration-deployment.yaml

apiVersion: apps/v1
kind: Deployment
metadata:
  name: aixtiv-symphony-agent-orchestration
  labels:
    app: aixtiv-symphony
    component: agent-orchestration
spec:
  replicas: 2
  selector:
    matchLabels:
      app: aixtiv-symphony
      component: agent-orchestration
  template:
    metadata:
      labels:
        app: aixtiv-symphony
        component: agent-orchestration
    spec:
      containers:
      - name: agent-orchestration
        image: gcr.io/aixtiv-symphony/agent-orchestration:latest
        ports:
        - containerPort: 8082
        env:
        - name: NODE_ENV
          value: "production"
        - name: FIREBASE_CONFIG
          valueFrom:
            secretKeyRef:
              name: firebase-config
              key: credentials.json
        - name: PINECONE_API_KEY
          valueFrom:
            secretKeyRef:
              name: pinecone-secrets
              key: api-key
        - name: PINECONE_ENVIRONMENT
          valueFrom:
            secretKeyRef:
              name: pinecone-secrets
              key: environment
        - name: EMBEDDING_MODEL_URL
          valueFrom:
            configMapKeyRef:
              name: ai-models-config
              key: embedding-model-url
        livenessProbe:
          httpGet:
            path: /health
            port: 8082
          initialDelaySeconds: 30
          periodSeconds: 10
        readinessProbe:
          httpGet:
            path: /health
            port: 8082
          initialDelaySeconds: 5
          periodSeconds: 5
        resources:
          limits:
            cpu: "2"
            memory: "4Gi"
          requests:
            cpu: "1"
            memory: "2Gi"


// Kubernetes frontend deployment configuration
// ===========================================
// Filename: kubernetes/frontend-deployment.yaml

apiVersion: apps/v1
kind: Deployment
metadata:
  name: aixtiv-symphony-frontend
  labels:
    app: aixtiv-symphony
    component: frontend
spec:
  replicas: 3
  selector:
    matchLabels:
      app: aixtiv-symphony
      component: frontend
  template:
    metadata:
      labels:
        app: aixtiv-symphony
        component: frontend
    spec:
      containers:
      - name: frontend
        image: gcr.io/aixtiv-symphony/frontend:latest
        ports:
        - containerPort: 80
        env:
        - name: NODE_ENV
          value: "production"
        - name: API_URL
          valueFrom:
            configMapKeyRef:
              name: frontend-config
              key: api-url
        - name: FIREBASE_CONFIG
          valueFrom:
            secretKeyRef:
              name: firebase-frontend-config
              key: config.json
        livenessProbe:
          httpGet:
            path: /
            port: 80
          initialDelaySeconds: 30
          periodSeconds: 10
        readinessProbe:
          httpGet:
            path: /
            port: 80
          initialDelaySeconds: 5
          periodSeconds: 5
        resources:
          limits:
            cpu: "500m"
            memory: "512Mi"
          requests:
            cpu: "200m"
            memory: "256Mi"


// Kubernetes ingress configuration
// ===============================
// Filename: kubernetes/ingress.yaml

apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: aixtiv-symphony-ingress
  annotations:
    kubernetes.io/ingress.class: "nginx"
    cert-manager.io/cluster-issuer: "letsencrypt-prod"
    nginx.ingress.kubernetes.io/ssl-redirect: "true"
    nginx.ingress.kubernetes.io/proxy-body-size: "50m"
spec:
  tls:
  - hosts:
    - api.aixtiv-symphony.com
    - app.aixtiv-symphony.com
    secretName: aixtiv-symphony-tls
  rules:
  - host: api.aixtiv-symphony.com
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: aixtiv-symphony-core-svc
            port:
              number: 80
      - path: /gateway
        pathType: Prefix
        backend:
          service:
            name: aixtiv-symphony-gateways-svc
            port:
              number: 80
      - path: /agents
        pathType: Prefix
        backend:
          service:
            name: aixtiv-symphony-agent-orchestration-svc
            port:
              number: 80
  - host: app.aixtiv-symphony.com
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: aixtiv-symphony-frontend-svc
            port:
              number: 80


// Kubernetes ConfigMap for environment configuration
// ================================================
// Filename: kubernetes/configmaps.yaml

apiVersion: v1
kind: ConfigMap
metadata:
  name: blockchain-config
data:
  nft-contract-address: "0x1234567890123456789012345678901234567890"
  verification-contract-address: "0x2345678901234567890123456789012345678901"
  subscription-contract-address: "0x3456789012345678901234567890123456789012"
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: ai-models-config
data:
  embedding-model-url: "https://api.aixtiv-symphony.com/ai/embeddings"
  nlp-model-url: "https://api.aixtiv-symphony.com/ai/nlp"
  vision-model-url: "https://api.aixtiv-symphony.com/ai/vision"
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: frontend-config
data:
  api-url: "https://api.aixtiv-symphony.com"


// Firebase Cloud Functions configuration for AIXTIV SYMPHONY
// =========================================================
// Filename: firebase.json

{
  "functions": {
    "source": "functions",
    "ignore": [
      "node_modules",
      ".git",
      "firebase-debug.log",
      "firebase-debug.*.log"
    ],
    "predeploy": [
      "npm --prefix \"$RESOURCE_DIR\" run lint",
      "npm --prefix \"$RESOURCE_DIR\" run build"
    ]
  },
  "firestore": {
    "rules": "firestore.rules",
    "indexes": "firestore.indexes.json"
  },
  "storage": {
    "rules": "storage.rules"
  },
  "emulators": {
    "functions": {
      "port": 5001
    },
    "firestore": {
      "port": 8080
    },
    "storage": {
      "port": 9199
    },
    "ui": {
      "enabled": true
    }
  }
}


// Firestore security rules for AIXTIV SYMPHONY
// ===========================================
// Filename: firestore.rules

rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Function to check if user is authenticated
    function isAuthenticated() {
      return request.auth != null;
    }
    
    // Function to check if user owns the document
    function isOwner(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }
    
    // Function to check if user has admin role
    function isAdmin() {
      return isAuthenticated() && 
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.specializedRoles.hasAny(['VISIONARY_VOICE', 'CO_PILOT']);
    }
    
    // Function to check if user belongs to organization
    function isOrgMember(orgId) {
      return isAuthenticated() && 
        exists(/databases/$(database)/documents/organizations/$(orgId)/members/$(request.auth.uid));
    }
    
    // Function to check if user is organization admin
    function isOrgAdmin(orgId) {
      return isAuthenticated() && 
        get(/databases/$(database)/documents/organizations/$(orgId)/members/$(request.auth.uid)).data.role == 'admin';
    }
    
    // User profiles
    match /users/{userId} {
      allow create: if isAuthenticated();
      allow read: if isOwner(userId) || isAdmin();
      allow update: if isOwner(userId) || isAdmin();
      allow delete: if isAdmin();
    }
    
    // Organizations
    match /organizations/{orgId} {
      allow create: if isAuthenticated();
      allow read: if isOrgMember(orgId) || isAdmin();
      allow update: if isOrgAdmin(orgId) || isAdmin();
      allow delete: if isAdmin();
      
      // Organization members
      match /members/{memberId} {
        allow read: if isOrgMember(orgId) || isAdmin();
        allow write: if isOrgAdmin(orgId) || isAdmin();
      }
    }
    
    // Teams
    match /teams/{teamId} {
      allow create: if isAuthenticated() && 
        isOrgAdmin(resource.data.organizationId);
      allow read: if isOrgMember(resource.data.organizationId) || isAdmin();
      allow update: if isOrgAdmin(resource.data.organizationId) || isAdmin();
      allow delete: if isOrgAdmin(resource.data.organizationId) || isAdmin();
      
      // Team members
      match /members/{memberId} {
        allow read: if isOrgMember(get(/databases/$(database)/documents/teams/$(teamId)).data.organizationId) || isAdmin();
        allow write: if isOrgAdmin(get(/databases/$(database)/documents/teams/$(teamId)).data.organizationId) || isAdmin();
      }
    }
    
    // Solutions
    match /solutions/{solutionId} {
      allow read: if isAuthenticated();
      allow write: if isAdmin();
    }
    
    // Subscriptions
    match /subscriptions/{subscriptionId} {
      allow read: if isAuthenticated() && 
        (resource.data.subscriberType == 'user' && resource.data.subscriberId == request.auth.uid) ||
        (resource.data.subscriberType == 'organization' && isOrgMember(resource.data.subscriberId)) ||
        isAdmin();
      allow create, update: if isAdmin();
      allow delete: if isAdmin();
    }
    
    // Agents
    match /agents/{agentId} {
      allow read: if isAuthenticated() && 
        (resource.data.ownerType == 'user' && resource.data.ownerId == request.auth.uid) ||
        (resource.data.ownerType == 'organization' && isOrgMember(resource.data.ownerId)) ||
        isAdmin();
      allow create: if isAuthenticated();
      allow update: if isAuthenticated() && 
        (resource.data.ownerType == 'user' && resource.data.ownerId == request.auth.uid) ||
        (resource.data.ownerType == 'organization' && isOrgAdmin(resource.data.ownerId)) ||
        isAdmin();
      allow delete: if isAuthenticated() && 
        (resource.data.ownerType == 'user' && resource.data.ownerId == request.auth.uid) ||
        (resource.data.ownerType == 'organization' && isOrgAdmin(resource.data.ownerId)) ||
        isAdmin();
      
      // Agent access controls
      match /access/{accessId} {
        allow read: if isAuthenticated() && 
          (get(/databases/$(database)/documents/agents/$(agentId)).data.ownerType == 'user' && 
           get(/databases/$(database)/documents/agents/$(agentId)).data.ownerId == request.auth.uid) ||
          (get(/databases/$(database)/documents/agents/$(agentId)).data.ownerType == 'organization' && 
           isOrgAdmin(get(/databases/$(database)/documents/agents/$(agentId)).data.ownerId)) ||
          isAdmin();
        allow write: if isAuthenticated() && 
          (get(/databases/$(database)/documents/agents/$(agentId)).data.ownerType == 'user' && 
           get(/databases/$(database)/documents/agents/$(agentId)).data.ownerId == request.auth.uid) ||
          (get(/databases/$(database)/documents/agents/$(agentId)).data.ownerType == 'organization' && 
           isOrgAdmin(get(/databases/$(database)/documents/agents/$(agentId)).data.ownerId)) ||
          isAdmin();
      }
    }
    
    // Integration Gateways
    match /integrationGateways/{gatewayId} {
      allow read: if isAuthenticated() && 
        (resource.data.ownerType == 'user' && resource.data.ownerId == request.auth.uid) ||
        (resource.data.ownerType == 'organization' && isOrgMember(resource.data.ownerId)) ||
        isAdmin();
      allow create: if isAuthenticated();
      allow update: if isAuthenticated() && 
        (resource.data.ownerType == 'user' && resource.data.ownerId == request.auth.uid) ||
        (resource.data.ownerType == 'organization' && isOrgAdmin(resource.data.ownerId)) ||
        isAdmin();
      allow delete: if isAdmin();
      
      // Gateway endpoints
      match /endpoints/{endpointId} {
        allow read: if isAuthenticated() && 
          (get(/databases/$(database)/documents/integrationGateways/$(gatewayId)).data.ownerType == 'user' && 
           get(/databases/$(database)/documents/integrationGateways/$(gatewayId)).data.ownerId == request.auth.uid) ||
          (get(/databases/$(database)/documents/integrationGateways/$(gatewayId)).data.ownerType == 'organization' && 
           isOrgMember(get(/databases/$(database)/documents/integrationGateways/$(gatewayId)).data.ownerId)) ||
          isAdmin();
        allow write: if isAuthenticated() && 
          (get(/databases/$(database)/documents/integrationGateways/$(gatewayId)).data.ownerType == 'user' && 
           get(/databases/$(database)/documents/integrationGateways/$(gatewayId)).data.ownerId == request.auth.uid) ||
          (get(/databases/$(database)/documents/integrationGateways/$(gatewayId)).data.ownerType == 'organization' && 
           isOrgAdmin(get(/databases/$(database)/documents/integrationGateways/$(gatewayId)).data.ownerId)) ||
          isAdmin();
      }
    }
    
    // API Keys
    match /integrationApiKeys/{apiKeyId} {
      allow read: if isAuthenticated() && 
        (resource.data.issuedToType == 'user' && resource.data.issuedToId == request.auth.uid) ||
        (resource.data.issuedToType == 'organization' && isOrgAdmin(resource.data.issuedToId)) ||
        isAdmin();
      allow create: if isAuthenticated() && 
        (request.resource.data.issuedToType == 'user' && request.resource.data.issuedToId == request.auth.uid) ||
        (request.resource.data.issuedToType == 'organization' && isOrgAdmin(request.resource.data.issuedToId)) ||
        isAdmin();
      allow update, delete: if isAuthenticated() && 
        (resource.data.issuedToType == 'user' && resource.data.issuedToId == request.auth.uid) ||
        (resource.data.issuedToType == 'organization' && isOrgAdmin(resource.data.issuedToId)) ||
        isAdmin();
    }
    
    // Integration Connections
    match /integrationConnections/{connectionId} {
      allow read: if isAuthenticated() && 
        (resource.data.ownerType == 'user' && resource.data.ownerId == request.auth.uid) ||
        (resource.data.ownerType == 'organization' && isOrgMember(resource.data.ownerId)) ||
        isAdmin();
      allow create: if isAuthenticated();
      allow update, delete: if isAuthenticated() && 
        (resource.data.ownerType == 'user' && resource.data.ownerId == request.auth.uid) ||
        (resource.data.ownerType == 'organization' && isOrgAdmin(resource.data.ownerId)) ||
        isAdmin();
    }
    
    // Conversations
    match /conversations/{conversationId} {
      // Allow read if user is a participant
      allow read: if isAuthenticated() && 
        exists(/databases/$(database)/documents/conversations/$(conversationId)/participants/user_$(request.auth.uid));
      allow create: if isAuthenticated();
      allow update: if isAuthenticated() && 
        (resource.data.initiatorType == 'user' && resource.data.initiatorId == request.auth.uid) ||
        isAdmin();
      allow delete: if isAdmin();
      
      // Conversation participants
      match /participants/{participantId} {
        allow read: if isAuthenticated() && 
          exists(/databases/$(database)/documents/conversations/$(conversationId)/participants/user_$(request.auth.uid));
        allow write: if isAuthenticated() && 
          (get(/databases/$(database)/documents/conversations/$(conversationId)).data.initiatorType == 'user' && 
           get(/databases/$(database)/documents/conversations/$(conversationId)).data.initiatorId == request.auth.uid) ||
          isAdmin();
      }
      
      // Messages
      match /messages/{messageId} {
        allow read: if isAuthenticated() && 
          exists(/databases/$(database)/documents/conversations/$(conversationId)/participants/user_$(request.auth.uid));
        allow create: if isAuthenticated() && 
          exists(/databases/$(database)/documents/conversations/$(conversationId)/participants/user_$(request.auth.uid)) &&
          request.resource.data.senderType == 'user' && 
          request.resource.data.senderId == request.auth.uid;
        allow update: if isAuthenticated() && 
          request.resource.data.senderType == 'user' && 
          request.resource.data.senderId == request.auth.uid;
        allow delete: if isAdmin();
      }
    }
    
    // S2DO Objects
    match /s2doObjects/{objectId} {
      allow read: if isAuthenticated() && 
        (resource.data.ownerType == 'user' && resource.data.ownerId == request.auth.uid) ||
        (resource.data.ownerType == 'organization' && isOrgMember(resource.data.ownerId)) ||
        resource.data.permissions.publicAccess ||
        resource.data.permissions.authorizedUsers.hasAny([request.auth.uid]) ||
        isAdmin();
      allow create: if isAuthenticated();
      allow update: if isAuthenticated() && 
        (resource.data.ownerType == 'user' && resource.data.ownerId == request.auth.uid) ||
        (resource.data.ownerType == 'organization' && isOrgAdmin(resource.data.ownerId)) ||
        isAdmin();
      allow delete: if isAuthenticated() && 
        (resource.data.ownerType == 'user' && resource.data.ownerId == request.auth.uid) ||
        (resource.data.ownerType == 'organization' && isOrgAdmin(resource.data.ownerId)) ||
        isAdmin();
    }
    
    // NFT Tokens
    match /nftTokens/{tokenId} {
      allow read: if isAuthenticated();
      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }
    
    // Blockchain Records
    match /blockchainRecords/{recordId} {
      allow read: if isAuthenticated();
      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }
    
    // Vector Stores
    match /vectorStores/{storeId} {
      allow read: if isAuthenticated() && 
        (resource.data.ownerType == 'user' && resource.data.ownerId == request.auth.uid) ||
        (resource.data.ownerType == 'organization' && isOrgMember(resource.data.ownerId)) ||
        (resource.data.ownerType == 'agent' && 
          get(/databases/$(database)/documents/agents/$(resource.data.ownerId)).data.ownerType == 'user' && 
          get(/databases/$(database)/documents/agents/$(resource.data.ownerId)).data.ownerId == request.auth.uid) ||
        (resource.data.ownerType == 'agent' && 
          get(/databases/$(database)/documents/agents/$(resource.data.ownerId)).data.ownerType == 'organization' && 
          isOrgMember(get(/databases/$(database)/documents/agents/$(resource.data.ownerId)).data.ownerId)) ||
        isAdmin();
      allow create: if isAuthenticated();
      allow update: if isAuthenticated() && 
        (resource.data.ownerType == 'user' && resource.data.ownerId == request.auth.uid) ||
        (resource.data.ownerType == 'organization' && isOrgAdmin(resource.data.ownerId)) ||
        isAdmin();
      allow delete: if isAdmin();
    }
    
    // Rays Compute Jobs
    match /raysComputeJobs/{jobId} {
      allow read: if isAuthenticated() && 
        (resource.data.requesterType == 'user' && resource.data.requesterId == request.auth.uid) ||
        (resource.data.requesterType == 'organization' && isOrgMember(resource.data.requesterId)) ||
        isAdmin();
      allow create: if isAuthenticated();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }
    
    // Activity Logs (read-only for most users)
    match /activityLogs/{logId} {
      allow read: if isAuthenticated() && 
        (resource.data.actorType == 'user' && resource.data.actorId == request.auth.uid) ||
        (resource.data.resourceType == 'user' && resource.data.resourceId == request.auth.uid) ||
        (resource.data.resourceType == 'organization' && isOrgAdmin(resource.data.resourceId)) ||
        isAdmin();
      allow create: if true; // System can always create logs
      allow update, delete: if false; // Logs are immutable
    }
    
    // Performance Metrics
    match /performanceMetrics/{metricId} {
      allow read: if isAuthenticated() && 
        (resource.data.subjectType == 'agent' && 
          get(/databases/$(database)/documents/agents/$(resource.data.subjectId)).data.ownerType == 'user' && 
          get(/databases/$(database)/documents/agents/$(resource.data.subjectId)).data.ownerId == request.auth.uid) ||
        (resource.data.subjectType == 'agent' && 
          get(/databases/$(database)/documents/agents/$(resource.data.subjectId)).data.ownerType == 'organization' && 
          isOrgAdmin(get(/databases/$(database)/documents/agents/$(resource.data.subjectId)).data.ownerId)) ||
        (resource.data.subjectType == 'gateway' && 
          get(/databases/$(database)/documents/integrationGateways/$(resource.data.subjectId)).data.ownerType == 'user' && 
          get(/databases/$(database)/documents/integrationGateways/$(resource.data.subjectId)).data.ownerId == request.auth.uid) ||
        (resource.data.subjectType == 'gateway' && 
          get(/databases/$(database)/documents/integrationGateways/$(resource.data.subjectId)).data.ownerType == 'organization' && 
          isOrgAdmin(get(/databases/$(database)/documents/integrationGateways/$(resource.data.subjectId)).data.ownerId)) ||
        isAdmin();
      allow create: if true; // System can always create metrics
      allow update, delete: if isAdmin();
    }
  }
}


// Storage rules for AIXTIV SYMPHONY
// ================================
// Filename: storage.rules

rules_version = '2';
service firebase.storage {
  match /b/{bucket}/o {
    // Function to check if user is authenticated
    function isAuthenticated() {
      return request.auth != null;
    }
    
    // Function to check if user owns the document
    function isOwner(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }
    
    // Function to check if user has admin role
    function isAdmin() {
      return isAuthenticated() && request.auth.token.admin == true;
    }
    
    // User profile images
    match /users/{userId}/profile/{fileName} {
      allow read: if isAuthenticated();
      allow write: if isOwner(userId) || isAdmin();
    }
    
    // Organization images
    match /organizations/{orgId}/images/{fileName} {
      allow read: if isAuthenticated();
      allow write: if isAuthenticated() && 
        (exists(/databases/$(database)/documents/organizations/$(orgId)/members/$(request.auth.uid)) && 
         get(/databases/$(database)/documents/organizations/$(orgId)/members/$(request.auth.uid)).data.role == 'admin') ||
        isAdmin();
    }
    
    // Agent images
    match /agents/{agentId}/images/{fileName} {
      allow read: if isAuthenticated();
      allow write: if isAuthenticated() && 
        (get(/databases/$(database)/documents/agents/$(agentId)).data.ownerType == 'user' && 
         get(/databases/$(database)/documents/agents/$(agentId)).data.ownerId == request.auth.uid) ||
        (get(/databases/$(database)/documents/agents/$(agentId)).data.ownerType == 'organization' && 
         exists(/databases/$(database)/documents/organizations/$(get(/databases/$(database)/documents/agents/$(agentId)).data.ownerId)/members/$(request.auth.uid)) && 
         get(/databases/$(database)/documents/organizations/$(get(/databases/$(database)/documents/agents/$(agentId)).data.ownerId)/members/$(request.auth.uid)).data.role == 'admin') ||
        isAdmin();
    }
    
    // S2DO Storage
    match /s2do/{ownerType}/{ownerId}/{objectType}/{objectId} {
      allow read: if isAuthenticated() && 
        (ownerType == 'user' && ownerId == request.auth.uid) ||
        (ownerType == 'organization' && 
         exists(/databases/$(database)/documents/organizations/$(ownerId)/members/$(request.auth.uid))) ||
        exists(/databases/$(database)/documents/s2doObjects/$(objectId)) && 
        (get(/databases/$(database)/documents/s2doObjects/$(objectId)).data.permissions.publicAccess || 
         get(/databases/$(database)/documents/s2doObjects/$(objectId)).data.permissions.authorizedUsers.hasAny([request.auth.uid])) ||
        isAdmin();
      allow write: if isAuthenticated() && 
        (ownerType == 'user' && ownerId == request.auth.uid) ||
        (ownerType == 'organization' && 
         exists(/databases/$(database)/documents/organizations/$(ownerId)/members/$(request.auth.uid)) && 
         get(/databases/$(database)/documents/organizations/$(ownerId)/members/$(request.auth.uid)).data.role == 'admin') ||
        isAdmin();
    }
    
    // Conversation attachments
    match /conversations/{conversationId}/attachments/{fileName} {
      allow read: if isAuthenticated() && 
        exists(/databases/$(database)/documents/conversations/$(conversationId)/participants/user_$(request.auth.uid));
      allow write: if isAuthenticated() && 
        exists(/databases/$(database)/documents/conversations/$(conversationId)/participants/user_$(request.auth.uid));
    }
    
    // Public assets
    match /public/{fileName} {
      allow read: if true;
      allow write: if isAdmin();
    }
  }
}


// CI/CD Pipeline Configuration for GitLab CI
// =========================================
// Filename: .gitlab-ci.yml

stages:
  - test
  - build
  - deploy

variables:
  GCP_PROJECT_ID: "aixtiv-symphony"
  GCP_CLUSTER_NAME: "aixtiv-symphony-cluster"
  GCP_CLUSTER_ZONE: "us-central1-a"

# Testing stage
test:
  stage: test
  image: node:18-alpine
  script:
    - npm ci
    - npm run lint
    - npm test
  cache:
    paths:
      - node_modules/

# Build Docker images
build:
  stage: build
  image: google/cloud-sdk
  services:
    - docker:dind
  script:
    - echo $GCP_SERVICE_ACCOUNT_KEY > gcp-key.json
    - gcloud auth activate-service-account --key-file gcp-key.json
    - gcloud config set project $GCP_PROJECT_ID
    - gcloud auth configure-docker
    - docker build -t gcr.io/$GCP_PROJECT_ID/core-api:$CI_COMMIT_SHA -t gcr.io/$GCP_PROJECT_ID/core-api:latest .
    - docker push gcr.io/$GCP_PROJECT_ID/core-api:$CI_COMMIT_SHA
    - docker push gcr.io/$GCP_PROJECT_ID/core-api:latest
    - cd integration-gateways && docker build -t gcr.io/$GCP_PROJECT_ID/integration-gateways:$CI_COMMIT_SHA -t gcr.io/$GCP_PROJECT_ID/integration-gateways:latest .
    - docker push gcr.io/$GCP_PROJECT_ID/integration-gateways:$CI_COMMIT_SHA
    - docker push gcr.io/$GCP_PROJECT_ID/integration-gateways:latest
    - cd ../agent-orchestration && docker build -t gcr.io/$GCP_PROJECT_ID/agent-orchestration:$CI_COMMIT_SHA -t gcr.io/$GCP_PROJECT_ID/agent-orchestration:latest .
    - docker push gcr.io/$GCP_PROJECT_ID/agent-orchestration:$CI_COMMIT_SHA
    - docker push gcr.io/$GCP_PROJECT_ID/agent-orchestration:latest
    - cd ../frontend && docker build -t gcr.io/$GCP_PROJECT_ID/frontend:$CI_COMMIT_SHA -t gcr.io/$GCP_PROJECT_ID/frontend:latest .
    - docker push gcr.io/$GCP_PROJECT_ID/frontend:$CI_COMMIT_SHA
    - docker push gcr.io/$GCP_PROJECT_ID/frontend:latest
  only:
    - main
    - staging

# Deploy to GKE
deploy:
  stage: deploy
  image: google/cloud-sdk
  script:
    - echo $GCP_SERVICE_ACCOUNT_KEY > gcp-key.json
    - gcloud auth activate-service-account --key-file gcp-key.json
    - gcloud config set project $GCP_PROJECT_ID
    - gcloud container clusters get-credentials $GCP_CLUSTER_NAME --zone $GCP_CLUSTER_ZONE
    - kubectl apply -f kubernetes/core-deployment.yaml
    - kubectl apply -f kubernetes/core-service.yaml
    - kubectl apply -f kubernetes/gateway-deployment.yaml
    - kubectl apply -f kubernetes/agent-orchestration-deployment.yaml
    - kubectl apply -f kubernetes/frontend-deployment.yaml
    - kubectl apply -f kubernetes/ingress.yaml
    - kubectl apply -f kubernetes/configmaps.yaml
    - kubectl set image deployment/aixtiv-symphony-core core-api=gcr.io/$GCP_PROJECT_ID/core-api:$CI_COMMIT_SHA
    - kubectl set image deployment/aixtiv-symphony-gateways integration-gateways=gcr.io/$GCP_PROJECT_ID/integration-gateways:$CI_COMMIT_SHA
    - kubectl set image deployment/aixtiv-symphony-agent-orchestration agent-orchestration=gcr.io/$GCP_PROJECT_ID/agent-orchestration:$CI_COMMIT_SHA
    - kubectl set image deployment/aixtiv-symphony-frontend frontend=gcr.io/$GCP_PROJECT_ID/frontend:$CI_COMMIT_SHA
  only:
    - main
  when: manual
  environment:
    name: production
    url: https://app.aixtiv-symphony.com

# Deploy to staging
deploy_staging:
  stage: deploy
  image: google/cloud-sdk
  script:
    - echo $GCP_SERVICE_ACCOUNT_KEY > gcp-key.json
    - gcloud auth activate-service-account --key-file gcp-key.json
    - gcloud config set project $GCP_PROJECT_ID
    - gcloud container clusters get-credentials $GCP_CLUSTER_NAME-staging --zone $GCP_CLUSTER_ZONE
    - sed -i 's/app.aixtiv-symphony.com/staging.aixtiv-symphony.com/g' kubernetes/ingress.yaml
    - sed -i 's/api.aixtiv-symphony.com/api-staging.aixtiv-symphony.com/g' kubernetes/ingress.yaml
    - kubectl apply -f kubernetes/core-deployment.yaml
    - kubectl apply -f kubernetes/core-service.yaml
    - kubectl apply -f kubernetes/gateway-deployment.yaml
    - kubectl apply -f kubernetes/agent-orchestration-deployment.yaml
    - kubectl apply -f kubernetes/frontend-deployment.yaml
    - kubectl apply -f kubernetes/ingress.yaml
    - kubectl apply -f kubernetes/configmaps.yaml
    - kubectl set image deployment/aixtiv-symphony-core core-api=gcr.io/$GCP_PROJECT_ID/core-api:$CI_COMMIT_SHA
    - kubectl set image deployment/aixtiv-symphony-gateways integration-gateways=gcr.io/$GCP_PROJECT_ID/integration-gateways:$CI_COMMIT_SHA
    - kubectl set image deployment/aixtiv-symphony-agent-orchestration agent-orchestration=gcr.io/$GCP_PROJECT_ID/agent-orchestration:$CI_COMMIT_SHA
    - kubectl set image deployment/aixtiv-symphony-frontend frontend=gcr.io/$GCP_PROJECT_ID/frontend:$CI_COMMIT_SHA
  only:
    - staging
  environment:
    name: staging
    url: https://staging.aixtiv-symphony.com


// Environment setup script for local development
// ============================================
// Filename: scripts/setup-local-env.sh

#!/bin/bash

# Local development environment setup for AIXTIV SYMPHONY
# This script helps set up a local development environment for AIXTIV SYMPHONY

echo "Setting up local development environment for AIXTIV SYMPHONY..."

# Check if Node.js is installed
if ! command -v node &> /dev/null; then
    echo "Node.js is not installed. Please install Node.js 18 or higher."
    exit 1
fi

# Check if npm is installed
if ! command -v npm &> /dev/null; then
    echo "npm is not installed. Please install npm."
    exit 1
fi

# Check if Firebase CLI is installed
if ! command -v firebase &> /dev/null; then
    echo "Firebase CLI is not installed. Installing..."
    npm install -g firebase-tools
fi

# Check if Docker is installed
if ! command -v docker &> /dev/null; then
    echo "Docker is not installed. Please install Docker to run containerized services."
    echo "Visit https://docs.docker.com/get-docker/ for installation instructions."
fi

# Create .env file if it doesn't exist
if [ ! -f .env ]; then
    echo "Creating .env file..."
    cat > .env << EOL
# Firebase Configuration
FIREBASE_API_KEY=your-api-key
FIREBASE_AUTH_DOMAIN=your-project.firebaseapp.com
FIREBASE_PROJECT_ID=your-project-id
FIREBASE_STORAGE_BUCKET=your-project.appspot.com
FIREBASE_MESSAGING_SENDER_ID=your-sender-id
FIREBASE_APP_ID=your-app-id
FIREBASE_MEASUREMENT_ID=your-measurement-id

# Pinecone Configuration
PINECONE_API_KEY=your-pinecone-api-key
PINECONE_ENVIRONMENT=us-west1-gcp

# Blockchain Configuration
ETHEREUM_RPC_URL=https://eth-goerli.alchemyapi.io/v2/your-api-key
AIXTIV_PRIVATE_KEY=your-private-key
NFT_CONTRACT_ADDRESS=0x1234567890123456789012345678901234567890
VERIFICATION_CONTRACT_ADDRESS=0x2345678901234567890123456789012345678901
SUBSCRIPTION_CONTRACT_ADDRESS=0x3456789012345678901234567890123456789012

# IPFS Configuration
INFURA_IPFS_PROJECT_ID=your-infura-project-id
INFURA_IPFS_PROJECT_SECRET=your-infura-project-secret

# Integration Gateway Configuration
ENCRYPTION_KEY_BASE=your-encryption-key-base

# Development Server Ports
CORE_API_PORT=8080
GATEWAY_PORT=8081
AGENT_ORCHESTRATION_PORT=8082
FRONTEND_PORT=3000
EOL
    echo "Created .env file. Please update it with your actual values."
fi

# Install dependencies
echo "Installing dependencies..."
npm ci

# Setup Firebase emulators
echo "Setting up Firebase emulators..."
firebase setup:emulators:firestore
firebase setup:emulators:storage

# Start development environment
echo "Starting development environment..."
npm run dev:setup

echo "Local development environment setup complete!"
echo "Run 'npm run dev' to start the development servers."
echo "Visit http://localhost:3000 to access the application."
