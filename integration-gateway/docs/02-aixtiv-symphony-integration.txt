/**
 * AIXTIV Symphony Integration Layer
 * 
 * This module provides the integration layer between all AIXTIV products:
 * - AIXTIV Symphony (core platform)
 * - Bid Suite (opportunity management)
 * - Q4D-Lenz (quantum perspective technology)
 * - Dream Commander (strategic intelligence)
 * - Dr. Match (LinkedIn integration)
 * - Dr. Memoria (brand diagnostics)
 * - Dr. Lucy Automation (CI/CD integration)
 */

const functions = require('firebase-functions');
const admin = require('firebase-admin');
const express = require('express');
const cors = require('cors');

// Initialize Firebase if not already initialized
if (!admin.apps.length) {
  admin.initializeApp();
}

const db = admin.firestore();

/**
 * AIXTIV Integration Core
 * 
 * Central coordination system for all AIXTIV products
 */
class AIXTIVIntegrationCore {
  constructor(config = {}) {
    this.config = {
      enabledProducts: {
        symphony: true,
        bidSuite: config.enableBidSuite !== false,
        q4dLenz: config.enableQ4DLenz !== false,
        dreamCommander: config.enableDreamCommander !== false,
        drMatch: config.enableDrMatch !== false,
        drMemoria: config.enableDrMemoria !== false,
        drLucy: config.enableDrLucy !== false
      },
      ...config
    };
    
    // Database collections
    this.collections = {
      ownerSubscribers: db.collection('ownerSubscribers'),
      productActivations: db.collection('productActivations'),
      integrationLogs: db.collection('integrationLogs'),
      dataFlows: db.collection('dataFlows')
    };
    
    // Initialize product connectors
    if (this.config.enabledProducts.symphony) {
      this.symphonyConnector = new SymphonyConnector(this);
    }
    
    if (this.config.enabledProducts.bidSuite) {
      this.bidSuiteConnector = new BidSuiteConnector(this);
    }
    
    if (this.config.enabledProducts.q4dLenz) {
      this.q4dLenzConnector = new Q4DLenzConnector(this);
    }
    
    if (this.config.enabledProducts.dreamCommander) {
      this.dreamCommanderConnector = new DreamCommanderConnector(this);
    }
    
    if (this.config.enabledProducts.drMatch) {
      this.drMatchConnector = new DrMatchConnector(this);
    }
    
    if (this.config.enabledProducts.drMemoria) {
      this.drMemoriaConnector = new DrMemoriaConnector(this);
    }
    
    if (this.config.enabledProducts.drLucy) {
      this.drLucyConnector = new DrLucyConnector(this);
    }
  }
  
  /**
   * Initialize the integration core
   * 
   * @returns {Promise<Object>} Initialization status
   */
  async initialize() {
    try {
      console.log('Initializing AIXTIV Integration Core...');
      
      // Initialize each enabled product connector
      const initPromises = [];
      
      if (this.symphonyConnector) {
        initPromises.push(this.symphonyConnector.initialize());
      }
      
      if (this.bidSuiteConnector) {
        initPromises.push(this.bidSuiteConnector.initialize());
      }
      
      if (this.q4dLenzConnector) {
        initPromises.push(this.q4dLenzConnector.initialize());
      }
      
      if (this.dreamCommanderConnector) {
        initPromises.push(this.dreamCommanderConnector.initialize());
      }
      
      if (this.drMatchConnector) {
        initPromises.push(this.drMatchConnector.initialize());
      }
      
      if (this.drMemoriaConnector) {
        initPromises.push(this.drMemoriaConnector.initialize());
      }
      
      if (this.drLucyConnector) {
        initPromises.push(this.drLucyConnector.initialize());
      }
      
      await Promise.all(initPromises);
      
      console.log('AIXTIV Integration Core initialized successfully');
      
      return {
        status: 'initialized',
        enabledProducts: this.config.enabledProducts
      };
    } catch (error) {
      console.error('Error initializing AIXTIV Integration Core:', error);
      throw error;
    }
  }
  
  /**
   * Get available products for an owner-subscriber
   * 
   * @param {string} ownerSubscriberId Owner-subscriber ID
   * @returns {Promise<Object>} Available products
   */
  async getAvailableProducts(ownerSubscriberId) {
    try {
      // Get owner-subscriber record
      const owner = await this.collections.ownerSubscribers.doc(ownerSubscriberId).get();
      
      if (!owner.exists) {
        throw new Error(`Owner-subscriber ${ownerSubscriberId} not found`);
      }
      
      const ownerData = owner.data();
      
      // Get product activations
      const activations = await this.collections.productActivations
        .where('ownerSubscriberId', '==', ownerSubscriberId)
        .get();
      
      const activatedProducts = {};
      
      activations.forEach(doc => {
        const data = doc.data();
        activatedProducts[data.productId] = {
          id: doc.id,
          status: data.status,
          activatedAt: data.activatedAt ? data.activatedAt.toDate().toISOString() : null,
          expiresAt: data.expiresAt ? data.expiresAt.toDate().toISOString() : null
        };
      });
      
      return {
        ownerSubscriberId,
        ownerName: ownerData.name,
        subscription: ownerData.subscription || 'basic',
        activatedProducts,
        availableProducts: this._getAvailableProductsList(ownerData.subscription, activatedProducts)
      };
    } catch (error) {
      console.error('Error getting available products:', error);
      throw error;
    }
  }
  
  /**
   * Get list of available products based on subscription
   * 
   * @param {string} subscription Subscription level
   * @param {Object} activatedProducts Currently activated products
   * @returns {Object} Available products list
   * @private
   */
  _getAvailableProductsList(subscription, activatedProducts) {
    const products = {
      symphony: {
        id: 'symphony',
        name: 'AIXTIV Symphony',
        description: 'Your Personal Growth Command Center',
        included: ['basic', 'professional', 'enterprise'].includes(subscription),
        activated: !!activatedProducts.symphony
      },
      bidSuite: {
        id: 'bidSuite',
        name: 'Bid Suite',
        description: 'Your Automated Opportunity Pipeline',
        included: ['professional', 'enterprise'].includes(subscription),
        activated: !!activatedProducts.bidSuite
      },
      q4dLenz: {
        id: 'q4dLenz',
        name: 'Q4D-Lenz',
        description: 'Quantum 4-Dimensional Perspective Technology',
        included: ['basic', 'professional', 'enterprise'].includes(subscription),
        activated: !!activatedProducts.q4dLenz
      },
      dreamCommander: {
        id: 'dreamCommander',
        name: 'Dream Commander',
        description: 'Strategic Intelligence System',
        included: ['professional', 'enterprise'].includes(subscription),
        activated: !!activatedProducts.dreamCommander
      },
      drMatch: {
        id: 'drMatch',
        name: 'Dr. Match',
        description: 'LinkedIn Professional Network Analysis',
        included: ['professional', 'enterprise'].includes(subscription),
        activated: !!activatedProducts.drMatch
      },
      drMemoria: {
        id: 'drMemoria',
        name: 'Dr. Memoria',
        description: 'Brand Diagnostic and Building System',
        included: ['professional', 'enterprise'].includes(subscription),
        activated: !!activatedProducts.drMemoria
      },
      drLucy: {
        id: 'drLucy',
        name: 'Dr. Lucy Automation',
        description: 'CI/CD Information Flow Integration',
        included: ['enterprise'].includes(subscription),
        activated: !!activatedProducts.drLucy
      }
    };
    
    return products;
  }
  
  /**
   * Activate a product for an owner-subscriber
   * 
   * @param {string} ownerSubscriberId Owner-subscriber ID
   * @param {string} productId Product ID to activate
   * @returns {Promise<Object>} Activation result
   */
  async activateProduct(ownerSubscriberId, productId) {
    try {
      // Validate product ID
      if (!['symphony', 'bidSuite', 'q4dLenz', 'dreamCommander', 'drMatch', 'drMemoria', 'drLucy'].includes(productId)) {
        throw new Error(`Invalid product ID: ${productId}`);
      }
      
      // Check if owner-subscriber exists
      const owner = await this.collections.ownerSubscribers.doc(ownerSubscriberId).get();
      
      if (!owner.exists) {
        throw new Error(`Owner-subscriber ${ownerSubscriberId} not found`);
      }
      
      const ownerData = owner.data();
      
      // Check if product is available for this subscription
      const availableProducts = this._getAvailableProductsList(ownerData.subscription, {});
      
      if (!availableProducts[productId].included) {
        throw new Error(`Product ${productId} is not available for ${ownerData.subscription} subscription`);
      }
      
      // Check if product is already activated
      const existingActivation = await this.collections.productActivations
        .where('ownerSubscriberId', '==', ownerSubscriberId)
        .where('productId', '==', productId)
        .where('status', '==', 'active')
        .limit(1)
        .get();
      
      if (!existingActivation.empty) {
        return {
          status: 'already_activated',
          activationId: existingActivation.docs[0].id,
          productId,
          ownerSubscriberId
        };
      }
      
      // Create activation record
      const activationData = {
        ownerSubscriberId,
        productId,
        status: 'active',
        activatedAt: admin.firestore.FieldValue.serverTimestamp(),
        expiresAt: null // No expiration for now
      };
      
      const activationRef = await this.collections.productActivations.add(activationData);
      
      // Initialize the product for this owner-subscriber
      await this._initializeProductForOwner(productId, ownerSubscriberId);
      
      return {
        status: 'activated',
        activationId: activationRef.id,
        productId,
        ownerSubscriberId,
        activatedAt: new Date().toISOString()
      };
    } catch (error) {
      console.error('Error activating product:', error);
      throw error;
    }
  }
  
  /**
   * Initialize a product for an owner-subscriber
   * 
   * @param {string} productId Product ID
   * @param {string} ownerSubscriberId Owner-subscriber ID
   * @returns {Promise<void>}
   * @private
   */
  async _initializeProductForOwner(productId, ownerSubscriberId) {
    try {
      switch (productId) {
        case 'symphony':
          if (this.symphonyConnector) {
            await this.symphonyConnector.initializeForOwner(ownerSubscriberId);
          }
          break;
        
        case 'bidSuite':
          if (this.bidSuiteConnector) {
            await this.bidSuiteConnector.initializeForOwner(ownerSubscriberId);
          }
          break;
        
        case 'q4dLenz':
          if (this.q4dLenzConnector) {
            await this.q4dLenzConnector.initializeForOwner(ownerSubscriberId);
          }
          break;
        
        case 'dreamCommander':
          if (this.dreamCommanderConnector) {
            await this.dreamCommanderConnector.initializeForOwner(ownerSubscriberId);
          }
          break;
        
        case 'drMatch':
          if (this.drMatchConnector) {
            await this.drMatchConnector.initializeForOwner(ownerSubscriberId);
          }
          break;
        
        case 'drMemoria':
          if (this.drMemoriaConnector) {
            await this.drMemoriaConnector.initializeForOwner(ownerSubscriberId);
          }
          break;
        
        case 'drLucy':
          if (this.drLucyConnector) {
            await this.drLucyConnector.initializeForOwner(ownerSubscriberId);
          }
          break;
      }
    } catch (error) {
      console.error(`Error initializing ${productId} for owner ${ownerSubscriberId}:`, error);
      throw error;
    }
  }
  
  /**
   * Create a new data flow between products
   * 
   * @param {string} sourceProductId Source product ID
   * @param {string} targetProductId Target product ID
   * @param {string} ownerSubscriberId Owner-subscriber ID
   * @param {Object} flowConfig Flow configuration
   * @returns {Promise<Object>} Data flow creation result
   */
  async createDataFlow(sourceProductId, targetProductId, ownerSubscriberId, flowConfig = {}) {
    try {
      // Validate product IDs
      const validProductIds = ['symphony', 'bidSuite', 'q4dLenz', 'dreamCommander', 'drMatch', 'drMemoria', 'drLucy'];
      
      if (!validProductIds.includes(sourceProductId)) {
        throw new Error(`Invalid source product ID: ${sourceProductId}`);
      }
      
      if (!validProductIds.includes(targetProductId)) {
        throw new Error(`Invalid target product ID: ${targetProductId}`);
      }
      
      // Check if both products are activated
      const activations = await this.collections.productActivations
        .where('ownerSubscriberId', '==', ownerSubscriberId)
        .where('status', '==', 'active')
        .get();
      
      const activatedProducts = new Set();
      
      activations.forEach(doc => {
        activatedProducts.add(doc.data().productId);
      });
      
      if (!activatedProducts.has(sourceProductId)) {
        throw new Error(`Source product ${sourceProductId} is not activated for owner ${ownerSubscriberId}`);
      }
      
      if (!activatedProducts.has(targetProductId)) {
        throw new Error(`Target product ${targetProductId} is not activated for owner ${ownerSubscriberId}`);
      }
      
      // Create data flow record
      const flowData = {
        ownerSubscriberId,
        sourceProductId,
        targetProductId,
        config: flowConfig,
        status: 'active',
        createdAt: admin.firestore.FieldValue.serverTimestamp(),
        lastSyncAt: null
      };
      
      const flowRef = await this.collections.dataFlows.add(flowData);
      
      // Initialize the data flow
      await this._initializeDataFlow(flowRef.id, sourceProductId, targetProductId, ownerSubscriberId, flowConfig);
      
      return {
        status: 'created',
        flowId: flowRef.id,
        sourceProductId,
        targetProductId,
        ownerSubscriberId,
        createdAt: new Date().toISOString()
      };
    } catch (error) {
      console.error('Error creating data flow:', error);
      throw error;
    }
  }
  
  /**
   * Initialize a data flow between products
   * 
   * @param {string} flowId Flow ID
   * @param {string} sourceProductId Source product ID
   * @param {string} targetProductId Target product ID
   * @param {string} ownerSubscriberId Owner-subscriber ID
   * @param {Object} flowConfig Flow configuration
   * @returns {Promise<void>}
   * @private
   */
  async _initializeDataFlow(flowId, sourceProductId, targetProductId, ownerSubscriberId, flowConfig) {
    try {
      // Get source and target connectors
      const sourceConnector = this._getConnectorForProduct(sourceProductId);
      const targetConnector = this._getConnectorForProduct(targetProductId);
      
      if (!sourceConnector) {
        throw new Error(`Connector for source product ${sourceProductId} not found`);
      }
      
      if (!targetConnector) {
        throw new Error(`Connector for target product ${targetProductId} not found`);
      }
      
      // Initialize source side of flow
      await sourceConnector.initializeDataFlowSource(flowId, targetProductId, ownerSubscriberId, flowConfig);
      
      // Initialize target side of flow
      await targetConnector.initializeDataFlowTarget(flowId, sourceProductId, ownerSubscriberId, flowConfig);
      
      // Update flow status
      await this.collections.dataFlows.doc(flowId).update({
        initialized: true,
        status: 'active',
        updatedAt: admin.firestore.FieldValue.serverTimestamp()
      });
    } catch (error) {
      console.error(`Error initializing data flow between ${sourceProductId} and ${targetProductId}:`, error);
      throw error;
    }
  }
  
  /**
   * Get connector for a product
   * 
   * @param {string} productId Product ID
   * @returns {Object|null} Product connector
   * @private
   */
  _getConnectorForProduct(productId) {
    switch (productId) {
      case 'symphony':
        return this.symphonyConnector;
      case 'bidSuite':
        return this.bidSuiteConnector;
      case 'q4dLenz':
        return this.q4dLenzConnector;
      case 'dreamCommander':
        return this.dreamCommanderConnector;
      case 'drMatch':
        return this.drMatchConnector;
      case 'drMemoria':
        return this.drMemoriaConnector;
      case 'drLucy':
        return this.drLucyConnector;
      default:
        return null;
    }
  }
}

/**
 * Base Product Connector Class
 * 
 * Base class for all product connectors
 */
class BaseProductConnector {
  constructor(core, productId) {
    this.core = core;
    this.productId = productId;
  }
  
  /**
   * Initialize the product connector
   * 
   * @returns {Promise<void>}
   */
  async initialize() {
    console.log(`Initializing ${this.productId} connector...`);
  }
  
  /**
   * Initialize the product for an owner-subscriber
   * 
   * @param {string} ownerSubscriberId Owner-subscriber ID
   * @returns {Promise<void>}
   */
  async initializeForOwner(ownerSubscriberId) {
    console.log(`Initializing ${this.productId} for owner ${ownerSubscriberId}...`);
  }
  
  /**
   * Initialize as source for a data flow
   * 
   * @param {string} flowId Flow ID
   * @param {string} targetProductId Target product ID
   * @param {string} ownerSubscriberId Owner-subscriber ID
   * @param {Object} flowConfig Flow configuration
   * @returns {Promise<void>}
   */
  async initializeDataFlowSource(flowId, targetProductId, ownerSubscriberId, flowConfig) {
    console.log(`Initializing ${this.productId} as source for flow ${flowId} to ${targetProductId}...`);
  }
  
  /**
   * Initialize as target for a data flow
   * 
   * @param {string} flowId Flow ID
   * @param {string} sourceProductId Source product ID
   * @param {string} ownerSubscriberId Owner-subscriber ID
   * @param {Object} flowConfig Flow configuration
   * @returns {Promise<void>}
   */
  async initializeDataFlowTarget(flowId, sourceProductId, ownerSubscriberId, flowConfig) {
    console.log(`Initializing ${this.productId} as target for flow ${flowId} from ${sourceProductId}...`);
  }
}

/**
 * Symphony Connector
 * 
 * Connector for AIXTIV Symphony
 */
class SymphonyConnector extends BaseProductConnector {
  constructor(core) {
    super(core, 'symphony');
  }
  
  // Override methods as needed for Symphony-specific functionality
}

/**
 * Bid Suite Connector
 * 
 * Connector for Bid Suite
 */
class BidSuiteConnector extends BaseProductConnector {
  constructor(core) {
    super(core, 'bidSuite');
  }
  
  // Override methods as needed for Bid Suite-specific functionality
}

/**
 * Q4D-Lenz Connector
 * 
 * Connector for Q4D-Lenz
 */
class Q4DLenzConnector extends BaseProductConnector {
  constructor(core) {
    super(core, 'q4dLenz');
  }
  
  // Override methods as needed for Q4D-Lenz-specific functionality
}

/**
 * Dream Commander Connector
 * 
 * Connector for Dream Commander
 */
class DreamCommanderConnector extends BaseProductConnector {
  constructor(core) {
    super(core, 'dreamCommander');
  }
  
  // Override methods as needed for Dream Commander-specific functionality
}

/**
 * Dr. Match Connector
 * 
 * Connector for Dr. Match LinkedIn App
 */
class DrMatchConnector extends BaseProductConnector {
  constructor(core) {
    super(core, 'drMatch');
  }
  
  // Override methods as needed for Dr. Match-specific functionality
}

/**
 * Dr. Memoria Connector
 * 
 * Connector for Dr. Memoria Brand Diagnostic
 */
class DrMemoriaConnector extends BaseProductConnector {
  constructor(core) {
    super(core, 'drMemoria');
  }
  
  // Override methods as needed for Dr. Memoria-specific functionality
}

/**
 * Dr. Lucy Connector
 * 
 * Connector for Dr. Lucy Automation
 */
class DrLucyConnector extends BaseProductConnector {
  constructor(core) {
    super(core, 'drLucy');
  }
  
  // Override methods as needed for Dr. Lucy-specific functionality
}

// Create Express API for Integration
const app = express();
app.use(cors({ origin: true }));
app.use(express.json());

/**
 * Create and export Integration API
 * 
 * @param {Object} config Configuration options
 * @returns {Object} Express app and core service
 */
function createIntegrationApi(config = {}) {
  // Initialize the integration core
  const integrationCore = new AIXTIVIntegrationCore(config);
  
  // Initialize middleware
  app.use((req, res, next) => {
    req.integrationCore = integrationCore;
    next();
  });
  
  // Define routes
  app.get('/health', (req, res) => {
    res.status(200).json({
      status: 'operational',
      timestamp: new Date().toISOString()
    });
  });
  
  // Product Activation Routes
  app.get('/products/:ownerSubscriberId', async (req, res) => {
    try {
      const { ownerSubscriberId } = req.params;
      
      const products = await req.integrationCore.getAvailableProducts(ownerSubscriberId);
      
      res.status(200).json(products);
    } catch (error) {
      console.error('Error getting products:', error);
      res.status(500).json({ error: error.message });
    }
  });
  
  app.post('/products/:ownerSubscriberId/activate', async (req, res) => {
    try {
      const { ownerSubscriberId } = req.params;
      const { productId } = req.body;
      
      if (!productId) {
        return res.status(400).json({ error: 'Product ID is required' });
      }
      
      const result = await req.integrationCore.activateProduct(ownerSubscriberId, productId);
      
      res.status(200).json(result);
    } catch (error) {
      console.error('Error activating product:', error);
      res.status(500).json({ error: error.message });
    }
  });
  
  // Data Flow Routes
  app.post('/flows', async (req, res) => {
    try {
      const { sourceProductId, targetProductId, ownerSubscriberId, flowConfig } = req.body;
      
      if (!sourceProductId || !targetProductId || !ownerSubscriberId) {
        return res.status(400).json({ error: 'Source product, target product, and owner-subscriber IDs are required' });
      }
      
      const result = await req.integrationCore.createDataFlow(
        sourceProductId,
        targetProductId,
        ownerSubscriberId,
        flowConfig || {}
      );
      
      res.status(201).json(result);
    } catch (error) {
      console.error('Error creating data flow:', error);
      res.status(500).json({ error: error.message });
    }
  });
  
  app.get('/flows/:ownerSubscriberId', async (req, res) => {
    try {
      const { ownerSubscriberId } = req.params;
      
      const snapshot = await integrationCore.collections.dataFlows
        .where('ownerSubscriberId', '==', ownerSubscriberId)
        .get();
      
      const flows = snapshot.docs.map(doc => ({
        id: doc.id,
        ...doc.data(),
        createdAt: doc.data().createdAt ? doc.data().createdAt.toDate().toISOString() : null,
        lastSyncAt: doc.data().lastSyncAt ? doc.data().lastSyncAt.toDate().toISOString() : null
      }));
      
      res.status(200).json(flows);
    } catch (error) {
      console.error('Error getting data flows:', error);
      res.status(500).json({ error: error.message });
    }
  });
  
  // Symphony Integration Routes
  app.post('/symphony/:ownerSubscriberId/launch-bid-suite', async (req, res) => {
    try {
      const { ownerSubscriberId } = req.params;
      
      // Check if owner has Bid Suite activated
      const products = await req.integrationCore.getAvailableProducts(ownerSubscriberId);
      
      if (!products.activatedProducts.bidSuite) {
        return res.status(403).json({ error: 'Bid Suite is not activated for this owner-subscriber' });
      }
      
      // Get Bid Suite data
      const bidSuiteData = await req.integrationCore.bidSuiteConnector.getDataForSymphony(ownerSubscriberId);
      
      res.status(200).json({
        status: 'success',
        ownerSubscriberId,
        bidSuiteData
      });
    } catch (error) {
      console.error('Error launching Bid Suite from Symphony:', error);
      res.status(500).json({ error: error.message });
    }
  });
  
  // Initialize the core on startup
  integrationCore.initialize().catch(error => {
    console.error('Failed to initialize integration core:', error);
  });
  
  return {
    app,
    core: integrationCore
  };
}

// Export the Integration API and classes
module.exports = {
  AIXTIVIntegrationCore,
  SymphonyConnector,
  BidSuiteConnector,
  Q4DLenzConnector,
  DreamCommanderConnector,
  DrMatchConnector,
  DrMemoriaConnector,
  DrLucyConnector,
  createIntegrationApi
};
