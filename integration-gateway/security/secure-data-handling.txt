// src/utils/security/SecureDataHandler.ts

import * as crypto from 'crypto';

/**
 * Encryption algorithm options
 */
export enum EncryptionAlgorithm {
  AES_256_GCM = 'aes-256-gcm',
  AES_256_CBC = 'aes-256-cbc',
  AES_192_GCM = 'aes-192-gcm',
  AES_192_CBC = 'aes-192-cbc'
}

/**
 * Hash algorithm options
 */
export enum HashAlgorithm {
  SHA256 = 'sha256',
  SHA384 = 'sha384',
  SHA512 = 'sha512',
  BLAKE2B512 = 'blake2b512'
}

/**
 * Encryption mode
 */
export enum EncryptionMode {
  GCM = 'gcm',
  CBC = 'cbc'
}

/**
 * Encrypted data structure
 */
export interface EncryptedData {
  iv: string;         // Initialization vector (hex encoded)
  encryptedData: string; // Encrypted data (base64 encoded)
  authTag?: string;   // Authentication tag for GCM mode (hex encoded)
  algorithm: string;  // Algorithm used
  keyId?: string;     // Identifier for the key used (for key rotation)
}

/**
 * Key derivation options
 */
export interface KeyDerivationOptions {
  iterations: number;
  keyLength: number;
  salt: Buffer | string;
  digest: string;
}

/**
 * Configuration for the secure data handler
 */
export interface SecureDataHandlerConfig {
  masterKey: string | Buffer;
  algorithm?: EncryptionAlgorithm;
  keyDerivation?: KeyDerivationOptions;
  enableKeyRotation?: boolean;
  rotationInterval?: number; // milliseconds
}

/**
 * Data sensitivity level
 */
export enum DataSensitivityLevel {
  PUBLIC = 'public',
  INTERNAL = 'internal',
  CONFIDENTIAL = 'confidential',
  RESTRICTED = 'restricted'
}

/**
 * Secure data handling class for encryption, decryption, and other security operations
 */
export class SecureDataHandler {
  private static instance: SecureDataHandler;
  private masterKey: Buffer;
  private derivedKeys: Map<string, Buffer>;
  private currentKeyId: string;
  private algorithm: EncryptionAlgorithm;
  private keyDerivationOptions: KeyDerivationOptions;
  private enableKeyRotation: boolean;
  private keyRotationTimer?: NodeJS.Timeout;
  
  private constructor(config: SecureDataHandlerConfig) {
    // Initialize with master key
    this.masterKey = typeof config.masterKey === 'string'
      ? Buffer.from(config.masterKey, 'hex')
      : config.masterKey;
    
    this.algorithm = config.algorithm || EncryptionAlgorithm.AES_256_GCM;
    this.enableKeyRotation = config.enableKeyRotation || false;
    this.derivedKeys = new Map();
    
    // Default key derivation options
    this.keyDerivationOptions = config.keyDerivation || {
      iterations: 10000,
      keyLength: 32, // 256 bits
      salt: crypto.randomBytes(16),
      digest: 'sha256'
    };
    
    // Derive initial key
    this.currentKeyId = this.generateKeyId();
    this.deriveKey(this.currentKeyId);
    
    // Set up key rotation if enabled
    if (this.enableKeyRotation && config.rotationInterval && config.rotationInterval > 0) {
      this.setupKeyRotation(config.rotationInterval);
    }
  }
  
  /**
   * Get singleton instance
   */
  static getInstance(config?: SecureDataHandlerConfig): SecureDataHandler {
    if (!SecureDataHandler.instance) {
      if (!config) {
        throw new Error('Configuration required for initial SecureDataHandler setup');
      }
      SecureDataHandler.instance = new SecureDataHandler(config);
    }
    return SecureDataHandler.instance;
  }
  
  /**
   * Encrypt data with the current key
   */
  encrypt(data: string | object, keyId?: string): EncryptedData {
    // Convert object to string if needed
    const dataString = typeof data === 'object' ? JSON.stringify(data) : data;
    
    // Use specified key or current key
    const actualKeyId = keyId || this.currentKeyId;
    const key = this.getKey(actualKeyId);
    
    // Generate initialization vector
    const iv = crypto.randomBytes(16);
    
    // Determine if using GCM or CBC mode
    const isGCM = this.algorithm.includes('gcm');
    
    let cipher: crypto.CipherGCM | crypto.Cipher;
    if (isGCM) {
      cipher = crypto.createCipheriv(
        this.algorithm,
        key,
        iv
      ) as crypto.CipherGCM;
    } else {
      cipher = crypto.createCipheriv(
        this.algorithm,
        key,
        iv
      );
    }
    
    // Encrypt the data
    let encryptedData = cipher.update(dataString, 'utf8', 'base64');
    encryptedData += cipher.final('base64');
    
    // For GCM mode, get authentication tag
    const result: EncryptedData = {
      iv: iv.toString('hex'),
      encryptedData,
      algorithm: this.algorithm,
      keyId: actualKeyId
    };
    
    if (isGCM) {
      result.authTag = (cipher as crypto.CipherGCM).getAuthTag().toString('hex');
    }
    
    return result;
  }
  
  /**
   * Decrypt data
   */
  decrypt(encryptedData: EncryptedData): string {
    const keyId = encryptedData.keyId || this.currentKeyId;
    const key = this.getKey(keyId);
    
    const iv = Buffer.from(encryptedData.iv, 'hex');
    const isGCM = encryptedData.algorithm.includes('gcm');
    
    let decipher: crypto.DecipherGCM | crypto.Decipher;
    if (isGCM) {
      decipher = crypto.createDecipheriv(
        encryptedData.algorithm,
        key,
        iv
      ) as crypto.DecipherGCM;
      
      if (encryptedData.authTag) {
        (decipher as crypto.DecipherGCM).setAuthTag(Buffer.from(encryptedData.authTag, 'hex'));
      } else {
        throw new Error('Authentication tag is required for GCM mode');
      }
    } else {
      decipher = crypto.createDecipheriv(
        encryptedData.algorithm,
        key,
        iv
      );
    }
    
    let decrypted = decipher.update(encryptedData.encryptedData, 'base64', 'utf8');
    decrypted += decipher.final('utf8');
    
    return decrypted;
  }
  
  /**
   * Decrypt data and parse as JSON
   */
  decryptJSON<T = any>(encryptedData: EncryptedData): T {
    const decryptedString = this.decrypt(encryptedData);
    return JSON.parse(decryptedString) as T;
  }
  
  /**
   * Hash a string using the specified algorithm
   */
  hash(data: string, algorithm: HashAlgorithm = HashAlgorithm.SHA256): string {
    const hash = crypto.createHash(algorithm);
    hash.update(data);
    return hash.digest('hex');
  }
  
  /**
   * Create an HMAC signature
   */
  createHMAC(
    data: string,
    secret: string | Buffer,
    algorithm: HashAlgorithm = HashAlgorithm.SHA256
  ): string {
    const hmac = crypto.createHmac(algorithm, secret);
    hmac.update(data);
    return hmac.digest('hex');
  }
  
  /**
   * Verify an HMAC signature
   */
  verifyHMAC(
    data: string,
    signature: string,
    secret: string | Buffer,
    algorithm: HashAlgorithm = HashAlgorithm.SHA256
  ): boolean {
    const expectedSignature = this.createHMAC(data, secret, algorithm);
    return crypto.timingSafeEqual(
      Buffer.from(signature, 'hex'),
      Buffer.from(expectedSignature, 'hex')
    );
  }
  
  /**
   * Generate a random token
   */
  generateToken(
    length: number = 32,
    encoding: BufferEncoding = 'hex'
  ): string {
    return crypto.randomBytes(length).toString(encoding);
  }
  
  /**
   * Generate a secure random password
   */
  generatePassword(
    options: {
      length?: number;
      includeUppercase?: boolean;
      includeLowercase?: boolean;
      includeNumbers?: boolean;
      includeSpecial?: boolean;
    } = {}
  ): string {
    const length = options.length || 16;
    const includeUppercase = options.includeUppercase !== false;
    const includeLowercase = options.includeLowercase !== false;
    const includeNumbers = options.includeNumbers !== false;
    const includeSpecial = options.includeSpecial !== false;
    
    let charset = '';
    if (includeLowercase) charset += 'abcdefghijklmnopqrstuvwxyz';
    if (includeUppercase) charset += 'ABCDEFGHIJKLMNOPQRSTUVWXYZ';
    if (includeNumbers) charset += '0123456789';
    if (includeSpecial) charset += '!@#$%^&*()_+-=[]{}|;:,.<>?';
    
    if (charset.length === 0) {
      throw new Error('At least one character set must be included');
    }
    
    let password = '';
    const randomValues = crypto.randomBytes(length);
    
    for (let i = 0; i < length; i++) {
      password += charset.charAt(randomValues[i] % charset.length);
    }
    
    return password;
  }
  
  /**
   * Securely compare two strings in constant time
   */
  secureCompare(a: string, b: string): boolean {
    try {
      return crypto.timingSafeEqual(Buffer.from(a), Buffer.from(b));
    } catch (error) {
      // If buffers are not the same length, timingSafeEqual throws an error
      return false;
    }
  }
  
  /**
   * Generate a unique key ID
   */
  private generateKeyId(): string {
    return `key_${Date.now()}_${crypto.randomBytes(4).toString('hex')}`;
  }
  
  /**
   * Derive a key from the master key
   */
  private deriveKey(keyId: string): Buffer {
    // Use a combination of keyId and salt for derivation
    const keyIdBuffer = Buffer.from(keyId);
    
    // If salt is a string, convert to Buffer
    const salt = typeof this.keyDerivationOptions.salt === 'string'
      ? Buffer.from(this.keyDerivationOptions.salt, 'hex')
      : this.keyDerivationOptions.salt;
    
    // Derive key using PBKDF2
    const derivedKey = crypto.pbkdf2Sync(
      this.masterKey,
      Buffer.concat([keyIdBuffer, salt]),
      this.keyDerivationOptions.iterations,
      this.keyDerivationOptions.keyLength,
      this.keyDerivationOptions.digest
    );
    
    this.derivedKeys.set(keyId, derivedKey);
    return derivedKey;
  }
  
  /**
   * Get a derived key by ID
   */
  private getKey(keyId: string): Buffer {
    let key = this.derivedKeys.get(keyId);
    
    if (!key) {
      // If key not found, attempt to derive it
      key = this.deriveKey(keyId);
    }
    
    return key;
  }
  
  /**
   * Set up key rotation
   */
  private setupKeyRotation(interval: number): void {
    this.keyRotationTimer = setInterval(() => {
      this.rotateKey();
    }, interval);
  }
  
  /**
   * Rotate the encryption key
   */
  rotateKey(): string {
    const newKeyId = this.generateKeyId();
    this.deriveKey(newKeyId);
    this.currentKeyId = newKeyId;
    return newKeyId;
  }
  
  /**
   * Re-encrypt data with the current key
   */
  reEncrypt(encryptedData: EncryptedData): EncryptedData {
    const decrypted = this.decrypt(encryptedData);
    return this.encrypt(decrypted);
  }
  
  /**
   * Generate a secure random UUID v4
   */
  generateUUID(): string {
    const bytes = crypto.randomBytes(16);
    
    // Set version (4) and variant (RFC4122)
    bytes[6] = (bytes[6] & 0x0f) | 0x40;
    bytes[8] = (bytes[8] & 0x3f) | 0x80;
    
    return [
      bytes.slice(0, 4).toString('hex'),
      bytes.slice(4, 6).toString('hex'),
      bytes.slice(6, 8).toString('hex'),
      bytes.slice(8, 10).toString('hex'),
      bytes.slice(10, 16).toString('hex')
    ].join('-');
  }
  
  /**
   * Encrypt data for a specific tenant
   */
  encryptForTenant(data: string | object, tenantId: string): EncryptedData {
    // Derive a tenant-specific key using the tenant ID
    const tenantKeyId = `tenant_${tenantId}_${this.currentKeyId}`;
    
    if (!this.derivedKeys.has(tenantKeyId)) {
      const tenantSalt = this.hash(tenantId);
      const saltBuffer = Buffer.from(tenantSalt, 'hex');
      
      // Override salt in key derivation options temporarily
      const originalSalt = this.keyDerivationOptions.salt;
      this.keyDerivationOptions.salt = saltBuffer;
      
      this.deriveKey(tenantKeyId);
      
      // Restore original salt
      this.keyDerivationOptions.salt = originalSalt;
    }
    
    return this.encrypt(data, tenantKeyId);
  }
  
  /**
   * Clean up resources
   */
  destroy(): void {
    if (this.keyRotationTimer) {
      clearInterval(this.keyRotationTimer);
    }
    this.derivedKeys.clear();
  }
  
  /**
   * Reset instance (for testing)
   */
  static resetInstance(): void {
    if (SecureDataHandler.instance) {
      SecureDataHandler.instance.destroy();
      SecureDataHandler.instance = null as any;
    }
  }
}

/**
 * Data anonymization utilities
 */
export class DataAnonymizer {
  private static EMAIL_REGEX = /^([^@\s]+)@((?:[-a-z0-9]+\.)+[a-z]{2,})$/i;
  private static PHONE_REGEX = /^\+?(\d{1,3})?[-. (]?(\d{3})[-. )]?(\d{3})[-. ]?(\d{4})$/;
  private static IP_REGEX = /(\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})/;
  private static CC_REGEX = /(\d{4})[- ]?(\d{4})[- ]?(\d{4})[- ]?(\d{4})/;
  
  /**
   * Anonymize sensitive fields in an object
   */
  static anonymizeObject<T extends object>(
    data: T,
    sensitiveFields: Array<keyof T | string>,
    preserveFormat: boolean = true
  ): T {
    const result = { ...data };
    
    for (const field of sensitiveFields) {
      const fieldName = field as string;
      const fieldPath = fieldName.split('.');
      let current: any = result;
      
      // Navigate to the nested property if necessary
      for (let i = 0; i < fieldPath.length - 1; i++) {
        if (current[fieldPath[i]] === undefined || current[fieldPath[i]] === null) {
          break;
        }
        current = current[fieldPath[i]];
      }
      
      const lastKey = fieldPath[fieldPath.length - 1];
      
      if (current && current[lastKey] !== undefined && current[lastKey] !== null) {
        current[lastKey] = this.anonymizeValue(current[lastKey], preserveFormat);
      }
    }
    
    return result;
  }
  
  /**
   * Anonymize a single value
   */
  static anonymizeValue(value: any, preserveFormat: boolean = true): any {
    if (value === null || value === undefined) {
      return value;
    }
    
    if (typeof value === 'object') {
      if (Array.isArray(value)) {
        return value.map(item => this.anonymizeValue(item, preserveFormat));
      }
      return '[REDACTED_OBJECT]';
    }
    
    if (typeof value === 'number') {
      return 0;
    }
    
    if (typeof value === 'boolean') {
      return false;
    }
    
    if (typeof value !== 'string') {
      return '[REDACTED]';
    }
    
    // String value handling
    if (!preserveFormat) {
      return '[REDACTED]';
    }
    
    // Attempt to preserve format based on the data type
    if (this.EMAIL_REGEX.test(value)) {
      return this.anonymizeEmail(value);
    }
    
    if (this.PHONE_REGEX.test(value)) {
      return this.anonymizePhone(value);
    }
    
    if (this.IP_REGEX.test(value)) {
      return this.anonymizeIP(value);
    }
    
    if (this.CC_REGEX.test(value)) {
      return this.anonymizeCreditCard(value);
    }
    
    // Generic string, preserve length
    return '*'.repeat(value.length);
  }
  
  /**
   * Anonymize an email address
   */
  static anonymizeEmail(email: string): string {
    const match = this.EMAIL_REGEX.exec(email);
    if (!match) return '[REDACTED_EMAIL]';
    
    const username = match[1];
    const domain = match[2];
    
    const anonymizedUsername = username.length <= 2
      ? '*'.repeat(username.length)
      : username.charAt(0) + '*'.repeat(username.length - 2) + username.charAt(username.length - 1);
    
    return `${anonymizedUsername}@${domain}`;
  }
  
  /**
   * Anonymize a phone number
   */
  static anonymizePhone(phone: string): string {
    const match = this.PHONE_REGEX.exec(phone);
    if (!match) return '[REDACTED_PHONE]';
    
    const countryCode = match[1] || '';
    const last4 = match[4];
    
    // Keep country code and last 4 digits
    return `${countryCode ? countryCode + '-' : ''}***-***-${last4}`;
  }
  
  /**
   * Anonymize an IP address
   */
  static anonymizeIP(ip: string): string {
    const match = this.IP_REGEX.exec(ip);
    if (!match) return '[REDACTED_IP]';
    
    // Keep first octet, anonymize the rest
    return `${match[1]}.***.***.**`;
  }
  
  /**
   * Anonymize a credit card number
   */
  static anonymizeCreditCard(cc: string): string {
    const match = this.CC_REGEX.exec(cc);
    if (!match) return '[REDACTED_CC]';
    
    // Keep first 4 and last 4 digits
    return `${match[1]}********${match[4]}`;
  }
}

export default {
  EncryptionAlgorithm,
  HashAlgorithm,
  SecureDataHandler,
  DataAnonymizer
};
