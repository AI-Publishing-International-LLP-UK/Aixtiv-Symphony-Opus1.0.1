// SPDX-License-Identifier: MIT
pragma solidity ^0.8.17;

import "@openzeppelin/contracts/access/Ownable.sol";
import "@openzeppelin/contracts/token/ERC721/extensions/ERC721URIStorage.sol";
import "@openzeppelin/contracts/utils/Counters.sol";
import "@openzeppelin/contracts/security/ReentrancyGuard.sol";

/**
 * @title FlightVerification
 * @dev Contract for verifying AIXTIV Flight Memory System activities
 * Handles flight verification, checkpoints, and completion records
 */
contract FlightVerification is Ownable, ReentrancyGuard {
    // Flight status options
    enum FlightStatus { InProgress, Completed, Cancelled }

/**
 * @title AIXTIVAgentNFT
 * @dev Contract for NFT representation of AIXTIV agents
 * Allows for ownership and transfer of agent capabilities
 */
contract AIXTIVAgentNFT is ERC721URIStorage, Ownable, ReentrancyGuard {
    using Counters for Counters.Counter;
    
    // Token counter
    Counters.Counter private _tokenIds;
    
    // Agent NFT metadata
    struct AgentNFTMetadata {
        string agentType;
        string expertise;
        uint256 memoryAllocation;
        uint256 mintTimestamp;
    }
    
    // Events
    event AgentMinted(
        uint256 indexed tokenId,
        address owner,
        string agentType,
        uint256 timestamp
    );
    
    event AgentActivated(
        uint256 indexed tokenId,
        string agentId,
        uint256 timestamp
    );
    
    // Storage
    mapping(uint256 => AgentNFTMetadata) private agentMetadata;
    mapping(uint256 => string) private tokenToAgentId;
    mapping(string => uint256) private agentIdToToken;
    
    /**
     * @dev Constructor
     */
    constructor() ERC721("AIXTIV Agent", "AIXAGENT") {}
    
    /**
     * @dev Mint a new agent NFT
     * @param to Address to mint the token to
     * @param tokenId Unique identifier for the token
     * @param metadataURI URI for the token metadata
     * @return New token ID
     */
    function mintAgent(
        address to,
        uint256 tokenId,
        string memory metadataURI
    ) external onlyOwner returns (uint256) {
        _mint(to, tokenId);
        _setTokenURI(tokenId, metadataURI);
        
        // Extract agent type from metadata (simplified)
        agentMetadata[tokenId] = AgentNFTMetadata({
            agentType: "Generic Agent", // Would be parsed from metadata in production
            expertise: "",
            memoryAllocation: 4000, // Default memory allocation
            mintTimestamp: block.timestamp
        });
        
        emit AgentMinted(tokenId, to, "Generic Agent", block.timestamp);
        
        return tokenId;
    }
    
    /**
     * @dev Mint a new agent NFT with full metadata
     * @param to Address to mint the token to
     * @param agentType Type of agent
     * @param expertise JSON string of agent expertise
     * @param memoryAllocation Initial memory allocation
     * @param metadataURI URI for the token metadata
     * @return New token ID
     */
    function mintAgentWithMetadata(
        address to,
        string memory agentType,
        string memory expertise,
        uint256 memoryAllocation,
        string memory metadataURI
    ) external onlyOwner returns (uint256) {
        uint256 tokenId = _tokenIds.current();
        _tokenIds.increment();
        
        _mint(to, tokenId);
        _setTokenURI(tokenId, metadataURI);
        
        agentMetadata[tokenId] = AgentNFTMetadata({
            agentType: agentType,
            expertise: expertise,
            memoryAllocation: memoryAllocation,
            mintTimestamp: block.timestamp
        });
        
        emit AgentMinted(tokenId, to, agentType, block.timestamp);
        
        return tokenId;
    }
    
    /**
     * @dev Activate an agent NFT by linking it to an agent ID
     * @param tokenId Token ID to activate
     * @param agentId Agent ID to link the token to
     */
    function activateAgent(uint256 tokenId, string memory agentId) external onlyOwner {
        require(_exists(tokenId), "Token does not exist");
        require(bytes(tokenToAgentId[tokenId]).length == 0, "Token already activated");
        require(agentIdToToken[agentId] == 0, "Agent ID already linked to a token");
        
        tokenToAgentId[tokenId] = agentId;
        agentIdToToken[agentId] = tokenId;
        
        emit AgentActivated(tokenId, agentId, block.timestamp);
    }
    
    /**
     * @dev Get agent metadata
     * @param tokenId Token ID to query
     * @return Structured agent metadata
     */
    function getAgentMetadata(uint256 tokenId) external view returns (
        string memory agentType,
        string memory expertise,
        uint256 memoryAllocation,
        uint256 mintTimestamp,
        string memory agentId
    ) {
        require(_exists(tokenId), "Token does not exist");
        
        AgentNFTMetadata storage metadata = agentMetadata[tokenId];
        
        return (
            metadata.agentType,
            metadata.expertise,
            metadata.memoryAllocation,
            metadata.mintTimestamp,
            tokenToAgentId[tokenId]
        );
    }
    
    /**
     * @dev Get token ID for an agent
     * @param agentId Agent ID to query
     * @return Token ID linked to the agent
     */
    function getTokenForAgent(string memory agentId) external view returns (uint256) {
        uint256 tokenId = agentIdToToken[agentId];
        require(tokenId != 0, "Agent ID not linked to any token");
        
        return tokenId;
    }
    
    /**
     * @dev Update agent memory allocation
     * @param tokenId Token ID to update
     * @param newMemoryAllocation New memory allocation value
     */
    function updateMemoryAllocation(uint256 tokenId, uint256 newMemoryAllocation) external onlyOwner {
        require(_exists(tokenId), "Token does not exist");
        require(newMemoryAllocation > 0, "Memory allocation must be positive");
        
        agentMetadata[tokenId].memoryAllocation = newMemoryAllocation;
    }
    
    /**
     * @dev Override transferFrom to handle agent ID linking
     */
    function transferFrom(address from, address to, uint256 tokenId) public override {
        super.transferFrom(from, to, tokenId);
        
        // Emit transfer event for off-chain tracking
        emit AgentMinted(tokenId, to, agentMetadata[tokenId].agentType, block.timestamp);
    }
    
    /**
     * @dev Override safeTransferFrom to handle agent ID linking
     */
    function safeTransferFrom(address from, address to, uint256 tokenId, bytes memory data) public override {
        super.safeTransferFrom(from, to, tokenId, data);
        
        // Emit transfer event for off-chain tracking
        emit AgentMinted(tokenId, to, agentMetadata[tokenId].agentType, block.timestamp);
    }
}

/**
 * @title AgentRegistry
 * @dev Contract for managing agent registration and capabilities
 * Handles agent lifecycle and content attribution
 */
contract AgentRegistry is Ownable, ReentrancyGuard {
    // Agent status options
    enum AgentStatus { Active, Inactive, Suspended }
    
    // Agent data structure
    struct Agent {
        string agentId;
        string agentType;
        string capabilities;
        string squadronId;
        AgentStatus status;
        uint256 registrationTimestamp;
    }
    
    // Events
    event AgentRegistered(
        string indexed agentId,
        string agentType,
        string squadronId,
        uint256 timestamp
    );
    
    event AgentUpdated(
        string indexed agentId,
        string capabilities,
        AgentStatus status,
        uint256 timestamp
    );
    
    event AgentContentRecorded(
        string indexed contentId,
        string agentId,
        string contentType,
        string metadataHash,
        uint256 timestamp
    );
    
    // Storage
    mapping(string => Agent) private agents;
    mapping(string => string[]) private squadronAgents;
    
    /**
     * @dev Register a new agent
     * @param agentId Unique identifier for the agent
     * @param agentType Type of agent
     * @param capabilities JSON string of agent capabilities
     * @param squadronId Identifier for the squadron
     */
    function registerAgent(
        string memory agentId,
        string memory agentType,
        string memory capabilities,
        string memory squadronId
    ) external onlyOwner {
        require(agents[agentId].registrationTimestamp == 0, "Agent already registered");
        
        agents[agentId] = Agent({
            agentId: agentId,
            agentType: agentType,
            capabilities: capabilities,
            squadronId: squadronId,
            status: AgentStatus.Active,
            registrationTimestamp: block.timestamp
        });
        
        // Associate agent with squadron
        squadronAgents[squadronId].push(agentId);
        
        emit AgentRegistered(agentId, agentType, squadronId, block.timestamp);
    }
    
    /**
     * @dev Update agent capabilities or status
     * @param agentId Identifier for the agent
     * @param capabilities JSON string of updated capabilities (empty to keep current)
     * @param status Updated status string (empty to keep current)
     * @param timestamp Update timestamp
     */
    function updateAgent(
        string memory agentId,
        string memory capabilities,
        string memory status,
        uint256 timestamp
    ) external onlyOwner {
        Agent storage agent = agents[agentId];
        require(agent.registrationTimestamp > 0, "Agent not registered");
        
        // Update capabilities if provided
        if (bytes(capabilities).length > 0) {
            agent.capabilities = capabilities;
        }
        
        // Update status if provided
        if (bytes(status).length > 0) {
            if (compareStrings(status, "active")) {
                agent.status = AgentStatus.Active;
            } else if (compareStrings(status, "inactive")) {
                agent.status = AgentStatus.Inactive;
            } else if (compareStrings(status, "suspended")) {
                agent.status = AgentStatus.Suspended;
            }
        }
        
        emit AgentUpdated(agentId, agent.capabilities, agent.status, timestamp);
    }
    
    /**
     * @dev Record content created by an agent
     * @param contentId Unique identifier for the content
     * @param agentId Identifier for the agent author
     * @param contentType Type of content
     * @param metadataHash Hash of content metadata
     * @param timestamp Content creation timestamp
     */
    function recordAgentContent(
        string memory contentId,
        string memory agentId,
        string memory contentType,
        string memory metadataHash,
        uint256 timestamp
    ) external onlyOwner {
        require(agents[agentId].registrationTimestamp > 0, "Agent not registered");
        
        emit AgentContentRecorded(
            contentId,
            agentId,
            contentType,
            metadataHash,
            timestamp
        );
    }
    
    /**
     * @dev Get agent data
     * @param agentId Identifier for the agent
     * @return Structured agent data
     */
    function getAgent(string memory agentId) external view returns (
        string memory agentType,
        string memory capabilities,
        string memory squadronId,
        AgentStatus status,
        uint256 registrationTimestamp
    ) {
        Agent storage agent = agents[agentId];
        require(agent.registrationTimestamp > 0, "Agent not registered");
        
        return (
            agent.agentType,
            agent.capabilities,
            agent.squadronId,
            agent.status,
            agent.registrationTimestamp
        );
    }
    
    /**
     * @dev Get agents in a squadron
     * @param squadronId Identifier for the squadron
     * @return Array of agent IDs
     */
    function getSquadronAgents(string memory squadronId) external view returns (string[] memory) {
        return squadronAgents[squadronId];
    }
    
    /**
     * @dev Compare two strings
     * @param a First string
     * @param b Second string
     * @return True if strings are equal
     */
    function compareStrings(string memory a, string memory b) internal pure returns (bool) {
        return keccak256(abi.encodePacked(a)) == keccak256(abi.encodePacked(b));
    }
}
    
    // Flight data structure
    struct Flight {
        string flightId;
        string pilotId;
        uint256 startTime;
        uint256 endTime;
        FlightStatus status;
        bool isPerfectFlight;
        uint256 rating;
        uint256 rewardPoints;
        string[] checkpointNames;
        mapping(string => Checkpoint) checkpoints;
    }
    
    // Checkpoint data structure
    struct Checkpoint {
        string name;
        uint256 timestamp;
        string dataHash;
        bool isCompleted;
    }
    
    // Event for flight start
    event FlightStarted(
        string indexed flightId,
        string pilotId,
        uint256 startTime
    );
    
    // Event for checkpoint recording
    event CheckpointRecorded(
        string indexed flightId,
        string checkpointName,
        uint256 timestamp
    );
    
    // Event for flight completion
    event FlightCompleted(
        string indexed flightId,
        uint256 endTime,
        uint256 rating,
        bool isPerfectFlight,
        uint256 rewardPoints
    );
    
    // Event for perfect flight achievement
    event PerfectFlight(
        string indexed flightId,
        string pilotId,
        uint256 timestamp,
        uint256 rewardPoints
    );
    
    // Storage for flights
    mapping(string => Flight) private flights;
    mapping(string => string[]) private pilotFlights;
    
    // Modifiers
    modifier flightExists(string memory flightId) {
        require(flights[flightId].startTime > 0, "Flight does not exist");
        _;
    }
    
    /**
     * @dev Start a new flight
     * @param flightId Unique identifier for the flight
     * @param pilotId Identifier for the pilot
     * @param startTime Timestamp when the flight starts
     * @param expectedDeliverablesHash Hash of expected deliverables
     */
    function startFlight(
        string memory flightId,
        string memory pilotId,
        uint256 startTime,
        string memory expectedDeliverablesHash
    ) external onlyOwner {
        require(flights[flightId].startTime == 0, "Flight already exists");
        
        Flight storage newFlight = flights[flightId];
        newFlight.flightId = flightId;
        newFlight.pilotId = pilotId;
        newFlight.startTime = startTime;
        newFlight.status = FlightStatus.InProgress;
        
        // Record takeoff checkpoint
        string memory takeoffCheckpoint = "takeoff";
        newFlight.checkpointNames.push(takeoffCheckpoint);
        newFlight.checkpoints[takeoffCheckpoint] = Checkpoint({
            name: takeoffCheckpoint,
            timestamp: startTime,
            dataHash: expectedDeliverablesHash,
            isCompleted: true
        });
        
        // Associate flight with pilot
        pilotFlights[pilotId].push(flightId);
        
        emit FlightStarted(flightId, pilotId, startTime);
    }
    
    /**
     * @dev Record a checkpoint during flight
     * @param flightId Identifier for the flight
     * @param checkpointName Name of the checkpoint
     * @param timestamp Timestamp when checkpoint is reached
     * @param dataHash Hash of checkpoint data
     */
    function recordCheckpoint(
        string memory flightId,
        string memory checkpointName,
        uint256 timestamp,
        string memory dataHash
    ) external onlyOwner flightExists(flightId) {
        Flight storage flight = flights[flightId];
        require(flight.status == FlightStatus.InProgress, "Flight not in progress");
        
        // Add checkpoint
        flight.checkpointNames.push(checkpointName);
        flight.checkpoints[checkpointName] = Checkpoint({
            name: checkpointName,
            timestamp: timestamp,
            dataHash: dataHash,
            isCompleted: true
        });
        
        emit CheckpointRecorded(flightId, checkpointName, timestamp);
    }
    
    /**
     * @dev Complete a flight
     * @param flightId Identifier for the flight
     * @param endTime Timestamp when flight ends
     * @param deliverablesHash Hash of flight deliverables
     * @param rating Flight rating (0-5)
     * @param isPerfectFlight Whether the flight meets perfect criteria
     * @param rewardPoints Points awarded for the flight
     */
    function completeFlight(
        string memory flightId,
        uint256 endTime,
        string memory deliverablesHash,
        uint256 rating,
        bool isPerfectFlight,
        uint256 rewardPoints
    ) external onlyOwner flightExists(flightId) {
        Flight storage flight = flights[flightId];
        require(flight.status == FlightStatus.InProgress, "Flight not in progress");
        
        // Update flight data
        flight.endTime = endTime;
        flight.status = FlightStatus.Completed;
        flight.rating = rating;
        flight.isPerfectFlight = isPerfectFlight;
        flight.rewardPoints = rewardPoints;
        
        // Record landing checkpoint
        string memory landingCheckpoint = "landing";
        flight.checkpointNames.push(landingCheckpoint);
        flight.checkpoints[landingCheckpoint] = Checkpoint({
            name: landingCheckpoint,
            timestamp: endTime,
            dataHash: deliverablesHash,
            isCompleted: true
        });
        
        emit FlightCompleted(flightId, endTime, rating, isPerfectFlight, rewardPoints);
        
        // Emit perfect flight event if applicable
        if (isPerfectFlight) {
            emit PerfectFlight(flightId, flight.pilotId, endTime, rewardPoints);
        }
    }
    
    /**
     * @dev Finalize a flight and confirm reward distributions
     * @param flightId Identifier for the flight
     * @param pilotId Identifier for the pilot
     * @param pilotPoints Points awarded to the pilot
     * @param groundCrewIds Array of ground crew identifiers
     * @param groundCrewPoints Array of points awarded to ground crew
     * @param ownerId Identifier for the owner
     * @param ownerPoints Points awarded to the owner
     * @param timestamp Timestamp of finalization
     */
    function finalizeFlight(
        string memory flightId,
        string memory pilotId,
        uint256 pilotPoints,
        string[] memory groundCrewIds,
        uint256[] memory groundCrewPoints,
        string memory ownerId,
        uint256 ownerPoints,
        uint256 timestamp
    ) external onlyOwner flightExists(flightId) {
        Flight storage flight = flights[flightId];
        require(flight.status == FlightStatus.Completed, "Flight not completed");
        
        // Record final checkpoint
        string memory finalCheckpoint = "finalized";
        flight.checkpointNames.push(finalCheckpoint);
        
        // Create data hash with reward information
        string memory rewardData = string(abi.encodePacked(
            pilotId, ":", uint2str(pilotPoints), ";",
            ownerId, ":", uint2str(ownerPoints)
        ));
        
        flight.checkpoints[finalCheckpoint] = Checkpoint({
            name: finalCheckpoint,
            timestamp: timestamp,
            dataHash: rewardData,
            isCompleted: true
        });
    }
    
    /**
     * @dev Record generic action with content hashes
     * @param actionType Type of action being recorded
     * @param actionId Unique identifier for the action
     * @param actorId Identifier for the actor performing the action
     * @param contentHash1 Hash of first content item
     * @param contentHash2 Hash of second content item
     * @param timestamp Timestamp of the action
     */
    function recordActionWithHashes(
        string memory actionType,
        string memory actionId,
        string memory actorId,
        string memory contentHash1,
        string memory contentHash2,
        uint256 timestamp
    ) external onlyOwner returns (bool) {
        // This is a simplified implementation that just returns success
        // In a production environment, this would store the action data
        return true;
    }
    
    /**
     * @dev Get flight data
     * @param flightId Identifier for the flight
     * @return Structured flight data
     */
    function getFlight(string memory flightId) external view returns (
        string memory pilotId,
        uint256 startTime,
        uint256 endTime,
        uint8 status,
        bool isPerfectFlight,
        uint256 rating,
        uint256 rewardPoints,
        string[] memory checkpointNames
    ) {
        Flight storage flight = flights[flightId];
        require(flight.startTime > 0, "Flight does not exist");
        
        return (
            flight.pilotId,
            flight.startTime,
            flight.endTime,
            uint8(flight.status),
            flight.isPerfectFlight,
            flight.rating,
            flight.rewardPoints,
            flight.checkpointNames
        );
    }
    
    /**
     * @dev Get checkpoint data
     * @param flightId Identifier for the flight
     * @param checkpointName Name of the checkpoint
     * @return Structured checkpoint data
     */
    function getCheckpoint(string memory flightId, string memory checkpointName) 
        external 
        view 
        flightExists(flightId) 
        returns (
            string memory name,
            uint256 timestamp,
            string memory dataHash,
            bool isCompleted
        ) 
    {
        Checkpoint storage checkpoint = flights[flightId].checkpoints[checkpointName];
        require(bytes(checkpoint.name).length > 0, "Checkpoint does not exist");
        
        return (
            checkpoint.name,
            checkpoint.timestamp,
            checkpoint.dataHash,
            checkpoint.isCompleted
        );
    }
    
    /**
     * @dev Get flights for a pilot
     * @param pilotId Identifier for the pilot
     * @return Array of flight IDs
     */
    function getPilotFlights(string memory pilotId) external view returns (string[] memory) {
        return pilotFlights[pilotId];
    }
    
    /**
     * @dev Convert uint to string
     * @param value The uint value to convert
     * @return The string representation
     */
    function uint2str(uint256 value) internal pure returns (string memory) {
        if (value == 0) {
            return "0";
        }
        
        uint256 temp = value;
        uint256 digits;
        
        while (temp != 0) {
            digits++;
            temp /= 10;
        }
        
        bytes memory buffer = new bytes(digits);
        
        while (value != 0) {
            digits -= 1;
            buffer[digits] = bytes1(uint8(48 + uint(value % 10)));
            value /= 10;
        }
        
        return string(buffer);
    }
}

/**
 * @title DeliverableAuthorization
 * @dev Contract for verifying and authorizing deliverables
 * Handles owner authorization of work performed by agents
 */
contract DeliverableAuthorization is Ownable, ReentrancyGuard {
    // Deliverable status options
    enum DeliverableStatus { Pending, Approved, Rejected }
    
    // Deliverable data structure
    struct Deliverable {
        string deliverableId;
        string pilotId;
        string ownerId;
        string title;
        uint256 createdAt;
        uint256 reviewedAt;
        DeliverableStatus status;
    }
    
    // Events
    event DeliverableCreated(
        string indexed deliverableId,
        string pilotId,
        string ownerId,
        uint256 timestamp
    );
    
    event DeliverableAuthorized(
        string indexed deliverableId,
        DeliverableStatus status,
        uint256 timestamp
    );
    
    event SubmissionRecorded(
        string indexed submissionId,
        string ownerId,
        string submissionHash,
        uint256 timestamp
    );
    
    // Storage
    mapping(string => Deliverable) private deliverables;
    mapping(string => string[]) private ownerDeliverables;
    mapping(string => string[]) private pilotDeliverables;
    
    /**
     * @dev Create a new deliverable
     * @param deliverableId Unique identifier for the deliverable
     * @param pilotId Identifier for the pilot
     * @param ownerId Identifier for the owner
     * @param title Title of the deliverable
     * @param timestamp Creation timestamp
     */
    function createDeliverable(
        string memory deliverableId,
        string memory pilotId,
        string memory ownerId,
        string memory title,
        uint256 timestamp
    ) external onlyOwner {
        require(deliverables[deliverableId].createdAt == 0, "Deliverable already exists");
        
        deliverables[deliverableId] = Deliverable({
            deliverableId: deliverableId,
            pilotId: pilotId,
            ownerId: ownerId,
            title: title,
            createdAt: timestamp,
            reviewedAt: 0,
            status: DeliverableStatus.Pending
        });
        
        // Associate deliverable with owner and pilot
        ownerDeliverables[ownerId].push(deliverableId);
        pilotDeliverables[pilotId].push(deliverableId);
        
        emit DeliverableCreated(deliverableId, pilotId, ownerId, timestamp);
    }
    
    /**
     * @dev Record owner authorization decision
     * @param deliverableId Identifier for the deliverable
     * @param approved Whether the deliverable is approved
     * @param timestamp Authorization timestamp
     */
    function recordAuthorization(
        string memory deliverableId,
        bool approved,
        uint256 timestamp
    ) external onlyOwner {
        Deliverable storage deliverable = deliverables[deliverableId];
        require(deliverable.createdAt > 0, "Deliverable does not exist");
        require(deliverable.status == DeliverableStatus.Pending, "Deliverable already reviewed");
        
        deliverable.reviewedAt = timestamp;
        deliverable.status = approved ? DeliverableStatus.Approved : DeliverableStatus.Rejected;
        
        emit DeliverableAuthorized(
            deliverableId, 
            deliverable.status, 
            timestamp
        );
    }
    
    /**
     * @dev Record bid submission
     * @param submissionId Unique identifier for the submission
     * @param ownerId Identifier for the owner
     * @param submissionHash Hash of the submission data
     * @param timestamp Submission timestamp
     */
    function recordSubmission(
        string memory submissionId,
        string memory ownerId,
        string memory submissionHash,
        uint256 timestamp
    ) external onlyOwner {
        emit SubmissionRecorded(submissionId, ownerId, submissionHash, timestamp);
    }
    
    /**
     * @dev Get deliverable data
     * @param deliverableId Identifier for the deliverable
     * @return Structured deliverable data
     */
    function getDeliverable(string memory deliverableId) external view returns (
        string memory pilotId,
        string memory ownerId,
        string memory title,
        uint256 createdAt,
        uint256 reviewedAt,
        DeliverableStatus status
    ) {
        Deliverable storage deliverable = deliverables[deliverableId];
        require(deliverable.createdAt > 0, "Deliverable does not exist");
        
        return (
            deliverable.pilotId,
            deliverable.ownerId,
            deliverable.title,
            deliverable.createdAt,
            deliverable.reviewedAt,
            deliverable.status
        );
    }
    
    /**
     * @dev Get deliverables for an owner
     * @param ownerId Identifier for the owner
     * @return Array of deliverable IDs
     */
    function getOwnerDeliverables(string memory ownerId) external view returns (string[] memory) {
        return ownerDeliverables[ownerId];
    }
    
    /**
     * @dev Get deliverables for a pilot
     * @param pilotId Identifier for the pilot
     * @return Array of deliverable IDs
     */
    function getPilotDeliverables(string memory pilotId) external view returns (string[] memory) {
        return pilotDeliverables[pilotId];
    }
}

/**
 * @title RewardDistribution
 * @dev Contract for managing reward points distribution
 * Handles point allocation to pilots, ground crew, and owners
 */
contract RewardDistribution is Ownable, ReentrancyGuard {
    // Events
    event RewardsDistributed(
        string indexed deliverableId,
        string pilotId,
        uint256 pilotPoints,
        uint256 totalGroundCrewPoints,
        string ownerId,
        uint256 ownerPoints,
        uint256 timestamp
    );
    
    event PerfectFlightRewardsDistributed(
        string indexed flightId,
        string pilotId,
        uint256 pilotBonus,
        uint256 totalGroundCrewBonus,
        string ownerId,
        uint256 ownerBonus,
        uint256 timestamp
    );
    
    event RewardPointsChanged(
        string indexed agentId,
        int256 pointsDelta,
        uint256 newTotal,
        uint256 timestamp
    );
    
    // Storage
    mapping(string => uint256) private totalRewardPoints;
    
    /**
     * @dev Distribute rewards for a deliverable
     * @param deliverableId Identifier for the deliverable
     * @param pilotId Identifier for the pilot
     * @param pilotPoints Points awarded to the pilot
     * @param groundCrewIds Array of ground crew identifiers
     * @param groundCrewPoints Array of points awarded to ground crew
     * @param ownerId Identifier for the owner
     * @param ownerPoints Points awarded to the owner
     */
    function distributeRewards(
        string memory deliverableId,
        string memory pilotId,
        uint256 pilotPoints,
        string[] memory groundCrewIds,
        uint256[] memory groundCrewPoints,
        string memory ownerId,
        uint256 ownerPoints
    ) external onlyOwner {
        require(groundCrewIds.length == groundCrewPoints.length, "Array length mismatch");
        
        // Update pilot points
        totalRewardPoints[pilotId] += pilotPoints;
        
        // Update ground crew points
        uint256 totalGroundCrewPoints = 0;
        for (uint i = 0; i < groundCrewIds.length; i++) {
            totalRewardPoints[groundCrewIds[i]] += groundCrewPoints[i];
            totalGroundCrewPoints += groundCrewPoints[i];
        }
        
        // Update owner points
        totalRewardPoints[ownerId] += ownerPoints;
        
        emit RewardsDistributed(
            deliverableId,
            pilotId,
            pilotPoints,
            totalGroundCrewPoints,
            ownerId,
            ownerPoints,
            block.timestamp
        );
    }
    
    /**
     * @dev Distribute bonus rewards for perfect flights
     * @param flightId Identifier for the flight
     * @param pilotId Identifier for the pilot
     * @param pilotBonus Bonus points awarded to the pilot
     * @param groundCrewIds Array of ground crew identifiers
     * @param groundCrewBonuses Array of bonus points awarded to ground crew
     * @param ownerId Identifier for the owner
     * @param ownerBonus Bonus points awarded to the owner
     */
    function distributePerfectFlightRewards(
        string memory flightId,
        string memory pilotId,
        uint256 pilotBonus,
        string[] memory groundCrewIds,
        uint256[] memory groundCrewBonuses,
        string memory ownerId,
        uint256 ownerBonus
    ) external onlyOwner {
        require(groundCrewIds.length == groundCrewBonuses.length, "Array length mismatch");
        
        // Update pilot points
        totalRewardPoints[pilotId] += pilotBonus;
        
        // Update ground crew points
        uint256 totalGroundCrewBonus = 0;
        for (uint i = 0; i < groundCrewIds.length; i++) {
            totalRewardPoints[groundCrewIds[i]] += groundCrewBonuses[i];
            totalGroundCrewBonus += groundCrewBonuses[i];
        }
        
        // Update owner points
        totalRewardPoints[ownerId] += ownerBonus;
        
        emit PerfectFlightRewardsDistributed(
            flightId,
            pilotId,
            pilotBonus,
            totalGroundCrewBonus,
            ownerId,
            ownerBonus,
            block.timestamp
        );
    }
    
    /**
     * @dev Record change in reward points
     * @param agentId Identifier for the agent
     * @param pointsDelta Change in points (positive or negative)
     * @param newTotal New total points
     * @param timestamp Timestamp of the change
     */
    function recordRewardPointsChange(
        string memory agentId,
        int256 pointsDelta,
        uint256 newTotal,
        uint256 timestamp
    ) external onlyOwner {
        // Update total points
        totalRewardPoints[agentId] = newTotal;
        
        emit RewardPointsChanged(agentId, pointsDelta, newTotal, timestamp);
    }
    
    /**
     * @dev Get total reward points for an agent
     * @param agentId Identifier for the agent
     * @return Total reward points
     */
    function getTotalRewardPoints(string memory agentId) external view returns (uint256) {
        return totalRewardPoints[agentId];
    }
}