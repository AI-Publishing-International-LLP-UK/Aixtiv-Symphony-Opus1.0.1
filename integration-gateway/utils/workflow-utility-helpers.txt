// src/utils/workflow/WorkflowUtilities.ts

/**
 * Task execution status
 */
export enum TaskStatus {
  PENDING = 'pending',
  RUNNING = 'running',
  COMPLETED = 'completed',
  FAILED = 'failed',
  CANCELLED = 'cancelled',
  PAUSED = 'paused',
  TIMED_OUT = 'timed_out',
  SKIPPED = 'skipped'
}

/**
 * Workflow execution status
 */
export enum WorkflowStatus {
  IDLE = 'idle',
  RUNNING = 'running',
  COMPLETED = 'completed',
  FAILED = 'failed',
  CANCELLED = 'cancelled',
  PAUSED = 'paused'
}

/**
 * Task definition
 */
export interface Task<TInput = any, TOutput = any> {
  id: string;
  name: string;
  execute: (input: TInput, context: WorkflowContext) => Promise<TOutput>;
  validate?: (input: TInput) => Promise<boolean> | boolean;
  retry?: {
    maxAttempts: number;
    delay: number; // in milliseconds
    backoffRate?: number;
  };
  timeout?: number; // in milliseconds
  dependencies?: string[]; // IDs of tasks that must complete before this one
  compensate?: (input: TInput, error: Error, context: WorkflowContext) => Promise<void>;
  skipIf?: (input: TInput, context: WorkflowContext) => Promise<boolean> | boolean;
  onSuccess?: (output: TOutput, context: WorkflowContext) => Promise<void>;
  onFailure?: (error: Error, context: WorkflowContext) => Promise<void>;
}

/**
 * Task execution instance
 */
export interface TaskExecution<TInput = any, TOutput = any> {
  taskId: string;
  status: TaskStatus;
  input: TInput;
  output?: TOutput;
  error?: Error;
  startTime?: number;
  endTime?: number;
  attempts: number;
  nextRetryTime?: number;
}

/**
 * Workflow definition
 */
export interface Workflow<TInput = any, TOutput = any> {
  id: string;
  name: string;
  description?: string;
  version: string;
  tasks: Task[];
  onStart?: (input: TInput, context: WorkflowContext) => Promise<void>;
  onComplete?: (output: TOutput, context: WorkflowContext) => Promise<void>;
  onError?: (error: Error, context: WorkflowContext) => Promise<void>;
  onCancel?: (context: WorkflowContext) => Promise<void>;
  timeout?: number; // in milliseconds
  concurrencyLimit?: number;
}

/**
 * Workflow execution instance
 */
export interface WorkflowExecution<TInput = any, TOutput = any> {
  id: string;
  workflowId: string;
  status: WorkflowStatus;
  input: TInput;
  output?: TOutput;
  error?: Error;
  taskExecutions: Map<string, TaskExecution>;
  startTime?: number;
  endTime?: number;
  tenantId?: string;
  userId?: string;
  correlationId?: string;
  tags?: string[];
}

/**
 * Workflow context passed to tasks
 */
export interface WorkflowContext {
  workflowId: string;
  executionId: string;
  startTime: number;
  variables: Map<string, any>;
  taskResults: Map<string, any>;
  tenantId?: string;
  userId?: string;
  correlationId?: string;
  logger: {
    debug: (message: string, data?: any) => void;
    info: (message: string, data?: any) => void;
    warn: (message: string, data?: any) => void;
    error: (message: string, data?: any) => void;
  };
}

/**
 * Workflow execution options
 */
export interface WorkflowExecutionOptions {
  tenantId?: string;
  userId?: string;
  correlationId?: string;
  tags?: string[];
  variables?: Record<string, any>;
}

/**
 * Workflow execution event types
 */
export enum WorkflowEventType {
  WORKFLOW_STARTED = 'workflow.started',
  WORKFLOW_COMPLETED = 'workflow.completed',
  WORKFLOW_FAILED = 'workflow.failed',
  WORKFLOW_CANCELLED = 'workflow.cancelled',
  WORKFLOW_PAUSED = 'workflow.paused',
  WORKFLOW_RESUMED = 'workflow.resumed',
  TASK_STARTED = 'task.started',
  TASK_COMPLETED = 'task.completed',
  TASK_FAILED = 'task.failed',
  TASK_RETRYING = 'task.retrying',
  TASK_CANCELLED = 'task.cancelled',
  TASK_TIMED_OUT = 'task.timed_out',
  TASK_SKIPPED = 'task.skipped'
}

/**
 * Workflow execution event
 */
export interface WorkflowEvent {
  type: WorkflowEventType;
  workflowId: string;
  executionId: string;
  taskId?: string;
  timestamp: number;
  details?: any;
  tenantId?: string;
}

/**
 * Workflow engine responsible for executing workflows
 */
export class WorkflowEngine {
  private workflows: Map<string, Workflow>;
  private executions: Map<string, WorkflowExecution>;
  private listeners: Map<WorkflowEventType, Array<(event: WorkflowEvent) => void>>;
  
  constructor() {
    this.workflows = new Map();
    this.executions = new Map();
    this.listeners = new Map();
    
    // Initialize event types
    Object.values(WorkflowEventType).forEach(type => {
      this.listeners.set(type as WorkflowEventType, []);
    });
  }
  
  /**
   * Register a workflow
   */
  registerWorkflow(workflow: Workflow): void {
    if (this.workflows.has(workflow.id)) {
      throw new Error(`Workflow with ID ${workflow.id} already exists`);
    }
    
    this.workflows.set(workflow.id, workflow);
  }
  
  /**
   * Get a registered workflow
   */
  getWorkflow(workflowId: string): Workflow | undefined {
    return this.workflows.get(workflowId);
  }
  
  /**
   * Execute a workflow with given input
   */
  async executeWorkflow<TInput, TOutput>(
    workflowId: string,
    input: TInput,
    options: WorkflowExecutionOptions = {}
  ): Promise<string> {
    const workflow = this.workflows.get(workflowId);
    
    if (!workflow) {
      throw new Error(`Workflow with ID ${workflowId} not found`);
    }
    
    const executionId = this.generateExecutionId();
    const startTime = Date.now();
    
    // Initialize context
    const context: WorkflowContext = {
      workflowId,
      executionId,
      startTime,
      variables: new Map(Object.entries(options.variables || {})),
      taskResults: new Map(),
      tenantId: options.tenantId,
      userId: options.userId,
      correlationId: options.correlationId,
      logger: {
        debug: (message, data) => this.log('debug', message, data, workflowId, executionId),
        info: (message, data) => this.log('info', message, data, workflowId, executionId),
        warn: (message, data) => this.log('warn', message, data, workflowId, executionId),
        error: (message, data) => this.log('error', message, data, workflowId, executionId)
      }
    };
    
    // Initialize execution
    const execution: WorkflowExecution<TInput, TOutput> = {
      id: executionId,
      workflowId,
      status: WorkflowStatus.RUNNING,
      input,
      taskExecutions: new Map(),
      startTime,
      tenantId: options.tenantId,
      userId: options.userId,
      correlationId: options.correlationId,
      tags: options.tags
    };
    
    this.executions.set(executionId, execution);
    
    // Initialize task executions
    for (const task of workflow.tasks) {
      execution.taskExecutions.set(task.id, {
        taskId: task.id,
        status: TaskStatus.PENDING,
        input: null,
        attempts: 0
      });
    }
    
    // Emit workflow started event
    this.emitEvent({
      type: WorkflowEventType.WORKFLOW_STARTED,
      workflowId,
      executionId,
      timestamp: startTime,
      details: { input },
      tenantId: options.tenantId
    });
    
    // Call onStart handler if defined
    if (workflow.onStart) {
      try {
        await workflow.onStart(input, context);
      } catch (error) {
        console.error(`Error in onStart handler for workflow ${workflowId}:`, error);
      }
    }
    
    // Start workflow execution (non-blocking)
    this.runWorkflow(workflow, execution, context).catch(error => {
      console.error(`Unhandled error in workflow execution ${executionId}:`, error);
    });
    
    return executionId;
  }
  
  /**
   * Get the status of a workflow execution
   */
  getExecutionStatus(executionId: string): WorkflowStatus | undefined {
    const execution = this.executions.get(executionId);
    return execution?.status;
  }
  
  /**
   * Get detailed information about a workflow execution
   */
  getExecution(executionId: string): WorkflowExecution | undefined {
    return this.executions.get(executionId);
  }
  
  /**
   * Cancel a running workflow
   */
  async cancelWorkflow(executionId: string): Promise<boolean> {
    const execution = this.executions.get(executionId);
    
    if (!execution || execution.status !== WorkflowStatus.RUNNING) {
      return false;
    }
    
    execution.status = WorkflowStatus.CANCELLED